
Robot3Roda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  08009d30  08009d30  00019d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  00020a18  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d4  0800a4d4  00020a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a18  20000000  0800a4e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020a18  2**0
                  CONTENTS
 10 .bss          000004e8  20000a18  20000a18  00020a18  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f00  20000f00  00020a18  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001773a  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303d  00000000  00000000  00038182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000f5b5  00000000  00000000  0003b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e98  00000000  00000000  0004a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000ef8  00000000  00000000  0004b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000234e2  00000000  00000000  0004c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000187a1  00000000  00000000  0006f9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf451  00000000  00000000  0008818b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001575dc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003b40  00000000  00000000  0015762c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a18 	.word	0x20000a18
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d14 	.word	0x08009d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a1c 	.word	0x20000a1c
 80001cc:	08009d14 	.word	0x08009d14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f4c:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <MX_CAN1_Init+0x38>)
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <MX_CAN1_Init+0x3c>)
 8000f52:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 3;
 8000f54:	2303      	movs	r3, #3
 8000f56:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f5c:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000f5e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000f62:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f68:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f6a:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f6c:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f6e:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f70:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f72:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f74:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f76:	f001 f9d9 	bl	800232c <HAL_CAN_Init>
 8000f7a:	b900      	cbnz	r0, 8000f7e <MX_CAN1_Init+0x32>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f7e:	f000 fc35 	bl	80017ec <Error_Handler>
}
 8000f82:	e7fb      	b.n	8000f7c <MX_CAN1_Init+0x30>
 8000f84:	20000a34 	.word	0x20000a34
 8000f88:	40006400 	.word	0x40006400

08000f8c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	2300      	movs	r3, #0
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	9304      	str	r3, [sp, #16]
 8000f96:	9305      	str	r3, [sp, #20]
 8000f98:	9306      	str	r3, [sp, #24]
 8000f9a:	9307      	str	r3, [sp, #28]
  if(canHandle->Instance==CAN1)
 8000f9c:	6802      	ldr	r2, [r0, #0]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_CAN_MspInit+0x74>)
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d001      	beq.n	8000fa8 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000fa4:	b008      	add	sp, #32
 8000fa6:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa8:	2400      	movs	r4, #0
 8000faa:	9401      	str	r4, [sp, #4]
 8000fac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fba:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000fbe:	9201      	str	r2, [sp, #4]
 8000fc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	9402      	str	r4, [sp, #8]
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f042 0208 	orr.w	r2, r2, #8
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2202      	movs	r2, #2
 8000fdc:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe4:	a903      	add	r1, sp, #12
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <HAL_CAN_MspInit+0x78>)
 8000fe8:	f002 f816 	bl	8003018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000fec:	4622      	mov	r2, r4
 8000fee:	4621      	mov	r1, r4
 8000ff0:	2014      	movs	r0, #20
 8000ff2:	f001 fd6d 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ff6:	2014      	movs	r0, #20
 8000ff8:	f001 fda0 	bl	8002b3c <HAL_NVIC_EnableIRQ>
}
 8000ffc:	e7d2      	b.n	8000fa4 <HAL_CAN_MspInit+0x18>
 8000ffe:	bf00      	nop
 8001000:	40006400 	.word	0x40006400
 8001004:	40020c00 	.word	0x40020c00

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001008:	b510      	push	{r4, lr}
 800100a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100c:	2400      	movs	r4, #0
 800100e:	9400      	str	r4, [sp, #0]
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_DMA_Init+0x64>)
 8001012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001014:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001020:	9200      	str	r2, [sp, #0]
 8001022:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001024:	9401      	str	r4, [sp, #4]
 8001026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001028:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001038:	4622      	mov	r2, r4
 800103a:	4621      	mov	r1, r4
 800103c:	200b      	movs	r0, #11
 800103e:	f001 fd47 	bl	8002ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001042:	200b      	movs	r0, #11
 8001044:	f001 fd7a 	bl	8002b3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001048:	4622      	mov	r2, r4
 800104a:	4621      	mov	r1, r4
 800104c:	2010      	movs	r0, #16
 800104e:	f001 fd3f 	bl	8002ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001052:	2010      	movs	r0, #16
 8001054:	f001 fd72 	bl	8002b3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001058:	4622      	mov	r2, r4
 800105a:	4621      	mov	r1, r4
 800105c:	203a      	movs	r0, #58	; 0x3a
 800105e:	f001 fd37 	bl	8002ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001062:	203a      	movs	r0, #58	; 0x3a
 8001064:	f001 fd6a 	bl	8002b3c <HAL_NVIC_EnableIRQ>

}
 8001068:	b002      	add	sp, #8
 800106a:	bd10      	pop	{r4, pc}
 800106c:	40023800 	.word	0x40023800

08001070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001074:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	2400      	movs	r4, #0
 8001078:	9405      	str	r4, [sp, #20]
 800107a:	9406      	str	r4, [sp, #24]
 800107c:	9407      	str	r4, [sp, #28]
 800107e:	9408      	str	r4, [sp, #32]
 8001080:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	9400      	str	r4, [sp, #0]
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <MX_GPIO_Init+0xe8>)
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
 800108e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001090:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	9401      	str	r4, [sp, #4]
 800109a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
 80010a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a4:	f002 0201 	and.w	r2, r2, #1
 80010a8:	9201      	str	r2, [sp, #4]
 80010aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	9402      	str	r4, [sp, #8]
 80010ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b0:	f042 0208 	orr.w	r2, r2, #8
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
 80010b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b8:	f002 0208 	and.w	r2, r2, #8
 80010bc:	9202      	str	r2, [sp, #8]
 80010be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c0:	9403      	str	r4, [sp, #12]
 80010c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c4:	f042 0204 	orr.w	r2, r2, #4
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010cc:	f002 0204 	and.w	r2, r2, #4
 80010d0:	9203      	str	r2, [sp, #12]
 80010d2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	9404      	str	r4, [sp, #16]
 80010d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d8:	f042 0202 	orr.w	r2, r2, #2
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	9304      	str	r3, [sp, #16]
 80010e6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, O6_Pin|O5_Pin|O3_Pin|O4_Pin
 80010e8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001164 <MX_GPIO_Init+0xf4>
 80010ec:	4622      	mov	r2, r4
 80010ee:	f24f 01a8 	movw	r1, #61608	; 0xf0a8
 80010f2:	4640      	mov	r0, r8
 80010f4:	f002 f896 	bl	8003224 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O1_Pin|O2_Pin, GPIO_PIN_RESET);
 80010f8:	4f18      	ldr	r7, [pc, #96]	; (800115c <MX_GPIO_Init+0xec>)
 80010fa:	4622      	mov	r2, r4
 80010fc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001100:	4638      	mov	r0, r7
 8001102:	f002 f88f 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, GPIO_PIN_RESET);
 8001106:	4e16      	ldr	r6, [pc, #88]	; (8001160 <MX_GPIO_Init+0xf0>)
 8001108:	4622      	mov	r2, r4
 800110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110e:	4630      	mov	r0, r6
 8001110:	f002 f888 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD3 PD5 PD7 */
  GPIO_InitStruct.Pin = O6_Pin|O5_Pin|O3_Pin|O4_Pin
 8001114:	f24f 03a8 	movw	r3, #61608	; 0xf0a8
 8001118:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2501      	movs	r5, #1
 800111c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	a905      	add	r1, sp, #20
 8001124:	4640      	mov	r0, r8
 8001126:	f001 ff77 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin;
 800112a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	a905      	add	r1, sp, #20
 8001138:	4638      	mov	r0, r7
 800113a:	f001 ff6d 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O0_Pin;
 800113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001142:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(O0_GPIO_Port, &GPIO_InitStruct);
 800114a:	a905      	add	r1, sp, #20
 800114c:	4630      	mov	r0, r6
 800114e:	f001 ff63 	bl	8003018 <HAL_GPIO_Init>

}
 8001152:	b00a      	add	sp, #40	; 0x28
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40020800 	.word	0x40020800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020c00 	.word	0x40020c00

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b500      	push	{lr}
 800116a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116c:	2230      	movs	r2, #48	; 0x30
 800116e:	2100      	movs	r1, #0
 8001170:	a808      	add	r0, sp, #32
 8001172:	f003 fb11 	bl	8004798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001176:	2300      	movs	r3, #0
 8001178:	9303      	str	r3, [sp, #12]
 800117a:	9304      	str	r3, [sp, #16]
 800117c:	9305      	str	r3, [sp, #20]
 800117e:	9306      	str	r3, [sp, #24]
 8001180:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <SystemClock_Config+0xa0>)
 8001186:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001188:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800118c:	6411      	str	r1, [r2, #64]	; 0x40
 800118e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001190:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001194:	9201      	str	r2, [sp, #4]
 8001196:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <SystemClock_Config+0xa4>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2202      	movs	r2, #2
 80011ba:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011c0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011c6:	21a8      	movs	r1, #168	; 0xa8
 80011c8:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ca:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011cc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	a808      	add	r0, sp, #32
 80011d0:	f002 f838 	bl	8003244 <HAL_RCC_OscConfig>
 80011d4:	b998      	cbnz	r0, 80011fe <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011e6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ee:	2105      	movs	r1, #5
 80011f0:	a803      	add	r0, sp, #12
 80011f2:	f002 fa8d 	bl	8003710 <HAL_RCC_ClockConfig>
 80011f6:	b920      	cbnz	r0, 8001202 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
}
 80011f8:	b015      	add	sp, #84	; 0x54
 80011fa:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <SystemClock_Config+0x98>
 8001202:	b672      	cpsid	i
 8001204:	e7fe      	b.n	8001204 <SystemClock_Config+0x9c>
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <main>:
{
 8001210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001214:	b087      	sub	sp, #28
  HAL_Init();
 8001216:	f001 f849 	bl	80022ac <HAL_Init>
  SystemClock_Config();
 800121a:	f7ff ffa5 	bl	8001168 <SystemClock_Config>
  MX_GPIO_Init();
 800121e:	f7ff ff27 	bl	8001070 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001222:	f7ff fe93 	bl	8000f4c <MX_CAN1_Init>
  MX_TIM3_Init();
 8001226:	f000 fd83 	bl	8001d30 <MX_TIM3_Init>
  MX_DMA_Init();
 800122a:	f7ff feed 	bl	8001008 <MX_DMA_Init>
  MX_UART5_Init();
 800122e:	f000 fe8b 	bl	8001f48 <MX_UART5_Init>
  MX_TIM8_Init();
 8001232:	f000 fdd7 	bl	8001de4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001236:	f000 febb 	bl	8001fb0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800123a:	f000 fe9f 	bl	8001f7c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800123e:	f000 fda9 	bl	8001d94 <MX_TIM6_Init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001242:	4c64      	ldr	r4, [pc, #400]	; (80013d4 <main+0x1c4>)
 8001244:	2201      	movs	r2, #1
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	4620      	mov	r0, r4
 800124a:	f001 ffeb 	bl	8003224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2120      	movs	r1, #32
 8001252:	4620      	mov	r0, r4
 8001254:	f001 ffe6 	bl	8003224 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	4620      	mov	r0, r4
 800125e:	f001 ffe1 	bl	8003224 <HAL_GPIO_WritePin>
  TxMsg.IDE = CAN_ID_STD;
 8001262:	4a5d      	ldr	r2, [pc, #372]	; (80013d8 <main+0x1c8>)
 8001264:	2300      	movs	r3, #0
 8001266:	6093      	str	r3, [r2, #8]
  TxMsg.RTR = CAN_RTR_DATA;
 8001268:	60d3      	str	r3, [r2, #12]
  sFilterConfig.FilterBank = 0;
 800126a:	495c      	ldr	r1, [pc, #368]	; (80013dc <main+0x1cc>)
 800126c:	614b      	str	r3, [r1, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800126e:	618b      	str	r3, [r1, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001270:	2501      	movs	r5, #1
 8001272:	61cd      	str	r5, [r1, #28]
  sFilterConfig.FilterIdHigh = 0X0000;
 8001274:	600b      	str	r3, [r1, #0]
  sFilterConfig.FilterIdLow = 0X0000;
 8001276:	604b      	str	r3, [r1, #4]
  sFilterConfig.FilterMaskIdHigh = 0X0000;
 8001278:	608b      	str	r3, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0X0000;
 800127a:	60cb      	str	r3, [r1, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800127c:	610b      	str	r3, [r1, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800127e:	620d      	str	r5, [r1, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8001280:	624b      	str	r3, [r1, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001282:	4c57      	ldr	r4, [pc, #348]	; (80013e0 <main+0x1d0>)
 8001284:	4620      	mov	r0, r4
 8001286:	f001 f8e1 	bl	800244c <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800128a:	4620      	mov	r0, r4
 800128c:	f001 f97a 	bl	8002584 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001290:	2102      	movs	r1, #2
 8001292:	4620      	mov	r0, r4
 8001294:	f001 fac6 	bl	8002824 <HAL_CAN_ActivateNotification>
  HAL_Delay(2000);
 8001298:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800129c:	f001 f832 	bl	8002304 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart2, gyroTerima, 8);
 80012a0:	4e50      	ldr	r6, [pc, #320]	; (80013e4 <main+0x1d4>)
 80012a2:	2208      	movs	r2, #8
 80012a4:	4950      	ldr	r1, [pc, #320]	; (80013e8 <main+0x1d8>)
 80012a6:	4630      	mov	r0, r6
 80012a8:	f003 fa30 	bl	800470c <HAL_UART_Receive_DMA>
  gyroKirim = 0xA5;
 80012ac:	4c4f      	ldr	r4, [pc, #316]	; (80013ec <main+0x1dc>)
 80012ae:	27a5      	movs	r7, #165	; 0xa5
 80012b0:	7027      	strb	r7, [r4, #0]
  HAL_UART_Transmit(&huart2, &gyroKirim, 1, 1000);
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	462a      	mov	r2, r5
 80012b8:	4621      	mov	r1, r4
 80012ba:	4630      	mov	r0, r6
 80012bc:	f002 fedf 	bl	800407e <HAL_UART_Transmit>
  gyroKirim = 0x54;
 80012c0:	2354      	movs	r3, #84	; 0x54
 80012c2:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, &gyroKirim, 1, 1000);
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	462a      	mov	r2, r5
 80012ca:	4621      	mov	r1, r4
 80012cc:	4630      	mov	r0, r6
 80012ce:	f002 fed6 	bl	800407e <HAL_UART_Transmit>
  HAL_Delay(1000);
 80012d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d6:	f001 f815 	bl	8002304 <HAL_Delay>
  gyroKirim = 0xA5;
 80012da:	7027      	strb	r7, [r4, #0]
  HAL_UART_Transmit(&huart2, &gyroKirim, 1, 1000);
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	462a      	mov	r2, r5
 80012e2:	4621      	mov	r1, r4
 80012e4:	4630      	mov	r0, r6
 80012e6:	f002 feca 	bl	800407e <HAL_UART_Transmit>
  gyroKirim = 0x55;
 80012ea:	2355      	movs	r3, #85	; 0x55
 80012ec:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, &gyroKirim, 1, 1000);
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	462a      	mov	r2, r5
 80012f4:	4621      	mov	r1, r4
 80012f6:	4630      	mov	r0, r6
 80012f8:	f002 fec1 	bl	800407e <HAL_UART_Transmit>
  HAL_Delay(1000);
 80012fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001300:	f001 f800 	bl	8002304 <HAL_Delay>
  gyroKirim = 0xA5;
 8001304:	7027      	strb	r7, [r4, #0]
  HAL_UART_Transmit(&huart2, &gyroKirim, 1, 1000);
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	462a      	mov	r2, r5
 800130c:	4621      	mov	r1, r4
 800130e:	4630      	mov	r0, r6
 8001310:	f002 feb5 	bl	800407e <HAL_UART_Transmit>
  gyroKirim = 0x52;
 8001314:	2352      	movs	r3, #82	; 0x52
 8001316:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, &gyroKirim, 1, 1000);
 8001318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131c:	462a      	mov	r2, r5
 800131e:	4621      	mov	r1, r4
 8001320:	4630      	mov	r0, r6
 8001322:	f002 feac 	bl	800407e <HAL_UART_Transmit>
  HAL_Delay(100);
 8001326:	2064      	movs	r0, #100	; 0x64
 8001328:	f000 ffec 	bl	8002304 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)&uart1_terima, 1);
 800132c:	462a      	mov	r2, r5
 800132e:	4930      	ldr	r1, [pc, #192]	; (80013f0 <main+0x1e0>)
 8001330:	4830      	ldr	r0, [pc, #192]	; (80013f4 <main+0x1e4>)
 8001332:	f003 f9eb 	bl	800470c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, (uint8_t*)&uart5_terima, 1);
 8001336:	462a      	mov	r2, r5
 8001338:	492f      	ldr	r1, [pc, #188]	; (80013f8 <main+0x1e8>)
 800133a:	4830      	ldr	r0, [pc, #192]	; (80013fc <main+0x1ec>)
 800133c:	f003 f9e6 	bl	800470c <HAL_UART_Receive_DMA>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001340:	213c      	movs	r1, #60	; 0x3c
 8001342:	482f      	ldr	r0, [pc, #188]	; (8001400 <main+0x1f0>)
 8001344:	f002 fcd3 	bl	8003cee <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001348:	213c      	movs	r1, #60	; 0x3c
 800134a:	482e      	ldr	r0, [pc, #184]	; (8001404 <main+0x1f4>)
 800134c:	f002 fccf 	bl	8003cee <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001350:	482d      	ldr	r0, [pc, #180]	; (8001408 <main+0x1f8>)
 8001352:	f002 faaf 	bl	80038b4 <HAL_TIM_Base_Start_IT>
		  MotorKontrolHandler(&Roda[i]);
 8001356:	4d2d      	ldr	r5, [pc, #180]	; (800140c <main+0x1fc>)
	  if(HAL_GetTick()-time_a>10)
 8001358:	4e2d      	ldr	r6, [pc, #180]	; (8001410 <main+0x200>)
		  sprintf(uart5_kirim,"%0.2f,%0.2f,%0.2f,%d\n",pos_x,
 800135a:	4f2e      	ldr	r7, [pc, #184]	; (8001414 <main+0x204>)
		  HAL_Delay(1);
 800135c:	2401      	movs	r4, #1
		  MotorKontrolHandler(&Roda[i]);
 800135e:	4628      	mov	r0, r5
 8001360:	f000 fa46 	bl	80017f0 <MotorKontrolHandler>
		  HAL_Delay(1);
 8001364:	4620      	mov	r0, r4
 8001366:	f000 ffcd 	bl	8002304 <HAL_Delay>
	  MotorReadVoltage(&Roda[0]);
 800136a:	4628      	mov	r0, r5
 800136c:	f000 fa94 	bl	8001898 <MotorReadVoltage>
	  HAL_Delay(1);
 8001370:	4620      	mov	r0, r4
 8001372:	f000 ffc7 	bl	8002304 <HAL_Delay>
	  if(HAL_GetTick()-time_a>10)
 8001376:	f000 ffbf 	bl	80022f8 <HAL_GetTick>
 800137a:	6833      	ldr	r3, [r6, #0]
 800137c:	1ac0      	subs	r0, r0, r3
 800137e:	280a      	cmp	r0, #10
 8001380:	d9ed      	bls.n	800135e <main+0x14e>
		  time_a = HAL_GetTick();
 8001382:	f000 ffb9 	bl	80022f8 <HAL_GetTick>
 8001386:	6030      	str	r0, [r6, #0]
		  sprintf(uart5_kirim,"%0.2f,%0.2f,%0.2f,%d\n",pos_x,
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f7ff f8dd 	bl	8000548 <__aeabi_f2d>
 800138e:	4680      	mov	r8, r0
 8001390:	4689      	mov	r9, r1
 8001392:	4c21      	ldr	r4, [pc, #132]	; (8001418 <main+0x208>)
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <main+0x20c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	9304      	str	r3, [sp, #16]
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <main+0x210>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f7ff f8d3 	bl	8000548 <__aeabi_f2d>
 80013a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <main+0x214>)
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f7ff f8cd 	bl	8000548 <__aeabi_f2d>
 80013ae:	e9cd 0100 	strd	r0, r1, [sp]
 80013b2:	4642      	mov	r2, r8
 80013b4:	464b      	mov	r3, r9
 80013b6:	491c      	ldr	r1, [pc, #112]	; (8001428 <main+0x218>)
 80013b8:	4620      	mov	r0, r4
 80013ba:	f003 f9f5 	bl	80047a8 <sprintf>
		  HAL_UART_Transmit(&huart5, (uint8_t*)uart5_kirim, strlen(uart5_kirim), 1000);
 80013be:	4620      	mov	r0, r4
 80013c0:	f7fe ff06 	bl	80001d0 <strlen>
 80013c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c8:	b282      	uxth	r2, r0
 80013ca:	4621      	mov	r1, r4
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <main+0x1ec>)
 80013ce:	f002 fe56 	bl	800407e <HAL_UART_Transmit>
 80013d2:	e7c3      	b.n	800135c <main+0x14c>
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	20000a80 	.word	0x20000a80
 80013dc:	20000ac4 	.word	0x20000ac4
 80013e0:	20000a34 	.word	0x20000a34
 80013e4:	20000e38 	.word	0x20000e38
 80013e8:	20000aac 	.word	0x20000aac
 80013ec:	20000aa6 	.word	0x20000aa6
 80013f0:	20000b14 	.word	0x20000b14
 80013f4:	20000df4 	.word	0x20000df4
 80013f8:	20000b99 	.word	0x20000b99
 80013fc:	20000e7c 	.word	0x20000e7c
 8001400:	20000bfc 	.word	0x20000bfc
 8001404:	20000c8c 	.word	0x20000c8c
 8001408:	20000c44 	.word	0x20000c44
 800140c:	20000000 	.word	0x20000000
 8001410:	20000b08 	.word	0x20000b08
 8001414:	20000abc 	.word	0x20000abc
 8001418:	20000b18 	.word	0x20000b18
 800141c:	20000b04 	.word	0x20000b04
 8001420:	20000ab4 	.word	0x20000ab4
 8001424:	20000ac0 	.word	0x20000ac0
 8001428:	08009d30 	.word	0x08009d30

0800142c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 800142c:	b538      	push	{r3, r4, r5, lr}
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMsg, CAN_Rx_Data);
 800142e:	4d06      	ldr	r5, [pc, #24]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001430:	4c06      	ldr	r4, [pc, #24]	; (800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001432:	462b      	mov	r3, r5
 8001434:	4622      	mov	r2, r4
 8001436:	2100      	movs	r1, #0
 8001438:	f001 f952 	bl	80026e0 <HAL_CAN_GetRxMessage>
	MotorRxDataHandler(&Roda[0], &RxMsg, CAN_Rx_Data);
 800143c:	462a      	mov	r2, r5
 800143e:	4621      	mov	r1, r4
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001442:	f000 fa99 	bl	8001978 <MotorRxDataHandler>
}
 8001446:	bd38      	pop	{r3, r4, r5, pc}
 8001448:	20000a5c 	.word	0x20000a5c
 800144c:	20000a64 	.word	0x20000a64
 8001450:	20000000 	.word	0x20000000
 8001454:	00000000 	.word	0x00000000

08001458 <HAL_UART_RxCpltCallback>:
{
 8001458:	b508      	push	{r3, lr}
	if(huart->Instance == USART2)
 800145a:	6803      	ldr	r3, [r0, #0]
 800145c:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_UART_RxCpltCallback+0x158>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d003      	beq.n	800146a <HAL_UART_RxCpltCallback+0x12>
	else if(huart->Instance == UART5)
 8001462:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_UART_RxCpltCallback+0x15c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04e      	beq.n	8001506 <HAL_UART_RxCpltCallback+0xae>
}
 8001468:	bd08      	pop	{r3, pc}
		if(gyroTerima[0]==0xAA && gyroTerima[7]==0x55)
 800146a:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_UART_RxCpltCallback+0x160>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2baa      	cmp	r3, #170	; 0xaa
 8001470:	d1fa      	bne.n	8001468 <HAL_UART_RxCpltCallback+0x10>
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <HAL_UART_RxCpltCallback+0x160>)
 8001474:	79db      	ldrb	r3, [r3, #7]
 8001476:	2b55      	cmp	r3, #85	; 0x55
 8001478:	d1f6      	bne.n	8001468 <HAL_UART_RxCpltCallback+0x10>
			gyroBuff = ((int16_t)gyroTerima[1])<<8 | (int16_t)gyroTerima[2];
 800147a:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_UART_RxCpltCallback+0x160>)
 800147c:	785a      	ldrb	r2, [r3, #1]
 800147e:	7898      	ldrb	r0, [r3, #2]
 8001480:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001484:	b200      	sxth	r0, r0
 8001486:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <HAL_UART_RxCpltCallback+0x164>)
 8001488:	8018      	strh	r0, [r3, #0]
			gyroRAW  = (float)gyroBuff * 0.01;
 800148a:	ee07 0a90 	vmov	s15, r0
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee17 0a90 	vmov	r0, s15
 8001496:	f7ff f857 	bl	8000548 <__aeabi_f2d>
 800149a:	a343      	add	r3, pc, #268	; (adr r3, 80015a8 <HAL_UART_RxCpltCallback+0x150>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff f8aa 	bl	80005f8 <__aeabi_dmul>
 80014a4:	f7ff fb80 	bl	8000ba8 <__aeabi_d2f>
 80014a8:	ee07 0a90 	vmov	s15, r0
 80014ac:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_UART_RxCpltCallback+0x168>)
 80014ae:	6018      	str	r0, [r3, #0]
			if(status_gyro==0)
 80014b0:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <HAL_UART_RxCpltCallback+0x16c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b923      	cbnz	r3, 80014c0 <HAL_UART_RxCpltCallback+0x68>
				offsetGyro = gyroRAW;
 80014b6:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <HAL_UART_RxCpltCallback+0x170>)
 80014b8:	6018      	str	r0, [r3, #0]
				status_gyro=1;
 80014ba:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <HAL_UART_RxCpltCallback+0x16c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
			heading = gyroRAW - offsetGyro;
 80014c0:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_UART_RxCpltCallback+0x170>)
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if(heading>180)
 80014ca:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80015cc <HAL_UART_RxCpltCallback+0x174>
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd07      	ble.n	80014e8 <HAL_UART_RxCpltCallback+0x90>
				heading -= 360;
 80014d8:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80015d0 <HAL_UART_RxCpltCallback+0x178>
 80014dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <HAL_UART_RxCpltCallback+0x17c>)
 80014e2:	edc3 7a00 	vstr	s15, [r3]
 80014e6:	e7bf      	b.n	8001468 <HAL_UART_RxCpltCallback+0x10>
			else if(heading<-180)
 80014e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80015d8 <HAL_UART_RxCpltCallback+0x180>
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				heading += 360;
 80014f4:	bf44      	itt	mi
 80014f6:	ed9f 7a36 	vldrmi	s14, [pc, #216]	; 80015d0 <HAL_UART_RxCpltCallback+0x178>
 80014fa:	ee77 7a87 	vaddmi.f32	s15, s15, s14
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <HAL_UART_RxCpltCallback+0x17c>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
 8001504:	e7b0      	b.n	8001468 <HAL_UART_RxCpltCallback+0x10>
		if(uart5_terima=='m' && uart5_status == 0)
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <HAL_UART_RxCpltCallback+0x184>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b6d      	cmp	r3, #109	; 0x6d
 800150c:	d010      	beq.n	8001530 <HAL_UART_RxCpltCallback+0xd8>
		else if(uart5_terima=='r' && uart5_status==1)
 800150e:	2b72      	cmp	r3, #114	; 0x72
 8001510:	d019      	beq.n	8001546 <HAL_UART_RxCpltCallback+0xee>
		else if(uart5_terima=='i' && uart5_status==2)
 8001512:	2b69      	cmp	r3, #105	; 0x69
 8001514:	d11b      	bne.n	800154e <HAL_UART_RxCpltCallback+0xf6>
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d117      	bne.n	800154e <HAL_UART_RxCpltCallback+0xf6>
			uart5_status =3;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 8001520:	2203      	movs	r2, #3
 8001522:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart5,(uint8_t*)buff_PC,sizeof(buff_PC));
 8001524:	2208      	movs	r2, #8
 8001526:	492f      	ldr	r1, [pc, #188]	; (80015e4 <HAL_UART_RxCpltCallback+0x18c>)
 8001528:	482f      	ldr	r0, [pc, #188]	; (80015e8 <HAL_UART_RxCpltCallback+0x190>)
 800152a:	f003 f8ef 	bl	800470c <HAL_UART_Receive_DMA>
 800152e:	e79b      	b.n	8001468 <HAL_UART_RxCpltCallback+0x10>
		if(uart5_terima=='m' && uart5_status == 0)
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b95b      	cbnz	r3, 800154e <HAL_UART_RxCpltCallback+0xf6>
			uart5_status = 1;
 8001536:	2201      	movs	r2, #1
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 800153a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)&uart5_terima, 1);
 800153c:	4927      	ldr	r1, [pc, #156]	; (80015dc <HAL_UART_RxCpltCallback+0x184>)
 800153e:	482a      	ldr	r0, [pc, #168]	; (80015e8 <HAL_UART_RxCpltCallback+0x190>)
 8001540:	f003 f8e4 	bl	800470c <HAL_UART_Receive_DMA>
 8001544:	e790      	b.n	8001468 <HAL_UART_RxCpltCallback+0x10>
		else if(uart5_terima=='r' && uart5_status==1)
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00c      	beq.n	8001568 <HAL_UART_RxCpltCallback+0x110>
		else if(uart5_status==3)
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d011      	beq.n	800157a <HAL_UART_RxCpltCallback+0x122>
			uart5_status=0;
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)&uart5_terima, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	491f      	ldr	r1, [pc, #124]	; (80015dc <HAL_UART_RxCpltCallback+0x184>)
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <HAL_UART_RxCpltCallback+0x190>)
 8001562:	f003 f8d3 	bl	800470c <HAL_UART_Receive_DMA>
}
 8001566:	e77f      	b.n	8001468 <HAL_UART_RxCpltCallback+0x10>
			uart5_status = 2;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 800156a:	2202      	movs	r2, #2
 800156c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)&uart5_terima, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	491a      	ldr	r1, [pc, #104]	; (80015dc <HAL_UART_RxCpltCallback+0x184>)
 8001572:	481d      	ldr	r0, [pc, #116]	; (80015e8 <HAL_UART_RxCpltCallback+0x190>)
 8001574:	f003 f8ca 	bl	800470c <HAL_UART_Receive_DMA>
 8001578:	e776      	b.n	8001468 <HAL_UART_RxCpltCallback+0x10>
			memcpy(&speedPC[0],buff_PC,2);
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_UART_RxCpltCallback+0x194>)
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_UART_RxCpltCallback+0x18c>)
 800157e:	8819      	ldrh	r1, [r3, #0]
 8001580:	8011      	strh	r1, [r2, #0]
			memcpy(&speedPC[1],buff_PC+2,2);
 8001582:	8859      	ldrh	r1, [r3, #2]
 8001584:	8091      	strh	r1, [r2, #4]
			memcpy(&speedPC[2],buff_PC+4,2);
 8001586:	8899      	ldrh	r1, [r3, #4]
 8001588:	8111      	strh	r1, [r2, #8]
			bitLamp = buff_PC[6];
 800158a:	7999      	ldrb	r1, [r3, #6]
 800158c:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <HAL_UART_RxCpltCallback+0x198>)
 800158e:	7011      	strb	r1, [r2, #0]
			statusControl = buff_PC[7];
 8001590:	79da      	ldrb	r2, [r3, #7]
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_UART_RxCpltCallback+0x19c>)
 8001594:	701a      	strb	r2, [r3, #0]
			uart5_status = 0;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_UART_RxCpltCallback+0x188>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)&uart5_terima, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	490f      	ldr	r1, [pc, #60]	; (80015dc <HAL_UART_RxCpltCallback+0x184>)
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <HAL_UART_RxCpltCallback+0x190>)
 80015a2:	f003 f8b3 	bl	800470c <HAL_UART_Receive_DMA>
 80015a6:	e75f      	b.n	8001468 <HAL_UART_RxCpltCallback+0x10>
 80015a8:	47ae147b 	.word	0x47ae147b
 80015ac:	3f847ae1 	.word	0x3f847ae1
 80015b0:	40004400 	.word	0x40004400
 80015b4:	40005000 	.word	0x40005000
 80015b8:	20000aac 	.word	0x20000aac
 80015bc:	20000aa4 	.word	0x20000aa4
 80015c0:	20000aa8 	.word	0x20000aa8
 80015c4:	20000b05 	.word	0x20000b05
 80015c8:	20000ab8 	.word	0x20000ab8
 80015cc:	43340000 	.word	0x43340000
 80015d0:	43b40000 	.word	0x43b40000
 80015d4:	20000ab4 	.word	0x20000ab4
 80015d8:	c3340000 	.word	0xc3340000
 80015dc:	20000b99 	.word	0x20000b99
 80015e0:	20000b98 	.word	0x20000b98
 80015e4:	20000a9c 	.word	0x20000a9c
 80015e8:	20000e7c 	.word	0x20000e7c
 80015ec:	20000af8 	.word	0x20000af8
 80015f0:	20000a98 	.word	0x20000a98
 80015f4:	20000b04 	.word	0x20000b04

080015f8 <HAL_TIM_PeriodElapsedCallback>:
{
 80015f8:	b538      	push	{r3, r4, r5, lr}
	if(htim->Instance == TIM6)
 80015fa:	6802      	ldr	r2, [r0, #0]
 80015fc:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015fe:	429a      	cmp	r2, r3
 8001600:	d000      	beq.n	8001604 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8001602:	bd38      	pop	{r3, r4, r5, pc}
		OdomCalc(&htim3, &htim8, heading);
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001606:	ed93 0a00 	vldr	s0, [r3]
 800160a:	4968      	ldr	r1, [pc, #416]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800160c:	4868      	ldr	r0, [pc, #416]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800160e:	f000 fa03 	bl	8001a18 <OdomCalc>
		pos_x = odomGlobalPosition[0]*-1;
 8001612:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	eef1 7a67 	vneg.f32	s15, s15
 800161c:	4a66      	ldr	r2, [pc, #408]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800161e:	edc2 7a00 	vstr	s15, [r2]
		pos_y = odomGlobalPosition[1]*-1;
 8001622:	edd3 7a01 	vldr	s15, [r3, #4]
 8001626:	eef1 7a67 	vneg.f32	s15, s15
 800162a:	4b64      	ldr	r3, [pc, #400]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
		if(++time_scale>10)
 8001630:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	2b0a      	cmp	r3, #10
 8001638:	dc02      	bgt.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x48>
 800163a:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e7e0      	b.n	8001602 <HAL_TIM_PeriodElapsedCallback+0xa>
			time_scale = 0;
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
			motorLocalSpeed(speedLocal[0], speedLocal[1], speedLocal[2]);
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	f000 f949 	bl	80018e4 <motorLocalSpeed>
			Roda[1].TargetSpeed = motorSpeedSP[1];
 8001652:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001654:	4a5d      	ldr	r2, [pc, #372]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001656:	6851      	ldr	r1, [r2, #4]
 8001658:	6299      	str	r1, [r3, #40]	; 0x28
			Roda[2].TargetSpeed = motorSpeedSP[2];
 800165a:	6892      	ldr	r2, [r2, #8]
 800165c:	649a      	str	r2, [r3, #72]	; 0x48
			switch(statusControl)
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d046      	beq.n	80016f4 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8001666:	2b01      	cmp	r3, #1
 8001668:	d1cb      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0xa>
				speedLocal[0] = speedPC[0];
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800166c:	4a59      	ldr	r2, [pc, #356]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800166e:	6811      	ldr	r1, [r2, #0]
 8001670:	6019      	str	r1, [r3, #0]
				speedLocal[1] = speedPC[1];
 8001672:	6851      	ldr	r1, [r2, #4]
 8001674:	6059      	str	r1, [r3, #4]
				speedLocal[2] = speedPC[2];
 8001676:	6892      	ldr	r2, [r2, #8]
 8001678:	609a      	str	r2, [r3, #8]
				HAL_GPIO_WritePin(O0_GPIO_Port, O0_Pin, bitLamp & 0x01);
 800167a:	4c57      	ldr	r4, [pc, #348]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800167c:	7822      	ldrb	r2, [r4, #0]
 800167e:	f002 0201 	and.w	r2, r2, #1
 8001682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001686:	4855      	ldr	r0, [pc, #340]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001688:	f001 fdcc 	bl	8003224 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(O1_GPIO_Port, O1_Pin, (bitLamp>>1) & 0x01);
 800168c:	7822      	ldrb	r2, [r4, #0]
 800168e:	4d54      	ldr	r5, [pc, #336]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001690:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001698:	4628      	mov	r0, r5
 800169a:	f001 fdc3 	bl	8003224 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(O2_GPIO_Port, O2_Pin, (bitLamp>>2) & 0x01);
 800169e:	7822      	ldrb	r2, [r4, #0]
 80016a0:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80016a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a8:	4628      	mov	r0, r5
 80016aa:	f001 fdbb 	bl	8003224 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(O3_GPIO_Port, O3_Pin, (bitLamp>>3) & 0x01);
 80016ae:	7822      	ldrb	r2, [r4, #0]
 80016b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016b4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80016b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016bc:	4628      	mov	r0, r5
 80016be:	f001 fdb1 	bl	8003224 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(O4_GPIO_Port, O4_Pin, (bitLamp>>4) & 0x01);
 80016c2:	7822      	ldrb	r2, [r4, #0]
 80016c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80016c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016cc:	4628      	mov	r0, r5
 80016ce:	f001 fda9 	bl	8003224 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, (bitLamp>>5) & 0x01);
 80016d2:	7822      	ldrb	r2, [r4, #0]
 80016d4:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016dc:	4628      	mov	r0, r5
 80016de:	f001 fda1 	bl	8003224 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(O6_GPIO_Port, O6_Pin, (bitLamp>>6) & 0x01);
 80016e2:	7822      	ldrb	r2, [r4, #0]
 80016e4:	f3c2 1280 	ubfx	r2, r2, #6, #1
 80016e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ec:	4628      	mov	r0, r5
 80016ee:	f001 fd99 	bl	8003224 <HAL_GPIO_WritePin>
}
 80016f2:	e786      	b.n	8001602 <HAL_TIM_PeriodElapsedCallback+0xa>
				if(uart1_terima=='a')
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b61      	cmp	r3, #97	; 0x61
 80016fa:	d012      	beq.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x12a>
				else if(uart1_terima=='c')
 80016fc:	2b63      	cmp	r3, #99	; 0x63
 80016fe:	d01e      	beq.n	800173e <HAL_TIM_PeriodElapsedCallback+0x146>
				else if(uart1_terima=='d')
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d024      	beq.n	800174e <HAL_TIM_PeriodElapsedCallback+0x156>
				else if(uart1_terima=='b')
 8001704:	2b62      	cmp	r3, #98	; 0x62
 8001706:	d02a      	beq.n	800175e <HAL_TIM_PeriodElapsedCallback+0x166>
				else if(uart1_terima=='C')
 8001708:	2b43      	cmp	r3, #67	; 0x43
 800170a:	d02f      	beq.n	800176c <HAL_TIM_PeriodElapsedCallback+0x174>
				else if(uart1_terima=='B')
 800170c:	2b42      	cmp	r3, #66	; 0x42
					speedLocal[0] = 0;
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
					speedLocal[1] = 0;
 8001716:	605a      	str	r2, [r3, #4]
					speedLocal[2] = -20;
 8001718:	bf08      	it	eq
 800171a:	f06f 0213 	mvneq.w	r2, #19
					speedLocal[2]=0;
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e005      	b.n	800172e <HAL_TIM_PeriodElapsedCallback+0x136>
					speedLocal[0] = 0;
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
					speedLocal[1] = 30;
 8001728:	211e      	movs	r1, #30
 800172a:	6059      	str	r1, [r3, #4]
					speedLocal[2] = 0;
 800172c:	609a      	str	r2, [r3, #8]
				if(++time_lamp>50)
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	2b32      	cmp	r3, #50	; 0x32
 8001736:	dc20      	bgt.n	800177a <HAL_TIM_PeriodElapsedCallback+0x182>
 8001738:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e761      	b.n	8001602 <HAL_TIM_PeriodElapsedCallback+0xa>
					speedLocal[0] = -30;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001740:	f06f 021d 	mvn.w	r2, #29
 8001744:	601a      	str	r2, [r3, #0]
					speedLocal[1] = 0;
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
					speedLocal[2] = 0;
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e7ef      	b.n	800172e <HAL_TIM_PeriodElapsedCallback+0x136>
					speedLocal[0] = 0;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
					speedLocal[1] = -30;
 8001754:	f06f 011d 	mvn.w	r1, #29
 8001758:	6059      	str	r1, [r3, #4]
					speedLocal[2] = 0;
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	e7e7      	b.n	800172e <HAL_TIM_PeriodElapsedCallback+0x136>
					speedLocal[0] = 30;
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001760:	221e      	movs	r2, #30
 8001762:	601a      	str	r2, [r3, #0]
					speedLocal[1] = 0;
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
					speedLocal[2] = 0;
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	e7e0      	b.n	800172e <HAL_TIM_PeriodElapsedCallback+0x136>
					speedLocal[0] = 0;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
					speedLocal[1] = 0;
 8001772:	605a      	str	r2, [r3, #4]
					speedLocal[2] = 20;
 8001774:	2214      	movs	r2, #20
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	e7d9      	b.n	800172e <HAL_TIM_PeriodElapsedCallback+0x136>
					time_lamp = 0;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(O0_GPIO_Port, O0_Pin);
 8001780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001784:	4815      	ldr	r0, [pc, #84]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001786:	f001 fd53 	bl	8003230 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(O1_GPIO_Port, O1_Pin);
 800178a:	4c15      	ldr	r4, [pc, #84]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	4620      	mov	r0, r4
 8001792:	f001 fd4d 	bl	8003230 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(O2_GPIO_Port, O2_Pin);
 8001796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179a:	4620      	mov	r0, r4
 800179c:	f001 fd48 	bl	8003230 <HAL_GPIO_TogglePin>
 80017a0:	e72f      	b.n	8001602 <HAL_TIM_PeriodElapsedCallback+0xa>
 80017a2:	bf00      	nop
 80017a4:	40001000 	.word	0x40001000
 80017a8:	20000ab4 	.word	0x20000ab4
 80017ac:	20000c8c 	.word	0x20000c8c
 80017b0:	20000bfc 	.word	0x20000bfc
 80017b4:	20000bd4 	.word	0x20000bd4
 80017b8:	20000abc 	.word	0x20000abc
 80017bc:	20000ac0 	.word	0x20000ac0
 80017c0:	20000b10 	.word	0x20000b10
 80017c4:	20000aec 	.word	0x20000aec
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000bc0 	.word	0x20000bc0
 80017d0:	20000b04 	.word	0x20000b04
 80017d4:	20000af8 	.word	0x20000af8
 80017d8:	20000a98 	.word	0x20000a98
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020800 	.word	0x40020800
 80017e4:	20000b14 	.word	0x20000b14
 80017e8:	20000b0c 	.word	0x20000b0c

080017ec <Error_Handler>:
 80017ec:	b672      	cpsid	i
  while (1)
 80017ee:	e7fe      	b.n	80017ee <Error_Handler+0x2>

080017f0 <MotorKontrolHandler>:
	HAL_CAN_AddTxMessage(&hcan1, &Tx_Msg, CAN_TxData, &CAN_TxMailbox);
	HAL_Delay(5);

}

void MotorKontrolHandler(Motor_TypeDef *pMotor) {
 80017f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f4:	4605      	mov	r5, r0

	Tx_Msg.DLC = 8;
 80017f6:	4e24      	ldr	r6, [pc, #144]	; (8001888 <MotorKontrolHandler+0x98>)
 80017f8:	2308      	movs	r3, #8
 80017fa:	6133      	str	r3, [r6, #16]
	Tx_Msg.StdId = 0x600 + pMotor->MotorID;
 80017fc:	6803      	ldr	r3, [r0, #0]
 80017fe:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001802:	6033      	str	r3, [r6, #0]
	Tx_Msg.IDE = CAN_ID_STD;
 8001804:	2300      	movs	r3, #0
 8001806:	60b3      	str	r3, [r6, #8]
	Tx_Msg.RTR = CAN_RTR_DATA;
 8001808:	60f3      	str	r3, [r6, #12]

	// set speed
	CAN_TxData[0] = 0x23;
 800180a:	4c20      	ldr	r4, [pc, #128]	; (800188c <MotorKontrolHandler+0x9c>)
 800180c:	f04f 0923 	mov.w	r9, #35	; 0x23
 8001810:	f884 9000 	strb.w	r9, [r4]
	CAN_TxData[1] = 0x02;
 8001814:	2302      	movs	r3, #2
 8001816:	7063      	strb	r3, [r4, #1]
	CAN_TxData[2] = 0x20;
 8001818:	f04f 0820 	mov.w	r8, #32
 800181c:	f884 8002 	strb.w	r8, [r4, #2]
	CAN_TxData[3] = 0x01;
 8001820:	2701      	movs	r7, #1
 8001822:	70e7      	strb	r7, [r4, #3]

	CAN_TxData[4] = (uint8_t) (pMotor->TargetSpeed & 0xFF);
 8001824:	6883      	ldr	r3, [r0, #8]
 8001826:	7123      	strb	r3, [r4, #4]
	CAN_TxData[5] = (uint8_t) ((pMotor->TargetSpeed >> 8) & 0xFF);
 8001828:	121a      	asrs	r2, r3, #8
 800182a:	7162      	strb	r2, [r4, #5]
	CAN_TxData[6] = (uint8_t) ((pMotor->TargetSpeed >> 16) & 0xFF);
 800182c:	141a      	asrs	r2, r3, #16
 800182e:	71a2      	strb	r2, [r4, #6]
	CAN_TxData[7] = (uint8_t) ((pMotor->TargetSpeed >> 24) & 0xFF);
 8001830:	161b      	asrs	r3, r3, #24
 8001832:	71e3      	strb	r3, [r4, #7]

	HAL_CAN_AddTxMessage(&hcan1, &Tx_Msg, (uint8_t*) CAN_TxData, &CAN_TxMailbox);
 8001834:	f8df b058 	ldr.w	fp, [pc, #88]	; 8001890 <MotorKontrolHandler+0xa0>
 8001838:	f8df a058 	ldr.w	sl, [pc, #88]	; 8001894 <MotorKontrolHandler+0xa4>
 800183c:	465b      	mov	r3, fp
 800183e:	4622      	mov	r2, r4
 8001840:	4631      	mov	r1, r6
 8001842:	4650      	mov	r0, sl
 8001844:	f000 fecc 	bl	80025e0 <HAL_CAN_AddTxMessage>

	HAL_Delay(50);
 8001848:	2032      	movs	r0, #50	; 0x32
 800184a:	f000 fd5b 	bl	8002304 <HAL_Delay>

	// set speed
	CAN_TxData[0] = 0x23;
 800184e:	f884 9000 	strb.w	r9, [r4]
	CAN_TxData[1] = 0x01;
 8001852:	7067      	strb	r7, [r4, #1]
	CAN_TxData[2] = 0x20;
 8001854:	f884 8002 	strb.w	r8, [r4, #2]
	CAN_TxData[3] = 0x01;
 8001858:	70e7      	strb	r7, [r4, #3]

	CAN_TxData[4] = (uint8_t) (pMotor->TargetPosisi & 0xFF);
 800185a:	686b      	ldr	r3, [r5, #4]
 800185c:	7123      	strb	r3, [r4, #4]
	CAN_TxData[5] = (uint8_t) ((pMotor->TargetPosisi >> 8) & 0xFF);
 800185e:	686b      	ldr	r3, [r5, #4]
 8001860:	121b      	asrs	r3, r3, #8
 8001862:	7163      	strb	r3, [r4, #5]
	CAN_TxData[6] = (uint8_t) ((pMotor->TargetPosisi >> 16) & 0xFF);
 8001864:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8001868:	71a3      	strb	r3, [r4, #6]
	CAN_TxData[7] = (uint8_t) ((pMotor->TargetPosisi >> 24) & 0xFF);
 800186a:	f995 3007 	ldrsb.w	r3, [r5, #7]
 800186e:	71e3      	strb	r3, [r4, #7]

	HAL_CAN_AddTxMessage(&hcan1, &Tx_Msg, (uint8_t*) CAN_TxData, &CAN_TxMailbox);
 8001870:	465b      	mov	r3, fp
 8001872:	4622      	mov	r2, r4
 8001874:	4631      	mov	r1, r6
 8001876:	4650      	mov	r0, sl
 8001878:	f000 feb2 	bl	80025e0 <HAL_CAN_AddTxMessage>
	HAL_Delay(50);
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f000 fd41 	bl	8002304 <HAL_Delay>


}
 8001882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001886:	bf00      	nop
 8001888:	20000ba8 	.word	0x20000ba8
 800188c:	20000b9c 	.word	0x20000b9c
 8001890:	20000ba4 	.word	0x20000ba4
 8001894:	20000a34 	.word	0x20000a34

08001898 <MotorReadVoltage>:

void MotorReadVoltage(Motor_TypeDef *pMotor)
{
 8001898:	b508      	push	{r3, lr}
	Tx_Msg.DLC = 8;
 800189a:	490e      	ldr	r1, [pc, #56]	; (80018d4 <MotorReadVoltage+0x3c>)
 800189c:	2308      	movs	r3, #8
 800189e:	610b      	str	r3, [r1, #16]
	Tx_Msg.StdId = 0x600 + pMotor->MotorID;
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80018a6:	600b      	str	r3, [r1, #0]
	Tx_Msg.IDE = CAN_ID_STD;
 80018a8:	2300      	movs	r3, #0
 80018aa:	608b      	str	r3, [r1, #8]
	Tx_Msg.RTR = CAN_RTR_DATA;
 80018ac:	60cb      	str	r3, [r1, #12]

	CAN_TxData[0] = 0x40;
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <MotorReadVoltage+0x40>)
 80018b0:	2040      	movs	r0, #64	; 0x40
 80018b2:	7010      	strb	r0, [r2, #0]
	CAN_TxData[1] = 0x0D;
 80018b4:	200d      	movs	r0, #13
 80018b6:	7050      	strb	r0, [r2, #1]
	CAN_TxData[2] = 0x21;
 80018b8:	2021      	movs	r0, #33	; 0x21
 80018ba:	7090      	strb	r0, [r2, #2]
	CAN_TxData[3] = 0x02;
 80018bc:	2002      	movs	r0, #2
 80018be:	70d0      	strb	r0, [r2, #3]

	CAN_TxData[4] = 0;
 80018c0:	7113      	strb	r3, [r2, #4]
	CAN_TxData[5] = 0;
 80018c2:	7153      	strb	r3, [r2, #5]
	CAN_TxData[6] = 0;
 80018c4:	7193      	strb	r3, [r2, #6]
	CAN_TxData[7] = 0;
 80018c6:	71d3      	strb	r3, [r2, #7]

	HAL_CAN_AddTxMessage(&hcan1, &Tx_Msg, (uint8_t*) CAN_TxData, &CAN_TxMailbox);
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <MotorReadVoltage+0x44>)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MotorReadVoltage+0x48>)
 80018cc:	f000 fe88 	bl	80025e0 <HAL_CAN_AddTxMessage>


}
 80018d0:	bd08      	pop	{r3, pc}
 80018d2:	bf00      	nop
 80018d4:	20000ba8 	.word	0x20000ba8
 80018d8:	20000b9c 	.word	0x20000b9c
 80018dc:	20000ba4 	.word	0x20000ba4
 80018e0:	20000a34 	.word	0x20000a34

080018e4 <motorLocalSpeed>:


void motorLocalSpeed(int speedX,int speedY, int speedZ)
{
 80018e4:	ee07 0a90 	vmov	s15, r0
 80018e8:	ee07 1a10 	vmov	s14, r1
 80018ec:	ee06 2a90 	vmov	s13, r2

	motorSpeedSP[0] = -sinf((30+180)*0.0174533)*speedX + cosf((30+180)*0.0174533)*speedY + speedZ;
 80018f0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80018f4:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80018f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <motorLocalSpeed+0x7c>)
 80018fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001964 <motorLocalSpeed+0x80>
 8001902:	ee26 7a07 	vmul.f32	s14, s12, s14
 8001906:	eddf 5a18 	vldr	s11, [pc, #96]	; 8001968 <motorLocalSpeed+0x84>
 800190a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800190e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001912:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001916:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800191a:	ed83 7a00 	vstr	s14, [r3]
	motorSpeedSP[1] = -(-sinf((150+180)*0.0174533)*speedX + cosf((150+180)*0.0174533)*speedY + speedZ);
 800191e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800196c <motorLocalSpeed+0x88>
 8001922:	ee26 7a07 	vmul.f32	s14, s12, s14
 8001926:	eddf 5a12 	vldr	s11, [pc, #72]	; 8001970 <motorLocalSpeed+0x8c>
 800192a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800192e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001932:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001936:	eeb1 7a47 	vneg.f32	s14, s14
 800193a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800193e:	ed83 7a01 	vstr	s14, [r3, #4]
	motorSpeedSP[2] = -(-sinf((270+180)*0.0174533)*speedX + cosf((270+180)*0.0174533)*speedY + speedZ);
 8001942:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001974 <motorLocalSpeed+0x90>
 8001946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800194e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001952:	eef1 7a67 	vneg.f32	s15, s15
 8001956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195a:	edc3 7a02 	vstr	s15, [r3, #8]

}
 800195e:	4770      	bx	lr
 8001960:	20000bc0 	.word	0x20000bc0
 8001964:	3f000018 	.word	0x3f000018
 8001968:	bf5db3c9 	.word	0xbf5db3c9
 800196c:	3effffb3 	.word	0x3effffb3
 8001970:	3f5db3ee 	.word	0x3f5db3ee
 8001974:	b656aac8 	.word	0xb656aac8

08001978 <MotorRxDataHandler>:



void MotorRxDataHandler(Motor_TypeDef *pMotor,CAN_RxHeaderTypeDef *pMsg,uint8_t CAN_Data[8])
{
 8001978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(pMsg->StdId == pMotor->MotorID + 0x580)
 800197a:	6803      	ldr	r3, [r0, #0]
 800197c:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8001980:	6809      	ldr	r1, [r1, #0]
 8001982:	4299      	cmp	r1, r3
 8001984:	d000      	beq.n	8001988 <MotorRxDataHandler+0x10>
			pMotor->Voltage = pMotor->Voltage*0.85 + pMotor->VoltRAW*0.15;

//
		}
	}
}
 8001986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001988:	4604      	mov	r4, r0
		if (CAN_Data[0]==0x4b && CAN_Data[1] == 0x0D && CAN_Data[2]==0x21 && CAN_Data[3]==0x02)
 800198a:	7813      	ldrb	r3, [r2, #0]
 800198c:	2b4b      	cmp	r3, #75	; 0x4b
 800198e:	d1fa      	bne.n	8001986 <MotorRxDataHandler+0xe>
 8001990:	7853      	ldrb	r3, [r2, #1]
 8001992:	2b0d      	cmp	r3, #13
 8001994:	d1f7      	bne.n	8001986 <MotorRxDataHandler+0xe>
 8001996:	7893      	ldrb	r3, [r2, #2]
 8001998:	2b21      	cmp	r3, #33	; 0x21
 800199a:	d1f4      	bne.n	8001986 <MotorRxDataHandler+0xe>
 800199c:	78d3      	ldrb	r3, [r2, #3]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d1f1      	bne.n	8001986 <MotorRxDataHandler+0xe>
			pMotor->VoltRAW = (float)batSens*0.1;
 80019a2:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 80019a6:	ee07 0a90 	vmov	s15, r0
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	ee17 0a90 	vmov	r0, s15
 80019b2:	f7fe fdc9 	bl	8000548 <__aeabi_f2d>
 80019b6:	a312      	add	r3, pc, #72	; (adr r3, 8001a00 <MotorRxDataHandler+0x88>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe1c 	bl	80005f8 <__aeabi_dmul>
 80019c0:	f7ff f8f2 	bl	8000ba8 <__aeabi_d2f>
 80019c4:	4605      	mov	r5, r0
 80019c6:	61e0      	str	r0, [r4, #28]
			pMotor->Voltage = pMotor->Voltage*0.85 + pMotor->VoltRAW*0.15;
 80019c8:	69a0      	ldr	r0, [r4, #24]
 80019ca:	f7fe fdbd 	bl	8000548 <__aeabi_f2d>
 80019ce:	a30e      	add	r3, pc, #56	; (adr r3, 8001a08 <MotorRxDataHandler+0x90>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fe10 	bl	80005f8 <__aeabi_dmul>
 80019d8:	4606      	mov	r6, r0
 80019da:	460f      	mov	r7, r1
 80019dc:	4628      	mov	r0, r5
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	a30b      	add	r3, pc, #44	; (adr r3, 8001a10 <MotorRxDataHandler+0x98>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fe06 	bl	80005f8 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4630      	mov	r0, r6
 80019f2:	4639      	mov	r1, r7
 80019f4:	f7fe fc4a 	bl	800028c <__adddf3>
 80019f8:	f7ff f8d6 	bl	8000ba8 <__aeabi_d2f>
 80019fc:	61a0      	str	r0, [r4, #24]
}
 80019fe:	e7c2      	b.n	8001986 <MotorRxDataHandler+0xe>
 8001a00:	9999999a 	.word	0x9999999a
 8001a04:	3fb99999 	.word	0x3fb99999
 8001a08:	33333333 	.word	0x33333333
 8001a0c:	3feb3333 	.word	0x3feb3333
 8001a10:	33333333 	.word	0x33333333
 8001a14:	3fc33333 	.word	0x3fc33333

08001a18 <OdomCalc>:
 * -0.707107	-0.707107
 *  0.707107	-0.707107
*/

void OdomCalc(TIM_HandleTypeDef *wheelENC0,TIM_HandleTypeDef *wheelENC1, float heading)
{
 8001a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a1c:	ed2d 8b04 	vpush	{d8-d9}
 8001a20:	ee10 8a10 	vmov	r8, s0

	short int encBuff[2];

	encBuff[0] = wheelENC0->Instance->CNT;
 8001a24:	6803      	ldr	r3, [r0, #0]
 8001a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	encBuff[1] = wheelENC1->Instance->CNT;
 8001a28:	680b      	ldr	r3, [r1, #0]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	encWheel_Vel[0] = encBuff[0];
 8001a2c:	b212      	sxth	r2, r2
 8001a2e:	ee07 2a90 	vmov	s15, r2
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <OdomCalc+0x180>)
 8001a38:	edc2 7a00 	vstr	s15, [r2]
	encWheel_Vel[1] = encBuff[1];
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	ee07 3a10 	vmov	s14, r3
 8001a42:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8001a46:	ed82 8a01 	vstr	s16, [r2, #4]

	wheelENC0->Instance->CNT=0;
 8001a4a:	6802      	ldr	r2, [r0, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	6253      	str	r3, [r2, #36]	; 0x24
	wheelENC1->Instance->CNT=0;
 8001a50:	680a      	ldr	r2, [r1, #0]
 8001a52:	6253      	str	r3, [r2, #36]	; 0x24

	// 0.01667 = diameter / ppr * 4
	odomLocalSpeed[0] = ((encWheel_Vel[0]*-0.707107)+(encWheel_Vel[1]*-0.707107));
 8001a54:	ee17 0a90 	vmov	r0, s15
 8001a58:	f7fe fd76 	bl	8000548 <__aeabi_f2d>
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	460f      	mov	r7, r1
 8001a60:	ee18 0a10 	vmov	r0, s16
 8001a64:	f7fe fd70 	bl	8000548 <__aeabi_f2d>
 8001a68:	a343      	add	r3, pc, #268	; (adr r3, 8001b78 <OdomCalc+0x160>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4604      	mov	r4, r0
 8001a74:	460d      	mov	r5, r1
 8001a76:	a340      	add	r3, pc, #256	; (adr r3, 8001b78 <OdomCalc+0x160>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	4639      	mov	r1, r7
 8001a80:	f7fe fdba 	bl	80005f8 <__aeabi_dmul>
 8001a84:	4622      	mov	r2, r4
 8001a86:	462b      	mov	r3, r5
 8001a88:	f7fe fc00 	bl	800028c <__adddf3>
 8001a8c:	f7ff f88c 	bl	8000ba8 <__aeabi_d2f>
 8001a90:	ee08 0a10 	vmov	s16, r0
 8001a94:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8001ba4 <OdomCalc+0x18c>
 8001a98:	f8c9 0000 	str.w	r0, [r9]
	odomLocalSpeed[1] = ((encWheel_Vel[0]*0.707107)+(encWheel_Vel[1]*-0.707107));
 8001a9c:	a338      	add	r3, pc, #224	; (adr r3, 8001b80 <OdomCalc+0x168>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	4639      	mov	r1, r7
 8001aa6:	f7fe fda7 	bl	80005f8 <__aeabi_dmul>
 8001aaa:	4622      	mov	r2, r4
 8001aac:	462b      	mov	r3, r5
 8001aae:	f7fe fbed 	bl	800028c <__adddf3>
 8001ab2:	f7ff f879 	bl	8000ba8 <__aeabi_d2f>
 8001ab6:	ee08 0a90 	vmov	s17, r0
 8001aba:	f8c9 0004 	str.w	r0, [r9, #4]

	odomGlobalSpeed[0] = cosf(heading*0.0174533)*odomLocalSpeed[0] - sinf(heading*0.0174533)*odomLocalSpeed[1];
 8001abe:	4640      	mov	r0, r8
 8001ac0:	f7fe fd42 	bl	8000548 <__aeabi_f2d>
 8001ac4:	a330      	add	r3, pc, #192	; (adr r3, 8001b88 <OdomCalc+0x170>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd95 	bl	80005f8 <__aeabi_dmul>
 8001ace:	f7ff f86b 	bl	8000ba8 <__aeabi_d2f>
 8001ad2:	ee09 0a10 	vmov	s18, r0
 8001ad6:	ee00 0a10 	vmov	s0, r0
 8001ada:	f007 fb7b 	bl	80091d4 <cosf>
 8001ade:	eef0 9a40 	vmov.f32	s19, s0
 8001ae2:	eeb0 0a49 	vmov.f32	s0, s18
 8001ae6:	f007 fbb9 	bl	800925c <sinf>
 8001aea:	ee28 9a29 	vmul.f32	s18, s16, s19
 8001aee:	ee68 7a80 	vmul.f32	s15, s17, s0
 8001af2:	ee39 9a67 	vsub.f32	s18, s18, s15
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <OdomCalc+0x184>)
 8001af8:	ed83 9a00 	vstr	s18, [r3]
	odomGlobalSpeed[1] = sinf(heading*0.0174533)*odomLocalSpeed[0] + cosf(heading*0.0174533)*odomLocalSpeed[1];
 8001afc:	ee28 8a00 	vmul.f32	s16, s16, s0
 8001b00:	ee68 8aa9 	vmul.f32	s17, s17, s19
 8001b04:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001b08:	ed83 8a01 	vstr	s16, [r3, #4]

	odomGlobalPosition[0] += odomGlobalSpeed[0]*0.01667;
 8001b0c:	4c24      	ldr	r4, [pc, #144]	; (8001ba0 <OdomCalc+0x188>)
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	f7fe fd1a 	bl	8000548 <__aeabi_f2d>
 8001b14:	4606      	mov	r6, r0
 8001b16:	460f      	mov	r7, r1
 8001b18:	ee19 0a10 	vmov	r0, s18
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_f2d>
 8001b20:	a31b      	add	r3, pc, #108	; (adr r3, 8001b90 <OdomCalc+0x178>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fd67 	bl	80005f8 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4630      	mov	r0, r6
 8001b30:	4639      	mov	r1, r7
 8001b32:	f7fe fbab 	bl	800028c <__adddf3>
 8001b36:	f7ff f837 	bl	8000ba8 <__aeabi_d2f>
 8001b3a:	6020      	str	r0, [r4, #0]
	odomGlobalPosition[1] += odomGlobalSpeed[1]*0.01667;
 8001b3c:	6860      	ldr	r0, [r4, #4]
 8001b3e:	f7fe fd03 	bl	8000548 <__aeabi_f2d>
 8001b42:	4606      	mov	r6, r0
 8001b44:	460f      	mov	r7, r1
 8001b46:	ee18 0a10 	vmov	r0, s16
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	a310      	add	r3, pc, #64	; (adr r3, 8001b90 <OdomCalc+0x178>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fd50 	bl	80005f8 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	4639      	mov	r1, r7
 8001b60:	f7fe fb94 	bl	800028c <__adddf3>
 8001b64:	f7ff f820 	bl	8000ba8 <__aeabi_d2f>
 8001b68:	6060      	str	r0, [r4, #4]
	odomGlobalPosition[2] = heading;
 8001b6a:	f8c4 8008 	str.w	r8, [r4, #8]


}
 8001b6e:	ecbd 8b04 	vpop	{d8-d9}
 8001b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b76:	bf00      	nop
 8001b78:	dbf8b9bb 	.word	0xdbf8b9bb
 8001b7c:	bfe6a09e 	.word	0xbfe6a09e
 8001b80:	dbf8b9bb 	.word	0xdbf8b9bb
 8001b84:	3fe6a09e 	.word	0x3fe6a09e
 8001b88:	22d4405f 	.word	0x22d4405f
 8001b8c:	3f91df47 	.word	0x3f91df47
 8001b90:	c34c1a8b 	.word	0xc34c1a8b
 8001b94:	3f9111f0 	.word	0x3f9111f0
 8001b98:	20000bcc 	.word	0x20000bcc
 8001b9c:	20000be0 	.word	0x20000be0
 8001ba0:	20000bd4 	.word	0x20000bd4
 8001ba4:	20000bec 	.word	0x20000bec

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2100      	movs	r1, #0
 8001bac:	9100      	str	r1, [sp, #0]
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_MspInit+0x34>)
 8001bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	9101      	str	r1, [sp, #4]
 8001bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	b002      	add	sp, #8
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler>

08001be2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler>

08001be4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler>

08001be6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler>

08001be8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler>

08001bea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	4770      	bx	lr

08001bee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf2:	f000 fb75 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf6:	bd08      	pop	{r3, pc}

08001bf8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <DMA1_Stream0_IRQHandler+0xc>)
 8001bfc:	f001 f91e 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c00:	bd08      	pop	{r3, pc}
 8001c02:	bf00      	nop
 8001c04:	20000cd4 	.word	0x20000cd4

08001c08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c0a:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream5_IRQHandler+0xc>)
 8001c0c:	f001 f916 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c10:	bd08      	pop	{r3, pc}
 8001c12:	bf00      	nop
 8001c14:	20000d94 	.word	0x20000d94

08001c18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c1a:	4802      	ldr	r0, [pc, #8]	; (8001c24 <CAN1_RX0_IRQHandler+0xc>)
 8001c1c:	f000 fe20 	bl	8002860 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c20:	bd08      	pop	{r3, pc}
 8001c22:	bf00      	nop
 8001c24:	20000a34 	.word	0x20000a34

08001c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c2a:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART2_IRQHandler+0xc>)
 8001c2c:	f002 fb4a 	bl	80042c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c30:	bd08      	pop	{r3, pc}
 8001c32:	bf00      	nop
 8001c34:	20000e38 	.word	0x20000e38

08001c38 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001c3a:	4802      	ldr	r0, [pc, #8]	; (8001c44 <UART5_IRQHandler+0xc>)
 8001c3c:	f002 fb42 	bl	80042c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001c40:	bd08      	pop	{r3, pc}
 8001c42:	bf00      	nop
 8001c44:	20000e7c 	.word	0x20000e7c

08001c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c4a:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM6_DAC_IRQHandler+0xc>)
 8001c4c:	f001 fe7a 	bl	8003944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c50:	bd08      	pop	{r3, pc}
 8001c52:	bf00      	nop
 8001c54:	20000c44 	.word	0x20000c44

08001c58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c5a:	4802      	ldr	r0, [pc, #8]	; (8001c64 <DMA2_Stream2_IRQHandler+0xc>)
 8001c5c:	f001 f8ee 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c60:	bd08      	pop	{r3, pc}
 8001c62:	bf00      	nop
 8001c64:	20000d34 	.word	0x20000d34

08001c68 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001c68:	2001      	movs	r0, #1
 8001c6a:	4770      	bx	lr

08001c6c <_kill>:

int _kill(int pid, int sig)
{
 8001c6c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c6e:	f002 fd69 	bl	8004744 <__errno>
 8001c72:	2316      	movs	r3, #22
 8001c74:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001c76:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7a:	bd08      	pop	{r3, pc}

08001c7c <_exit>:

void _exit (int status)
{
 8001c7c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c7e:	f002 fd61 	bl	8004744 <__errno>
 8001c82:	2316      	movs	r3, #22
 8001c84:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001c86:	e7fe      	b.n	8001c86 <_exit+0xa>

08001c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	1e16      	subs	r6, r2, #0
 8001c8c:	dd07      	ble.n	8001c9e <_read+0x16>
 8001c8e:	460c      	mov	r4, r1
 8001c90:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	42a5      	cmp	r5, r4
 8001c9c:	d1f9      	bne.n	8001c92 <_read+0xa>
	}

return len;
}
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	bd70      	pop	{r4, r5, r6, pc}

08001ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca2:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	1e16      	subs	r6, r2, #0
 8001ca6:	dd07      	ble.n	8001cb8 <_write+0x16>
 8001ca8:	460c      	mov	r4, r1
 8001caa:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001cac:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001cb0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	42a5      	cmp	r5, r4
 8001cb6:	d1f9      	bne.n	8001cac <_write+0xa>
	}
	return len;
}
 8001cb8:	4630      	mov	r0, r6
 8001cba:	bd70      	pop	{r4, r5, r6, pc}

08001cbc <_close>:

int _close(int file)
{
	return -1;
}
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001cc8:	2000      	movs	r0, #0
 8001cca:	4770      	bx	lr

08001ccc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ccc:	2001      	movs	r0, #1
 8001cce:	4770      	bx	lr

08001cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b508      	push	{r3, lr}
 8001cd6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <_sbrk+0x38>)
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	b152      	cbz	r2, 8001cf4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <_sbrk+0x38>)
 8001ce0:	6810      	ldr	r0, [r2, #0]
 8001ce2:	4403      	add	r3, r0
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <_sbrk+0x3c>)
 8001ce6:	490b      	ldr	r1, [pc, #44]	; (8001d14 <_sbrk+0x40>)
 8001ce8:	1a52      	subs	r2, r2, r1
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d806      	bhi.n	8001cfc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001cee:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <_sbrk+0x38>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001cf2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001cf4:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x38>)
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <_sbrk+0x44>)
 8001cf8:	6011      	str	r1, [r2, #0]
 8001cfa:	e7f0      	b.n	8001cde <_sbrk+0xa>
    errno = ENOMEM;
 8001cfc:	f002 fd22 	bl	8004744 <__errno>
 8001d00:	230c      	movs	r3, #12
 8001d02:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	e7f3      	b.n	8001cf2 <_sbrk+0x1e>
 8001d0a:	bf00      	nop
 8001d0c:	20000bf8 	.word	0x20000bf8
 8001d10:	20020000 	.word	0x20020000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	20000f00 	.word	0x20000f00

08001d1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4a03      	ldr	r2, [pc, #12]	; (8001d2c <SystemInit+0x10>)
 8001d1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d30:	b500      	push	{lr}
 8001d32:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d34:	2220      	movs	r2, #32
 8001d36:	2100      	movs	r1, #0
 8001d38:	a804      	add	r0, sp, #16
 8001d3a:	f002 fd2d 	bl	8004798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d44:	4811      	ldr	r0, [pc, #68]	; (8001d8c <MX_TIM3_Init+0x5c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_TIM3_Init+0x60>)
 8001d48:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8001d4a:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8001d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d52:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d60:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d62:	a903      	add	r1, sp, #12
 8001d64:	f001 ff5c 	bl	8003c20 <HAL_TIM_Encoder_Init>
 8001d68:	b950      	cbnz	r0, 8001d80 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d70:	a901      	add	r1, sp, #4
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <MX_TIM3_Init+0x5c>)
 8001d74:	f002 f81a 	bl	8003dac <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	b928      	cbnz	r0, 8001d86 <MX_TIM3_Init+0x56>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d7a:	b00d      	add	sp, #52	; 0x34
 8001d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d80:	f7ff fd34 	bl	80017ec <Error_Handler>
 8001d84:	e7f1      	b.n	8001d6a <MX_TIM3_Init+0x3a>
    Error_Handler();
 8001d86:	f7ff fd31 	bl	80017ec <Error_Handler>
}
 8001d8a:	e7f6      	b.n	8001d7a <MX_TIM3_Init+0x4a>
 8001d8c:	20000bfc 	.word	0x20000bfc
 8001d90:	40000400 	.word	0x40000400

08001d94 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d94:	b500      	push	{lr}
 8001d96:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d9e:	480f      	ldr	r0, [pc, #60]	; (8001ddc <MX_TIM6_Init+0x48>)
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <MX_TIM6_Init+0x4c>)
 8001da2:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 83;
 8001da4:	2253      	movs	r2, #83	; 0x53
 8001da6:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 999;
 8001daa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dae:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001db2:	f001 ff09 	bl	8003bc8 <HAL_TIM_Base_Init>
 8001db6:	b958      	cbnz	r0, 8001dd0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001db8:	2320      	movs	r3, #32
 8001dba:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dc0:	4669      	mov	r1, sp
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_TIM6_Init+0x48>)
 8001dc4:	f001 fff2 	bl	8003dac <HAL_TIMEx_MasterConfigSynchronization>
 8001dc8:	b928      	cbnz	r0, 8001dd6 <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001dca:	b003      	add	sp, #12
 8001dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001dd0:	f7ff fd0c 	bl	80017ec <Error_Handler>
 8001dd4:	e7f0      	b.n	8001db8 <MX_TIM6_Init+0x24>
    Error_Handler();
 8001dd6:	f7ff fd09 	bl	80017ec <Error_Handler>
}
 8001dda:	e7f6      	b.n	8001dca <MX_TIM6_Init+0x36>
 8001ddc:	20000c44 	.word	0x20000c44
 8001de0:	40001000 	.word	0x40001000

08001de4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001de4:	b500      	push	{lr}
 8001de6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001de8:	2220      	movs	r2, #32
 8001dea:	2100      	movs	r1, #0
 8001dec:	a804      	add	r0, sp, #16
 8001dee:	f002 fcd3 	bl	8004798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	2300      	movs	r3, #0
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001df8:	4812      	ldr	r0, [pc, #72]	; (8001e44 <MX_TIM8_Init+0x60>)
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <MX_TIM8_Init+0x64>)
 8001dfc:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 0;
 8001dfe:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 65535;
 8001e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e06:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e0a:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e12:	2301      	movs	r3, #1
 8001e14:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e16:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e18:	a903      	add	r1, sp, #12
 8001e1a:	f001 ff01 	bl	8003c20 <HAL_TIM_Encoder_Init>
 8001e1e:	b950      	cbnz	r0, 8001e36 <MX_TIM8_Init+0x52>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e26:	a901      	add	r1, sp, #4
 8001e28:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_TIM8_Init+0x60>)
 8001e2a:	f001 ffbf 	bl	8003dac <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	b928      	cbnz	r0, 8001e3c <MX_TIM8_Init+0x58>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e30:	b00d      	add	sp, #52	; 0x34
 8001e32:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001e36:	f7ff fcd9 	bl	80017ec <Error_Handler>
 8001e3a:	e7f1      	b.n	8001e20 <MX_TIM8_Init+0x3c>
    Error_Handler();
 8001e3c:	f7ff fcd6 	bl	80017ec <Error_Handler>
}
 8001e40:	e7f6      	b.n	8001e30 <MX_TIM8_Init+0x4c>
 8001e42:	bf00      	nop
 8001e44:	20000c8c 	.word	0x20000c8c
 8001e48:	40010400 	.word	0x40010400

08001e4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e4c:	b500      	push	{lr}
 8001e4e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	2300      	movs	r3, #0
 8001e52:	9305      	str	r3, [sp, #20]
 8001e54:	9306      	str	r3, [sp, #24]
 8001e56:	9307      	str	r3, [sp, #28]
 8001e58:	9308      	str	r3, [sp, #32]
 8001e5a:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_encoderHandle->Instance==TIM3)
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xa8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d005      	beq.n	8001e70 <HAL_TIM_Encoder_MspInit+0x24>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM8)
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <HAL_TIM_Encoder_MspInit+0xac>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d022      	beq.n	8001eb0 <HAL_TIM_Encoder_MspInit+0x64>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001e6a:	b00b      	add	sp, #44	; 0x2c
 8001e6c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e70:	2100      	movs	r1, #0
 8001e72:	9101      	str	r1, [sp, #4]
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e78:	f042 0202 	orr.w	r2, r2, #2
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e80:	f002 0202 	and.w	r2, r2, #2
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	9102      	str	r1, [sp, #8]
 8001e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8c:	f042 0202 	orr.w	r2, r2, #2
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e9c:	2330      	movs	r3, #48	; 0x30
 8001e9e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	a905      	add	r1, sp, #20
 8001ea8:	4815      	ldr	r0, [pc, #84]	; (8001f00 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001eaa:	f001 f8b5 	bl	8003018 <HAL_GPIO_Init>
 8001eae:	e7dc      	b.n	8001e6a <HAL_TIM_Encoder_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	9103      	str	r1, [sp, #12]
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb8:	f042 0202 	orr.w	r2, r2, #2
 8001ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec0:	f002 0202 	and.w	r2, r2, #2
 8001ec4:	9203      	str	r2, [sp, #12]
 8001ec6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	9104      	str	r1, [sp, #16]
 8001eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ecc:	f042 0204 	orr.w	r2, r2, #4
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	9304      	str	r3, [sp, #16]
 8001eda:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee8:	a905      	add	r1, sp, #20
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001eec:	f001 f894 	bl	8003018 <HAL_GPIO_Init>
}
 8001ef0:	e7bb      	b.n	8001e6a <HAL_TIM_Encoder_MspInit+0x1e>
 8001ef2:	bf00      	nop
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40010400 	.word	0x40010400
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800

08001f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8001f08:	6802      	ldr	r2, [r0, #0]
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_TIM_Base_MspInit+0x3c>)
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d000      	beq.n	8001f12 <HAL_TIM_Base_MspInit+0xa>
 8001f10:	4770      	bx	lr
{
 8001f12:	b500      	push	{lr}
 8001f14:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f16:	2100      	movs	r1, #0
 8001f18:	9101      	str	r1, [sp, #4]
 8001f1a:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8001f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f20:	f042 0210 	orr.w	r2, r2, #16
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	9b01      	ldr	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f30:	460a      	mov	r2, r1
 8001f32:	2036      	movs	r0, #54	; 0x36
 8001f34:	f000 fdcc 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f38:	2036      	movs	r0, #54	; 0x36
 8001f3a:	f000 fdff 	bl	8002b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f3e:	b003      	add	sp, #12
 8001f40:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f44:	40001000 	.word	0x40001000

08001f48 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f48:	b508      	push	{r3, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f4a:	480a      	ldr	r0, [pc, #40]	; (8001f74 <MX_UART5_Init+0x2c>)
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <MX_UART5_Init+0x30>)
 8001f4e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8001f50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f54:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	2300      	movs	r3, #0
 8001f58:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f5a:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f5c:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f5e:	220c      	movs	r2, #12
 8001f60:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f66:	f002 f85b 	bl	8004020 <HAL_UART_Init>
 8001f6a:	b900      	cbnz	r0, 8001f6e <MX_UART5_Init+0x26>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f6c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f6e:	f7ff fc3d 	bl	80017ec <Error_Handler>
}
 8001f72:	e7fb      	b.n	8001f6c <MX_UART5_Init+0x24>
 8001f74:	20000e7c 	.word	0x20000e7c
 8001f78:	40005000 	.word	0x40005000

08001f7c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f7c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f7e:	480a      	ldr	r0, [pc, #40]	; (8001fa8 <MX_USART1_UART_Init+0x2c>)
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <MX_USART1_UART_Init+0x30>)
 8001f82:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001f84:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001f88:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f8e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f90:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f92:	220c      	movs	r2, #12
 8001f94:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f9a:	f002 f841 	bl	8004020 <HAL_UART_Init>
 8001f9e:	b900      	cbnz	r0, 8001fa2 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fa0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001fa2:	f7ff fc23 	bl	80017ec <Error_Handler>
}
 8001fa6:	e7fb      	b.n	8001fa0 <MX_USART1_UART_Init+0x24>
 8001fa8:	20000df4 	.word	0x20000df4
 8001fac:	40011000 	.word	0x40011000

08001fb0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fb0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb2:	480a      	ldr	r0, [pc, #40]	; (8001fdc <MX_USART2_UART_Init+0x2c>)
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_USART2_UART_Init+0x30>)
 8001fb6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001fb8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fbc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fce:	f002 f827 	bl	8004020 <HAL_UART_Init>
 8001fd2:	b900      	cbnz	r0, 8001fd6 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001fd6:	f7ff fc09 	bl	80017ec <Error_Handler>
}
 8001fda:	e7fb      	b.n	8001fd4 <MX_USART2_UART_Init+0x24>
 8001fdc:	20000e38 	.word	0x20000e38
 8001fe0:	40004400 	.word	0x40004400

08001fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe8:	b08c      	sub	sp, #48	; 0x30
 8001fea:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	2300      	movs	r3, #0
 8001fee:	9307      	str	r3, [sp, #28]
 8001ff0:	9308      	str	r3, [sp, #32]
 8001ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8001ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8001ff6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(uartHandle->Instance==UART5)
 8001ff8:	6803      	ldr	r3, [r0, #0]
 8001ffa:	4a76      	ldr	r2, [pc, #472]	; (80021d4 <HAL_UART_MspInit+0x1f0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_UART_MspInit+0x30>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8002000:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <HAL_UART_MspInit+0x1f4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d062      	beq.n	80020cc <HAL_UART_MspInit+0xe8>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002006:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_UART_MspInit+0x1f8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	f000 809d 	beq.w	8002148 <HAL_UART_MspInit+0x164>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800200e:	b00c      	add	sp, #48	; 0x30
 8002010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8002014:	2500      	movs	r5, #0
 8002016:	9500      	str	r5, [sp, #0]
 8002018:	4b71      	ldr	r3, [pc, #452]	; (80021e0 <HAL_UART_MspInit+0x1fc>)
 800201a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800201c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
 8002022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002024:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002028:	9200      	str	r2, [sp, #0]
 800202a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	9501      	str	r5, [sp, #4]
 800202e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002030:	f042 0204 	orr.w	r2, r2, #4
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
 8002036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002038:	f002 0204 	and.w	r2, r2, #4
 800203c:	9201      	str	r2, [sp, #4]
 800203e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002040:	9502      	str	r5, [sp, #8]
 8002042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002044:	f042 0208 	orr.w	r2, r2, #8
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	9302      	str	r3, [sp, #8]
 8002052:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	f04f 0802 	mov.w	r8, #2
 800205e:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2703      	movs	r7, #3
 8002064:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002066:	2608      	movs	r6, #8
 8002068:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	a907      	add	r1, sp, #28
 800206c:	485d      	ldr	r0, [pc, #372]	; (80021e4 <HAL_UART_MspInit+0x200>)
 800206e:	f000 ffd3 	bl	8003018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002072:	2304      	movs	r3, #4
 8002074:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800207e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002080:	a907      	add	r1, sp, #28
 8002082:	4859      	ldr	r0, [pc, #356]	; (80021e8 <HAL_UART_MspInit+0x204>)
 8002084:	f000 ffc8 	bl	8003018 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002088:	4858      	ldr	r0, [pc, #352]	; (80021ec <HAL_UART_MspInit+0x208>)
 800208a:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_UART_MspInit+0x20c>)
 800208c:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800208e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002092:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002094:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002096:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209c:	6103      	str	r3, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800209e:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a0:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80020a2:	61c5      	str	r5, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020a4:	6205      	str	r5, [r0, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80020a8:	f000 fd8a 	bl	8002bc0 <HAL_DMA_Init>
 80020ac:	b958      	cbnz	r0, 80020c6 <HAL_UART_MspInit+0xe2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80020ae:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <HAL_UART_MspInit+0x208>)
 80020b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80020b2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	4611      	mov	r1, r2
 80020b8:	2035      	movs	r0, #53	; 0x35
 80020ba:	f000 fd09 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80020be:	2035      	movs	r0, #53	; 0x35
 80020c0:	f000 fd3c 	bl	8002b3c <HAL_NVIC_EnableIRQ>
 80020c4:	e7a3      	b.n	800200e <HAL_UART_MspInit+0x2a>
      Error_Handler();
 80020c6:	f7ff fb91 	bl	80017ec <Error_Handler>
 80020ca:	e7f0      	b.n	80020ae <HAL_UART_MspInit+0xca>
    __HAL_RCC_USART1_CLK_ENABLE();
 80020cc:	2500      	movs	r5, #0
 80020ce:	9503      	str	r5, [sp, #12]
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_UART_MspInit+0x1fc>)
 80020d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d4:	f042 0210 	orr.w	r2, r2, #16
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44
 80020da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020dc:	f002 0210 	and.w	r2, r2, #16
 80020e0:	9203      	str	r2, [sp, #12]
 80020e2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	9504      	str	r5, [sp, #16]
 80020e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e8:	f042 0202 	orr.w	r2, r2, #2
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	9304      	str	r3, [sp, #16]
 80020f6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020f8:	23c0      	movs	r3, #192	; 0xc0
 80020fa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002104:	2307      	movs	r3, #7
 8002106:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	a907      	add	r1, sp, #28
 800210a:	483a      	ldr	r0, [pc, #232]	; (80021f4 <HAL_UART_MspInit+0x210>)
 800210c:	f000 ff84 	bl	8003018 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002110:	4839      	ldr	r0, [pc, #228]	; (80021f8 <HAL_UART_MspInit+0x214>)
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_UART_MspInit+0x218>)
 8002114:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002116:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800211a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800211c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002124:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002126:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002128:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800212a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800212e:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002130:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002132:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002134:	f000 fd44 	bl	8002bc0 <HAL_DMA_Init>
 8002138:	b918      	cbnz	r0, 8002142 <HAL_UART_MspInit+0x15e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800213a:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_UART_MspInit+0x214>)
 800213c:	63a3      	str	r3, [r4, #56]	; 0x38
 800213e:	639c      	str	r4, [r3, #56]	; 0x38
 8002140:	e765      	b.n	800200e <HAL_UART_MspInit+0x2a>
      Error_Handler();
 8002142:	f7ff fb53 	bl	80017ec <Error_Handler>
 8002146:	e7f8      	b.n	800213a <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002148:	2500      	movs	r5, #0
 800214a:	9505      	str	r5, [sp, #20]
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_UART_MspInit+0x1fc>)
 800214e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002150:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
 8002156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002158:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800215c:	9205      	str	r2, [sp, #20]
 800215e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	9506      	str	r5, [sp, #24]
 8002162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	9306      	str	r3, [sp, #24]
 8002172:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002174:	230c      	movs	r3, #12
 8002176:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002180:	2307      	movs	r3, #7
 8002182:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	a907      	add	r1, sp, #28
 8002186:	481e      	ldr	r0, [pc, #120]	; (8002200 <HAL_UART_MspInit+0x21c>)
 8002188:	f000 ff46 	bl	8003018 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800218c:	481d      	ldr	r0, [pc, #116]	; (8002204 <HAL_UART_MspInit+0x220>)
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_UART_MspInit+0x224>)
 8002190:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002192:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002196:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002198:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219a:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800219c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a0:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a2:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a4:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80021a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021aa:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ac:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ae:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021b0:	f000 fd06 	bl	8002bc0 <HAL_DMA_Init>
 80021b4:	b958      	cbnz	r0, 80021ce <HAL_UART_MspInit+0x1ea>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_UART_MspInit+0x220>)
 80021b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80021ba:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	4611      	mov	r1, r2
 80021c0:	2026      	movs	r0, #38	; 0x26
 80021c2:	f000 fc85 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021c6:	2026      	movs	r0, #38	; 0x26
 80021c8:	f000 fcb8 	bl	8002b3c <HAL_NVIC_EnableIRQ>
}
 80021cc:	e71f      	b.n	800200e <HAL_UART_MspInit+0x2a>
      Error_Handler();
 80021ce:	f7ff fb0d 	bl	80017ec <Error_Handler>
 80021d2:	e7f0      	b.n	80021b6 <HAL_UART_MspInit+0x1d2>
 80021d4:	40005000 	.word	0x40005000
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	20000cd4 	.word	0x20000cd4
 80021f0:	40026010 	.word	0x40026010
 80021f4:	40020400 	.word	0x40020400
 80021f8:	20000d34 	.word	0x20000d34
 80021fc:	40026440 	.word	0x40026440
 8002200:	40020000 	.word	0x40020000
 8002204:	20000d94 	.word	0x20000d94
 8002208:	40026088 	.word	0x40026088

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002212:	490e      	ldr	r1, [pc, #56]	; (800224c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002228:	4c0b      	ldr	r4, [pc, #44]	; (8002258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002236:	f7ff fd71 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f002 fa89 	bl	8004750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7fe ffe7 	bl	8001210 <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	20000a18 	.word	0x20000a18
  ldr r2, =_sidata
 8002250:	0800a4e0 	.word	0x0800a4e0
  ldr r2, =_sbss
 8002254:	20000a18 	.word	0x20000a18
  ldr r4, =_ebss
 8002258:	20000f00 	.word	0x20000f00

0800225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC_IRQHandler>
	...

08002260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b510      	push	{r4, lr}
 8002262:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_InitTick+0x40>)
 8002266:	7818      	ldrb	r0, [r3, #0]
 8002268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <HAL_InitTick+0x44>)
 8002272:	6810      	ldr	r0, [r2, #0]
 8002274:	fbb0 f0f3 	udiv	r0, r0, r3
 8002278:	f000 fc6e 	bl	8002b58 <HAL_SYSTICK_Config>
 800227c:	b968      	cbnz	r0, 800229a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	2c0f      	cmp	r4, #15
 8002280:	d901      	bls.n	8002286 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002282:	2001      	movs	r0, #1
 8002284:	e00a      	b.n	800229c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002286:	2200      	movs	r2, #0
 8002288:	4621      	mov	r1, r4
 800228a:	f04f 30ff 	mov.w	r0, #4294967295
 800228e:	f000 fc1f 	bl	8002ad0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_InitTick+0x48>)
 8002294:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2000      	movs	r0, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800229a:	2001      	movs	r0, #1
}
 800229c:	bd10      	pop	{r4, pc}
 800229e:	bf00      	nop
 80022a0:	20000064 	.word	0x20000064
 80022a4:	20000060 	.word	0x20000060
 80022a8:	20000068 	.word	0x20000068

080022ac <HAL_Init>:
{
 80022ac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_Init+0x30>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 fbef 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	200f      	movs	r0, #15
 80022d0:	f7ff ffc6 	bl	8002260 <HAL_InitTick>
  HAL_MspInit();
 80022d4:	f7ff fc68 	bl	8001ba8 <HAL_MspInit>
}
 80022d8:	2000      	movs	r0, #0
 80022da:	bd08      	pop	{r3, pc}
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_IncTick+0x10>)
 80022e2:	6811      	ldr	r1, [r2, #0]
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_IncTick+0x14>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	440b      	add	r3, r1
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000ec0 	.word	0x20000ec0
 80022f4:	20000064 	.word	0x20000064

080022f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022f8:	4b01      	ldr	r3, [pc, #4]	; (8002300 <HAL_GetTick+0x8>)
 80022fa:	6818      	ldr	r0, [r3, #0]
}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000ec0 	.word	0x20000ec0

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff fff6 	bl	80022f8 <HAL_GetTick>
 800230c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002312:	d002      	beq.n	800231a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <HAL_Delay+0x24>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231a:	f7ff ffed 	bl	80022f8 <HAL_GetTick>
 800231e:	1b40      	subs	r0, r0, r5
 8002320:	42a0      	cmp	r0, r4
 8002322:	d3fa      	bcc.n	800231a <HAL_Delay+0x16>
  {
  }
}
 8002324:	bd38      	pop	{r3, r4, r5, pc}
 8002326:	bf00      	nop
 8002328:	20000064 	.word	0x20000064

0800232c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800232c:	2800      	cmp	r0, #0
 800232e:	f000 808a 	beq.w	8002446 <HAL_CAN_Init+0x11a>
{
 8002332:	b538      	push	{r3, r4, r5, lr}
 8002334:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002336:	f890 3020 	ldrb.w	r3, [r0, #32]
 800233a:	b1d3      	cbz	r3, 8002372 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002346:	f7ff ffd7 	bl	80022f8 <HAL_GetTick>
 800234a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	f012 0f01 	tst.w	r2, #1
 8002354:	d110      	bne.n	8002378 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002356:	f7ff ffcf 	bl	80022f8 <HAL_GetTick>
 800235a:	1b40      	subs	r0, r0, r5
 800235c:	280a      	cmp	r0, #10
 800235e:	d9f5      	bls.n	800234c <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002366:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002368:	2305      	movs	r3, #5
 800236a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800236e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002370:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8002372:	f7fe fe0b 	bl	8000f8c <HAL_CAN_MspInit>
 8002376:	e7e1      	b.n	800233c <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f022 0202 	bic.w	r2, r2, #2
 800237e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002380:	f7ff ffba 	bl	80022f8 <HAL_GetTick>
 8002384:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	f012 0f02 	tst.w	r2, #2
 800238e:	d00d      	beq.n	80023ac <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002390:	f7ff ffb2 	bl	80022f8 <HAL_GetTick>
 8002394:	1b40      	subs	r0, r0, r5
 8002396:	280a      	cmp	r0, #10
 8002398:	d9f5      	bls.n	8002386 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800239a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80023a2:	2305      	movs	r3, #5
 80023a4:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e7e1      	b.n	8002370 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023ac:	7e22      	ldrb	r2, [r4, #24]
 80023ae:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	bf0c      	ite	eq
 80023b4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023b8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80023bc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80023be:	7e63      	ldrb	r3, [r4, #25]
 80023c0:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	6813      	ldr	r3, [r2, #0]
 80023c6:	bf0c      	ite	eq
 80023c8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023cc:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 80023d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023d2:	7ea3      	ldrb	r3, [r4, #26]
 80023d4:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	bf0c      	ite	eq
 80023dc:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023e0:	f023 0320 	bicne.w	r3, r3, #32
 80023e4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023e6:	7ee3      	ldrb	r3, [r4, #27]
 80023e8:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ea:	6822      	ldr	r2, [r4, #0]
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	bf0c      	ite	eq
 80023f0:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023f4:	f043 0310 	orrne.w	r3, r3, #16
 80023f8:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023fa:	7f23      	ldrb	r3, [r4, #28]
 80023fc:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023fe:	6822      	ldr	r2, [r4, #0]
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	bf0c      	ite	eq
 8002404:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002408:	f023 0308 	bicne.w	r3, r3, #8
 800240c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800240e:	7f63      	ldrb	r3, [r4, #29]
 8002410:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	6813      	ldr	r3, [r2, #0]
 8002416:	bf0c      	ite	eq
 8002418:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800241c:	f023 0304 	bicne.w	r3, r3, #4
 8002420:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002422:	6821      	ldr	r1, [r4, #0]
 8002424:	68a3      	ldr	r3, [r4, #8]
 8002426:	68e2      	ldr	r2, [r4, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	6922      	ldr	r2, [r4, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	6962      	ldr	r2, [r4, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	6862      	ldr	r2, [r4, #4]
 8002434:	3a01      	subs	r2, #1
 8002436:	4313      	orrs	r3, r2
 8002438:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800243a:	2000      	movs	r0, #0
 800243c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800243e:	2301      	movs	r3, #1
 8002440:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002444:	e794      	b.n	8002370 <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
}
 8002448:	4770      	bx	lr
	...

0800244c <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800244c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002450:	3b01      	subs	r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d905      	bls.n	8002464 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002458:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800245a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002460:	2001      	movs	r0, #1
  }
}
 8002462:	4770      	bx	lr
{
 8002464:	b530      	push	{r4, r5, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 8002468:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002474:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002478:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800247c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002480:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002484:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002486:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800248a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800248e:	694a      	ldr	r2, [r1, #20]
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800249a:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 800249e:	ea6f 0c02 	mvn.w	ip, r2
 80024a2:	ea20 0002 	bic.w	r0, r0, r2
 80024a6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024aa:	69cb      	ldr	r3, [r1, #28]
 80024ac:	b9c3      	cbnz	r3, 80024e0 <HAL_CAN_ConfigFilter+0x94>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024ae:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 80024b0:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80024b4:	ea0c 0000 	and.w	r0, ip, r0
 80024b8:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024bc:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024be:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024c0:	68cd      	ldr	r5, [r1, #12]
 80024c2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024c6:	3048      	adds	r0, #72	; 0x48
 80024c8:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024cc:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024ce:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024d0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024d4:	694c      	ldr	r4, [r1, #20]
 80024d6:	f104 0e48 	add.w	lr, r4, #72	; 0x48
 80024da:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 80024de:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024e0:	69cb      	ldr	r3, [r1, #28]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d01e      	beq.n	8002524 <HAL_CAN_ConfigFilter+0xd8>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024e6:	698b      	ldr	r3, [r1, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d133      	bne.n	8002554 <HAL_CAN_ConfigFilter+0x108>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024ec:	4824      	ldr	r0, [pc, #144]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 80024ee:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80024f2:	ea0c 0303 	and.w	r3, ip, r3
 80024f6:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024fa:	690b      	ldr	r3, [r1, #16]
 80024fc:	bb8b      	cbnz	r3, 8002562 <HAL_CAN_ConfigFilter+0x116>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024fe:	4820      	ldr	r0, [pc, #128]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 8002500:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002504:	ea0c 0303 	and.w	r3, ip, r3
 8002508:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800250c:	6a0b      	ldr	r3, [r1, #32]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d02e      	beq.n	8002570 <HAL_CAN_ConfigFilter+0x124>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002512:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 8002514:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8002520:	2000      	movs	r0, #0
}
 8002522:	bd30      	pop	{r4, r5, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 8002526:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800252a:	4310      	orrs	r0, r2
 800252c:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002530:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002532:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002534:	680d      	ldr	r5, [r1, #0]
 8002536:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800253a:	3048      	adds	r0, #72	; 0x48
 800253c:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002540:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002542:	8988      	ldrh	r0, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002544:	688d      	ldr	r5, [r1, #8]
 8002546:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800254a:	3448      	adds	r4, #72	; 0x48
 800254c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002550:	6058      	str	r0, [r3, #4]
 8002552:	e7c8      	b.n	80024e6 <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 8002556:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8002560:	e7cb      	b.n	80024fa <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002562:	4807      	ldr	r0, [pc, #28]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 8002564:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 800256e:	e7cd      	b.n	800250c <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002570:	4903      	ldr	r1, [pc, #12]	; (8002580 <HAL_CAN_ConfigFilter+0x134>)
 8002572:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 8002576:	431a      	orrs	r2, r3
 8002578:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 800257c:	e7c9      	b.n	8002512 <HAL_CAN_ConfigFilter+0xc6>
 800257e:	bf00      	nop
 8002580:	40006400 	.word	0x40006400

08002584 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002588:	f890 5020 	ldrb.w	r5, [r0, #32]
 800258c:	b2ed      	uxtb	r5, r5
 800258e:	2d01      	cmp	r5, #1
 8002590:	d006      	beq.n	80025a0 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002592:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002598:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800259a:	2501      	movs	r5, #1
  }
}
 800259c:	4628      	mov	r0, r5
 800259e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025a0:	2302      	movs	r3, #2
 80025a2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a6:	6802      	ldr	r2, [r0, #0]
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80025b0:	f7ff fea2 	bl	80022f8 <HAL_GetTick>
 80025b4:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f013 0f01 	tst.w	r3, #1
 80025be:	d00c      	beq.n	80025da <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7ff fe9a 	bl	80022f8 <HAL_GetTick>
 80025c4:	1b83      	subs	r3, r0, r6
 80025c6:	2b0a      	cmp	r3, #10
 80025c8:	d9f5      	bls.n	80025b6 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80025d2:	2305      	movs	r3, #5
 80025d4:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80025d8:	e7e0      	b.n	800259c <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025da:	2500      	movs	r5, #0
 80025dc:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80025de:	e7dd      	b.n	800259c <HAL_CAN_Start+0x18>

080025e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80025e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e2:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025e6:	6804      	ldr	r4, [r0, #0]
 80025e8:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80025ee:	fa5f fc8c 	uxtb.w	ip, ip
 80025f2:	f1bc 0f01 	cmp.w	ip, #1
 80025f6:	d86d      	bhi.n	80026d4 <HAL_CAN_AddTxMessage+0xf4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025f8:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80025fc:	d064      	beq.n	80026c8 <HAL_CAN_AddTxMessage+0xe8>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025fe:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002602:	f1bc 0f02 	cmp.w	ip, #2
 8002606:	d905      	bls.n	8002614 <HAL_CAN_AddTxMessage+0x34>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002608:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800260a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800260e:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8002610:	2001      	movs	r0, #1
 8002612:	e064      	b.n	80026de <HAL_CAN_AddTxMessage+0xfe>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002614:	2401      	movs	r4, #1
 8002616:	fa04 f40c 	lsl.w	r4, r4, ip
 800261a:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800261c:	688b      	ldr	r3, [r1, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d13b      	bne.n	800269a <HAL_CAN_AddTxMessage+0xba>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002622:	6804      	ldr	r4, [r0, #0]
 8002624:	680d      	ldr	r5, [r1, #0]
 8002626:	68cb      	ldr	r3, [r1, #12]
 8002628:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 800262c:	f10c 0318 	add.w	r3, ip, #24
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	690c      	ldr	r4, [r1, #16]
 8002638:	f10c 0e18 	add.w	lr, ip, #24
 800263c:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8002640:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002642:	7d0b      	ldrb	r3, [r1, #20]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d035      	beq.n	80026b4 <HAL_CAN_AddTxMessage+0xd4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002648:	6801      	ldr	r1, [r0, #0]
 800264a:	79d4      	ldrb	r4, [r2, #7]
 800264c:	7993      	ldrb	r3, [r2, #6]
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002654:	7914      	ldrb	r4, [r2, #4]
 8002656:	4323      	orrs	r3, r4
 8002658:	7954      	ldrb	r4, [r2, #5]
 800265a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800265e:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8002662:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002666:	6801      	ldr	r1, [r0, #0]
 8002668:	78d4      	ldrb	r4, [r2, #3]
 800266a:	7893      	ldrb	r3, [r2, #2]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8002672:	7814      	ldrb	r4, [r2, #0]
 8002674:	4323      	orrs	r3, r4
 8002676:	7852      	ldrb	r2, [r2, #1]
 8002678:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800267c:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8002680:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002684:	6803      	ldr	r3, [r0, #0]
 8002686:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800268a:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8002696:	2000      	movs	r0, #0
 8002698:	e021      	b.n	80026de <HAL_CAN_AddTxMessage+0xfe>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800269a:	6804      	ldr	r4, [r0, #0]
 800269c:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 800269e:	68ce      	ldr	r6, [r1, #12]
 80026a0:	4333      	orrs	r3, r6
 80026a2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026a6:	f10c 0e18 	add.w	lr, ip, #24
 80026aa:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 80026ae:	f844 300e 	str.w	r3, [r4, lr]
 80026b2:	e7bf      	b.n	8002634 <HAL_CAN_AddTxMessage+0x54>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026b4:	6803      	ldr	r3, [r0, #0]
 80026b6:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 80026ba:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 80026be:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80026c2:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 80026c6:	e7bf      	b.n	8002648 <HAL_CAN_AddTxMessage+0x68>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ce:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 80026d0:	2001      	movs	r0, #1
 80026d2:	e004      	b.n	80026de <HAL_CAN_AddTxMessage+0xfe>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80026dc:	2001      	movs	r0, #1
  }
}
 80026de:	bd70      	pop	{r4, r5, r6, pc}

080026e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e0:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80026e8:	fa5f fc8c 	uxtb.w	ip, ip
 80026ec:	f1bc 0f01 	cmp.w	ip, #1
 80026f0:	f200 8092 	bhi.w	8002818 <HAL_CAN_GetRxMessage+0x138>
{
 80026f4:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026f6:	b959      	cbnz	r1, 8002710 <HAL_CAN_GetRxMessage+0x30>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026f8:	6804      	ldr	r4, [r0, #0]
 80026fa:	68e4      	ldr	r4, [r4, #12]
 80026fc:	f014 0f03 	tst.w	r4, #3
 8002700:	d111      	bne.n	8002726 <HAL_CAN_GetRxMessage+0x46>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002702:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002708:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800270c:	bc30      	pop	{r4, r5}
 800270e:	4770      	bx	lr
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002710:	6804      	ldr	r4, [r0, #0]
 8002712:	6924      	ldr	r4, [r4, #16]
 8002714:	f014 0f03 	tst.w	r4, #3
 8002718:	d105      	bne.n	8002726 <HAL_CAN_GetRxMessage+0x46>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800271a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800271c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002720:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	e7f2      	b.n	800270c <HAL_CAN_GetRxMessage+0x2c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002726:	f101 041b 	add.w	r4, r1, #27
 800272a:	0124      	lsls	r4, r4, #4
 800272c:	6805      	ldr	r5, [r0, #0]
 800272e:	592c      	ldr	r4, [r5, r4]
 8002730:	f004 0404 	and.w	r4, r4, #4
 8002734:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002736:	2c00      	cmp	r4, #0
 8002738:	d15f      	bne.n	80027fa <HAL_CAN_GetRxMessage+0x11a>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800273a:	f101 041b 	add.w	r4, r1, #27
 800273e:	0124      	lsls	r4, r4, #4
 8002740:	6805      	ldr	r5, [r0, #0]
 8002742:	592c      	ldr	r4, [r5, r4]
 8002744:	0d64      	lsrs	r4, r4, #21
 8002746:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002748:	6804      	ldr	r4, [r0, #0]
 800274a:	f101 0c1b 	add.w	ip, r1, #27
 800274e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8002752:	f854 400c 	ldr.w	r4, [r4, ip]
 8002756:	f004 0402 	and.w	r4, r4, #2
 800275a:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800275c:	6804      	ldr	r4, [r0, #0]
 800275e:	4464      	add	r4, ip
 8002760:	6864      	ldr	r4, [r4, #4]
 8002762:	f004 040f 	and.w	r4, r4, #15
 8002766:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002768:	6804      	ldr	r4, [r0, #0]
 800276a:	4464      	add	r4, ip
 800276c:	6864      	ldr	r4, [r4, #4]
 800276e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002772:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002774:	6804      	ldr	r4, [r0, #0]
 8002776:	4464      	add	r4, ip
 8002778:	6864      	ldr	r4, [r4, #4]
 800277a:	0c24      	lsrs	r4, r4, #16
 800277c:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800277e:	6802      	ldr	r2, [r0, #0]
 8002780:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002784:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002788:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800278a:	6802      	ldr	r2, [r0, #0]
 800278c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002790:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002794:	0a12      	lsrs	r2, r2, #8
 8002796:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002798:	6802      	ldr	r2, [r0, #0]
 800279a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800279e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80027a2:	0c12      	lsrs	r2, r2, #16
 80027a4:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027a6:	6802      	ldr	r2, [r0, #0]
 80027a8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027ac:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80027b0:	0e12      	lsrs	r2, r2, #24
 80027b2:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027b4:	6802      	ldr	r2, [r0, #0]
 80027b6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027ba:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80027be:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027c0:	6802      	ldr	r2, [r0, #0]
 80027c2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027c6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80027ca:	0a12      	lsrs	r2, r2, #8
 80027cc:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027ce:	6802      	ldr	r2, [r0, #0]
 80027d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027d4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80027d8:	0c12      	lsrs	r2, r2, #16
 80027da:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027dc:	6802      	ldr	r2, [r0, #0]
 80027de:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027e2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80027e6:	0e12      	lsrs	r2, r2, #24
 80027e8:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027ea:	b971      	cbnz	r1, 800280a <HAL_CAN_GetRxMessage+0x12a>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027ec:	6802      	ldr	r2, [r0, #0]
 80027ee:	68d3      	ldr	r3, [r2, #12]
 80027f0:	f043 0320 	orr.w	r3, r3, #32
 80027f4:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80027f6:	2000      	movs	r0, #0
 80027f8:	e788      	b.n	800270c <HAL_CAN_GetRxMessage+0x2c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027fa:	f101 041b 	add.w	r4, r1, #27
 80027fe:	0124      	lsls	r4, r4, #4
 8002800:	6805      	ldr	r5, [r0, #0]
 8002802:	592c      	ldr	r4, [r5, r4]
 8002804:	08e4      	lsrs	r4, r4, #3
 8002806:	6054      	str	r4, [r2, #4]
 8002808:	e79e      	b.n	8002748 <HAL_CAN_GetRxMessage+0x68>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800280a:	6802      	ldr	r2, [r0, #0]
 800280c:	6913      	ldr	r3, [r2, #16]
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8002814:	2000      	movs	r0, #0
 8002816:	e779      	b.n	800270c <HAL_CAN_GetRxMessage+0x2c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002818:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800281a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002820:	2001      	movs	r0, #1
}
 8002822:	4770      	bx	lr

08002824 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002824:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002828:	3b01      	subs	r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d905      	bls.n	800283c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002836:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002838:	2001      	movs	r0, #1
  }
}
 800283a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800283c:	6802      	ldr	r2, [r0, #0]
 800283e:	6953      	ldr	r3, [r2, #20]
 8002840:	4319      	orrs	r1, r3
 8002842:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8002844:	2000      	movs	r0, #0
 8002846:	4770      	bx	lr

08002848 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800284a:	4770      	bx	lr

0800284c <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002850:	4770      	bx	lr

08002852 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002854:	4770      	bx	lr

08002856 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002856:	4770      	bx	lr

08002858 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002858:	4770      	bx	lr

0800285a <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800285a:	4770      	bx	lr

0800285c <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800285e:	4770      	bx	lr

08002860 <HAL_CAN_IRQHandler>:
{
 8002860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002864:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002866:	6803      	ldr	r3, [r0, #0]
 8002868:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800286a:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800286e:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002870:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002874:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002878:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800287c:	f014 0601 	ands.w	r6, r4, #1
 8002880:	d03b      	beq.n	80028fa <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002882:	f017 0601 	ands.w	r6, r7, #1
 8002886:	d016      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002888:	2201      	movs	r2, #1
 800288a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800288c:	f017 0f02 	tst.w	r7, #2
 8002890:	d108      	bne.n	80028a4 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002892:	f017 0f04 	tst.w	r7, #4
 8002896:	d10c      	bne.n	80028b2 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002898:	f017 0608 	ands.w	r6, r7, #8
 800289c:	d006      	beq.n	80028ac <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800289e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80028a2:	e008      	b.n	80028b6 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028a4:	f7ff ffd0 	bl	8002848 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028a8:	2600      	movs	r6, #0
 80028aa:	e004      	b.n	80028b6 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028ac:	f7ff ffcf 	bl	800284e <HAL_CAN_TxMailbox0AbortCallback>
 80028b0:	e001      	b.n	80028b6 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028b2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028b6:	f417 7f80 	tst.w	r7, #256	; 0x100
 80028ba:	d00d      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028c4:	f417 7f00 	tst.w	r7, #512	; 0x200
 80028c8:	f040 8087 	bne.w	80029da <HAL_CAN_IRQHandler+0x17a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028cc:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80028d0:	f000 8087 	beq.w	80029e2 <HAL_CAN_IRQHandler+0x182>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028d4:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028d8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80028dc:	d00d      	beq.n	80028fa <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028e4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028e6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80028ea:	f040 8084 	bne.w	80029f6 <HAL_CAN_IRQHandler+0x196>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028ee:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80028f2:	f000 8084 	beq.w	80029fe <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028f6:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028fa:	f014 0f08 	tst.w	r4, #8
 80028fe:	d007      	beq.n	8002910 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002900:	f01b 0f10 	tst.w	fp, #16
 8002904:	d004      	beq.n	8002910 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002906:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800290a:	682b      	ldr	r3, [r5, #0]
 800290c:	2210      	movs	r2, #16
 800290e:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002910:	f014 0f04 	tst.w	r4, #4
 8002914:	d002      	beq.n	800291c <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002916:	f01b 0f08 	tst.w	fp, #8
 800291a:	d17a      	bne.n	8002a12 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800291c:	f014 0f02 	tst.w	r4, #2
 8002920:	d004      	beq.n	800292c <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002922:	682b      	ldr	r3, [r5, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f013 0f03 	tst.w	r3, #3
 800292a:	d179      	bne.n	8002a20 <HAL_CAN_IRQHandler+0x1c0>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800292c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8002930:	d007      	beq.n	8002942 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002932:	f01a 0f10 	tst.w	sl, #16
 8002936:	d004      	beq.n	8002942 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002938:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002942:	f014 0f20 	tst.w	r4, #32
 8002946:	d002      	beq.n	800294e <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002948:	f01a 0f08 	tst.w	sl, #8
 800294c:	d16c      	bne.n	8002a28 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800294e:	f014 0f10 	tst.w	r4, #16
 8002952:	d004      	beq.n	800295e <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f013 0f03 	tst.w	r3, #3
 800295c:	d16b      	bne.n	8002a36 <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800295e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8002962:	d002      	beq.n	800296a <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002964:	f018 0f10 	tst.w	r8, #16
 8002968:	d169      	bne.n	8002a3e <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800296a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800296e:	d002      	beq.n	8002976 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002970:	f018 0f08 	tst.w	r8, #8
 8002974:	d16a      	bne.n	8002a4c <HAL_CAN_IRQHandler+0x1ec>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002976:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800297a:	f000 8084 	beq.w	8002a86 <HAL_CAN_IRQHandler+0x226>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800297e:	f018 0f04 	tst.w	r8, #4
 8002982:	d07d      	beq.n	8002a80 <HAL_CAN_IRQHandler+0x220>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002984:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002988:	d004      	beq.n	8002994 <HAL_CAN_IRQHandler+0x134>
 800298a:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800298e:	bf18      	it	ne
 8002990:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002994:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002998:	d004      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x144>
 800299a:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800299e:	bf18      	it	ne
 80029a0:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029a4:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80029a8:	d004      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x154>
 80029aa:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80029ae:	bf18      	it	ne
 80029b0:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029b4:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80029b8:	d062      	beq.n	8002a80 <HAL_CAN_IRQHandler+0x220>
 80029ba:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80029be:	d05f      	beq.n	8002a80 <HAL_CAN_IRQHandler+0x220>
        switch (esrflags & CAN_ESR_LEC)
 80029c0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80029c4:	d065      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x232>
 80029c6:	d84e      	bhi.n	8002a66 <HAL_CAN_IRQHandler+0x206>
 80029c8:	f1b9 0f20 	cmp.w	r9, #32
 80029cc:	d05e      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x22c>
 80029ce:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80029d2:	d142      	bne.n	8002a5a <HAL_CAN_IRQHandler+0x1fa>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029d4:	f046 0620 	orr.w	r6, r6, #32
            break;
 80029d8:	e04d      	b.n	8002a76 <HAL_CAN_IRQHandler+0x216>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029da:	4628      	mov	r0, r5
 80029dc:	f7ff ff35 	bl	800284a <HAL_CAN_TxMailbox1CompleteCallback>
 80029e0:	e77a      	b.n	80028d8 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029e2:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80029e6:	d002      	beq.n	80029ee <HAL_CAN_IRQHandler+0x18e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029e8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80029ec:	e774      	b.n	80028d8 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029ee:	4628      	mov	r0, r5
 80029f0:	f7ff ff2e 	bl	8002850 <HAL_CAN_TxMailbox1AbortCallback>
 80029f4:	e770      	b.n	80028d8 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029f6:	4628      	mov	r0, r5
 80029f8:	f7ff ff28 	bl	800284c <HAL_CAN_TxMailbox2CompleteCallback>
 80029fc:	e77d      	b.n	80028fa <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029fe:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8002a02:	d002      	beq.n	8002a0a <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a04:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8002a08:	e777      	b.n	80028fa <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f7ff ff21 	bl	8002852 <HAL_CAN_TxMailbox2AbortCallback>
 8002a10:	e773      	b.n	80028fa <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	2208      	movs	r2, #8
 8002a16:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a18:	4628      	mov	r0, r5
 8002a1a:	f7ff ff1b 	bl	8002854 <HAL_CAN_RxFifo0FullCallback>
 8002a1e:	e77d      	b.n	800291c <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a20:	4628      	mov	r0, r5
 8002a22:	f7fe fd03 	bl	800142c <HAL_CAN_RxFifo0MsgPendingCallback>
 8002a26:	e781      	b.n	800292c <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a28:	682b      	ldr	r3, [r5, #0]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a2e:	4628      	mov	r0, r5
 8002a30:	f7ff ff12 	bl	8002858 <HAL_CAN_RxFifo1FullCallback>
 8002a34:	e78b      	b.n	800294e <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a36:	4628      	mov	r0, r5
 8002a38:	f7ff ff0d 	bl	8002856 <HAL_CAN_RxFifo1MsgPendingCallback>
 8002a3c:	e78f      	b.n	800295e <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	2210      	movs	r2, #16
 8002a42:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002a44:	4628      	mov	r0, r5
 8002a46:	f7ff ff08 	bl	800285a <HAL_CAN_SleepCallback>
 8002a4a:	e78e      	b.n	800296a <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	2208      	movs	r2, #8
 8002a50:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7ff ff02 	bl	800285c <HAL_CAN_WakeUpFromRxMsgCallback>
 8002a58:	e78d      	b.n	8002976 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8002a5a:	f1b9 0f10 	cmp.w	r9, #16
 8002a5e:	d10a      	bne.n	8002a76 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a60:	f046 0608 	orr.w	r6, r6, #8
            break;
 8002a64:	e007      	b.n	8002a76 <HAL_CAN_IRQHandler+0x216>
        switch (esrflags & CAN_ESR_LEC)
 8002a66:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8002a6a:	d015      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x238>
 8002a6c:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a70:	bf08      	it	eq
 8002a72:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a76:	682a      	ldr	r2, [r5, #0]
 8002a78:	6993      	ldr	r3, [r2, #24]
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	2204      	movs	r2, #4
 8002a84:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a86:	b956      	cbnz	r6, 8002a9e <HAL_CAN_IRQHandler+0x23e>
}
 8002a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a8c:	f046 0610 	orr.w	r6, r6, #16
            break;
 8002a90:	e7f1      	b.n	8002a76 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a92:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8002a96:	e7ee      	b.n	8002a76 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a98:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8002a9c:	e7eb      	b.n	8002a76 <HAL_CAN_IRQHandler+0x216>
    hcan->ErrorCode |= errorcode;
 8002a9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002aa0:	431e      	orrs	r6, r3
 8002aa2:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f7ff feda 	bl	800285e <HAL_CAN_ErrorCallback>
}
 8002aaa:	e7ed      	b.n	8002a88 <HAL_CAN_IRQHandler+0x228>

08002aac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002aae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	0203      	lsls	r3, r0, #8
 8002ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aba:	0412      	lsls	r2, r2, #16
 8002abc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ac8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_NVIC_SetPriority+0x64>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ada:	f1c3 0c07 	rsb	ip, r3, #7
 8002ade:	f1bc 0f04 	cmp.w	ip, #4
 8002ae2:	bf28      	it	cs
 8002ae4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae8:	f103 0e04 	add.w	lr, r3, #4
 8002aec:	f1be 0f06 	cmp.w	lr, #6
 8002af0:	bf8c      	ite	hi
 8002af2:	3b03      	subhi	r3, #3
 8002af4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af6:	f04f 3eff 	mov.w	lr, #4294967295
 8002afa:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002afe:	ea21 010c 	bic.w	r1, r1, ip
 8002b02:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	fa0e f303 	lsl.w	r3, lr, r3
 8002b08:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	db09      	blt.n	8002b26 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	0109      	lsls	r1, r1, #4
 8002b14:	b2c9      	uxtb	r1, r1
 8002b16:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b1a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b1e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b22:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	f000 000f 	and.w	r0, r0, #15
 8002b2a:	0109      	lsls	r1, r1, #4
 8002b2c:	b2c9      	uxtb	r1, r1
 8002b2e:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <HAL_NVIC_SetPriority+0x68>)
 8002b30:	5419      	strb	r1, [r3, r0]
 8002b32:	e7f6      	b.n	8002b22 <HAL_NVIC_SetPriority+0x52>
 8002b34:	e000ed00 	.word	0xe000ed00
 8002b38:	e000ed14 	.word	0xe000ed14

08002b3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	db08      	blt.n	8002b52 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b40:	0942      	lsrs	r2, r0, #5
 8002b42:	f000 001f 	and.w	r0, r0, #31
 8002b46:	2301      	movs	r3, #1
 8002b48:	fa03 f000 	lsl.w	r0, r3, r0
 8002b4c:	4b01      	ldr	r3, [pc, #4]	; (8002b54 <HAL_NVIC_EnableIRQ+0x18>)
 8002b4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	3801      	subs	r0, #1
 8002b5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b5e:	d20b      	bcs.n	8002b78 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <HAL_SYSTICK_Config+0x24>)
 8002b68:	21f0      	movs	r1, #240	; 0xf0
 8002b6a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6e:	2000      	movs	r0, #0
 8002b70:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	2207      	movs	r2, #7
 8002b74:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b80:	b410      	push	{r4}
 8002b82:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b84:	6803      	ldr	r3, [r0, #0]
 8002b86:	b2d8      	uxtb	r0, r3
 8002b88:	3810      	subs	r0, #16
 8002b8a:	490b      	ldr	r1, [pc, #44]	; (8002bb8 <DMA_CalcBaseAndBitshift+0x38>)
 8002b8c:	fba1 4100 	umull	r4, r1, r1, r0
 8002b90:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b92:	4c0a      	ldr	r4, [pc, #40]	; (8002bbc <DMA_CalcBaseAndBitshift+0x3c>)
 8002b94:	5c61      	ldrb	r1, [r4, r1]
 8002b96:	65d1      	str	r1, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b98:	285f      	cmp	r0, #95	; 0x5f
 8002b9a:	d908      	bls.n	8002bae <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b9c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ba0:	f023 0303 	bic.w	r3, r3, #3
 8002ba4:	1d18      	adds	r0, r3, #4
 8002ba6:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bae:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002bb2:	f020 0003 	bic.w	r0, r0, #3
 8002bb6:	e7f6      	b.n	8002ba6 <DMA_CalcBaseAndBitshift+0x26>
 8002bb8:	aaaaaaab 	.word	0xaaaaaaab
 8002bbc:	08009d60 	.word	0x08009d60

08002bc0 <HAL_DMA_Init>:
{
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7ff fb98 	bl	80022f8 <HAL_GetTick>
  if(hdma == NULL)
 8002bc8:	2c00      	cmp	r4, #0
 8002bca:	f000 808c 	beq.w	8002ce6 <HAL_DMA_Init+0x126>
 8002bce:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	6813      	ldr	r3, [r2, #0]
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f012 0f01 	tst.w	r2, #1
 8002bee:	d00a      	beq.n	8002c06 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf0:	f7ff fb82 	bl	80022f8 <HAL_GetTick>
 8002bf4:	1b43      	subs	r3, r0, r5
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d9f5      	bls.n	8002be6 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bfe:	2003      	movs	r0, #3
 8002c00:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002c04:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8002c06:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c08:	4838      	ldr	r0, [pc, #224]	; (8002cec <HAL_DMA_Init+0x12c>)
 8002c0a:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0c:	6861      	ldr	r1, [r4, #4]
 8002c0e:	68a2      	ldr	r2, [r4, #8]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	68e1      	ldr	r1, [r4, #12]
 8002c14:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c16:	6921      	ldr	r1, [r4, #16]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	6961      	ldr	r1, [r4, #20]
 8002c1c:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1e:	69a1      	ldr	r1, [r4, #24]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	69e1      	ldr	r1, [r4, #28]
 8002c24:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c26:	6a21      	ldr	r1, [r4, #32]
 8002c28:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2a:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c2e:	2904      	cmp	r1, #4
 8002c30:	d021      	beq.n	8002c76 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 8002c32:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002c34:	6821      	ldr	r1, [r4, #0]
 8002c36:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c38:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 8002c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c3e:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d10a      	bne.n	8002c5a <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 8002c44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c46:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c4a:	b133      	cbz	r3, 8002c5a <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c4c:	69a5      	ldr	r5, [r4, #24]
 8002c4e:	bb3d      	cbnz	r5, 8002ca0 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8002c50:	2801      	cmp	r0, #1
 8002c52:	d01f      	beq.n	8002c94 <HAL_DMA_Init+0xd4>
 8002c54:	f030 0002 	bics.w	r0, r0, #2
 8002c58:	d012      	beq.n	8002c80 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 8002c5a:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff ff8f 	bl	8002b80 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c64:	233f      	movs	r3, #63	; 0x3f
 8002c66:	4093      	lsls	r3, r2
 8002c68:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002c74:	e7c6      	b.n	8002c04 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c7a:	4301      	orrs	r1, r0
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	e7d8      	b.n	8002c32 <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002c80:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0e8      	beq.n	8002c5a <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c88:	2340      	movs	r3, #64	; 0x40
 8002c8a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002c92:	e7b7      	b.n	8002c04 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c98:	bf14      	ite	ne
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	e7f1      	b.n	8002c84 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002ca4:	d008      	beq.n	8002cb8 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ca6:	2802      	cmp	r0, #2
 8002ca8:	d9ee      	bls.n	8002c88 <HAL_DMA_Init+0xc8>
 8002caa:	2803      	cmp	r0, #3
 8002cac:	d1d5      	bne.n	8002c5a <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0d1      	beq.n	8002c5a <HAL_DMA_Init+0x9a>
 8002cb6:	e7e7      	b.n	8002c88 <HAL_DMA_Init+0xc8>
    switch (tmp)
 8002cb8:	2803      	cmp	r0, #3
 8002cba:	d8ce      	bhi.n	8002c5a <HAL_DMA_Init+0x9a>
 8002cbc:	a501      	add	r5, pc, #4	; (adr r5, 8002cc4 <HAL_DMA_Init+0x104>)
 8002cbe:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002c89 	.word	0x08002c89
 8002cc8:	08002cd5 	.word	0x08002cd5
 8002ccc:	08002c89 	.word	0x08002c89
 8002cd0:	08002cdb 	.word	0x08002cdb
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8002cd8:	e7eb      	b.n	8002cb2 <HAL_DMA_Init+0xf2>
 8002cda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cde:	bf14      	ite	ne
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	e7e5      	b.n	8002cb2 <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	e78c      	b.n	8002c04 <HAL_DMA_Init+0x44>
 8002cea:	bf00      	nop
 8002cec:	f010803f 	.word	0xf010803f

08002cf0 <HAL_DMA_Start_IT>:
{
 8002cf0:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002cf4:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8002cf8:	f1bc 0f01 	cmp.w	ip, #1
 8002cfc:	d03f      	beq.n	8002d7e <HAL_DMA_Start_IT+0x8e>
 8002cfe:	f04f 0c01 	mov.w	ip, #1
 8002d02:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d06:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 8002d0a:	fa5f fc8c 	uxtb.w	ip, ip
 8002d0e:	f1bc 0f01 	cmp.w	ip, #1
 8002d12:	d005      	beq.n	8002d20 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 8002d14:	2300      	movs	r3, #0
 8002d16:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002d1a:	2002      	movs	r0, #2
}
 8002d1c:	bc70      	pop	{r4, r5, r6}
 8002d1e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d20:	2502      	movs	r5, #2
 8002d22:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d26:	2500      	movs	r5, #0
 8002d28:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d2a:	6806      	ldr	r6, [r0, #0]
 8002d2c:	6835      	ldr	r5, [r6, #0]
 8002d2e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002d32:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8002d34:	6805      	ldr	r5, [r0, #0]
 8002d36:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d38:	6883      	ldr	r3, [r0, #8]
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d01a      	beq.n	8002d74 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8002d3e:	6803      	ldr	r3, [r0, #0]
 8002d40:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d46:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002d48:	233f      	movs	r3, #63	; 0x3f
 8002d4a:	4093      	lsls	r3, r2
 8002d4c:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d4e:	6802      	ldr	r2, [r0, #0]
 8002d50:	6813      	ldr	r3, [r2, #0]
 8002d52:	f043 0316 	orr.w	r3, r3, #22
 8002d56:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002d58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d5a:	b123      	cbz	r3, 8002d66 <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d5c:	6802      	ldr	r2, [r0, #0]
 8002d5e:	6813      	ldr	r3, [r2, #0]
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002d66:	6802      	ldr	r2, [r0, #0]
 8002d68:	6813      	ldr	r3, [r2, #0]
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d70:	2000      	movs	r0, #0
 8002d72:	e7d3      	b.n	8002d1c <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 8002d74:	6803      	ldr	r3, [r0, #0]
 8002d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	60d9      	str	r1, [r3, #12]
 8002d7c:	e7e3      	b.n	8002d46 <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8002d7e:	2002      	movs	r0, #2
 8002d80:	e7cc      	b.n	8002d1c <HAL_DMA_Start_IT+0x2c>

08002d82 <HAL_DMA_Abort>:
{
 8002d82:	b570      	push	{r4, r5, r6, lr}
 8002d84:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d86:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff fab6 	bl	80022f8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d006      	beq.n	8002da4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002da0:	2001      	movs	r0, #1
}
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	f023 0316 	bic.w	r3, r3, #22
 8002dae:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6953      	ldr	r3, [r2, #20]
 8002db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dbc:	b1e3      	cbz	r3, 8002df8 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	f023 0308 	bic.w	r3, r3, #8
 8002dc6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f013 0f01 	tst.w	r3, #1
 8002dda:	d011      	beq.n	8002e00 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ddc:	f7ff fa8c 	bl	80022f8 <HAL_GetTick>
 8002de0:	1b43      	subs	r3, r0, r5
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d9f5      	bls.n	8002dd2 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de6:	2320      	movs	r3, #32
 8002de8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
 8002dec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002df0:	2300      	movs	r3, #0
 8002df2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002df6:	e7d4      	b.n	8002da2 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1df      	bne.n	8002dbe <HAL_DMA_Abort+0x3c>
 8002dfe:	e7e3      	b.n	8002dc8 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e02:	233f      	movs	r3, #63	; 0x3f
 8002e04:	4093      	lsls	r3, r2
 8002e06:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8002e14:	e7c5      	b.n	8002da2 <HAL_DMA_Abort+0x20>

08002e16 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e16:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d003      	beq.n	8002e28 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
 8002e26:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e28:	2305      	movs	r3, #5
 8002e2a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002e2e:	6802      	ldr	r2, [r0, #0]
 8002e30:	6813      	ldr	r3, [r2, #0]
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002e38:	2000      	movs	r0, #0
}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_DMA_IRQHandler>:
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e46:	4b72      	ldr	r3, [pc, #456]	; (8003010 <HAL_DMA_IRQHandler+0x1d4>)
 8002e48:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002e4c:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002e50:	2308      	movs	r3, #8
 8002e52:	4093      	lsls	r3, r2
 8002e54:	422b      	tst	r3, r5
 8002e56:	d010      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e58:	6803      	ldr	r3, [r0, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	f012 0f04 	tst.w	r2, #4
 8002e60:	d00b      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f022 0204 	bic.w	r2, r2, #4
 8002e68:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e6a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e72:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	4093      	lsls	r3, r2
 8002e80:	422b      	tst	r3, r5
 8002e82:	d009      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e84:	6822      	ldr	r2, [r4, #0]
 8002e86:	6952      	ldr	r2, [r2, #20]
 8002e88:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e8c:	d004      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e8e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	4093      	lsls	r3, r2
 8002e9e:	422b      	tst	r3, r5
 8002ea0:	d009      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	f012 0f02 	tst.w	r2, #2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002eb8:	2310      	movs	r3, #16
 8002eba:	4093      	lsls	r3, r2
 8002ebc:	422b      	tst	r3, r5
 8002ebe:	d024      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f012 0f08 	tst.w	r2, #8
 8002ec8:	d01f      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002eca:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002edc:	d104      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 8002ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ee0:	b19b      	cbz	r3, 8002f0a <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4798      	blx	r3
 8002ee6:	e010      	b.n	8002f0a <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ee8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002eea:	b173      	cbz	r3, 8002f0a <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8002eec:	4620      	mov	r0, r4
 8002eee:	4798      	blx	r3
 8002ef0:	e00b      	b.n	8002f0a <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002ef8:	d103      	bne.n	8002f02 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	f022 0208 	bic.w	r2, r2, #8
 8002f00:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f04:	b10b      	cbz	r3, 8002f0a <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8002f06:	4620      	mov	r0, r4
 8002f08:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	4093      	lsls	r3, r2
 8002f10:	422b      	tst	r3, r5
 8002f12:	d055      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f012 0f10 	tst.w	r2, #16
 8002f1c:	d050      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f1e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f20:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d00e      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002f32:	d033      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002f3a:	d12a      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8002f3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03e      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 8002f42:	4620      	mov	r0, r4
 8002f44:	4798      	blx	r3
 8002f46:	e03b      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	f023 0316 	bic.w	r3, r3, #22
 8002f50:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	6953      	ldr	r3, [r2, #20]
 8002f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f5a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f5e:	b1a3      	cbz	r3, 8002f8a <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	f023 0308 	bic.w	r3, r3, #8
 8002f68:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f6c:	233f      	movs	r3, #63	; 0x3f
 8002f6e:	4093      	lsls	r3, r2
 8002f70:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002f7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d043      	beq.n	800300c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002f84:	4620      	mov	r0, r4
 8002f86:	4798      	blx	r3
 8002f88:	e040      	b.n	800300c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e7      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x124>
 8002f90:	e7eb      	b.n	8002f6a <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8002f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f94:	b1a3      	cbz	r3, 8002fc0 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8002f96:	4620      	mov	r0, r4
 8002f98:	4798      	blx	r3
 8002f9a:	e011      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002fa2:	d109      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f022 0210 	bic.w	r2, r2, #16
 8002faa:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fba:	b10b      	cbz	r3, 8002fc0 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fc2:	b31b      	cbz	r3, 800300c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fc6:	f013 0f01 	tst.w	r3, #1
 8002fca:	d01b      	beq.n	8003004 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_DMA_IRQHandler+0x1d8>)
 8002fce:	fba3 3606 	umull	r3, r6, r3, r6
 8002fd2:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fd4:	2305      	movs	r3, #5
 8002fd6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002fda:	6822      	ldr	r2, [r4, #0]
 8002fdc:	6813      	ldr	r3, [r2, #0]
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002fe4:	9b01      	ldr	r3, [sp, #4]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	42b3      	cmp	r3, r6
 8002fec:	d804      	bhi.n	8002ff8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f013 0f01 	tst.w	r3, #1
 8002ff6:	d1f5      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002ffe:	2300      	movs	r3, #0
 8003000:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8003004:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003006:	b10b      	cbz	r3, 800300c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003008:	4620      	mov	r0, r4
 800300a:	4798      	blx	r3
}
 800300c:	b003      	add	sp, #12
 800300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003010:	20000060 	.word	0x20000060
 8003014:	1b4e81b5 	.word	0x1b4e81b5

08003018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301c:	b083      	sub	sp, #12
 800301e:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003020:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	4d7b      	ldr	r5, [pc, #492]	; (8003210 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003024:	4c7b      	ldr	r4, [pc, #492]	; (8003214 <HAL_GPIO_Init+0x1fc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003026:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800321c <HAL_GPIO_Init+0x204>
 800302a:	e04d      	b.n	80030c8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800302c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800302e:	f04f 0903 	mov.w	r9, #3
 8003032:	fa09 f902 	lsl.w	r9, r9, r2
 8003036:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303a:	68cf      	ldr	r7, [r1, #12]
 800303c:	4097      	lsls	r7, r2
 800303e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003042:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003044:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003046:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304a:	684f      	ldr	r7, [r1, #4]
 800304c:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8003050:	409f      	lsls	r7, r3
 8003052:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003056:	6047      	str	r7, [r0, #4]
 8003058:	e046      	b.n	80030e8 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800305a:	f04f 0e00 	mov.w	lr, #0
 800305e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003062:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003066:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->IMR;
 800306a:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800306c:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003070:	684e      	ldr	r6, [r1, #4]
 8003072:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003076:	bf0c      	ite	eq
 8003078:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 800307c:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8003080:	6027      	str	r7, [r4, #0]

        temp = EXTI->EMR;
 8003082:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003084:	684e      	ldr	r6, [r1, #4]
 8003086:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800308a:	bf0c      	ite	eq
 800308c:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8003090:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8003094:	6067      	str	r7, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003098:	684e      	ldr	r6, [r1, #4]
 800309a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800309e:	bf0c      	ite	eq
 80030a0:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 80030a4:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 80030a8:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 80030aa:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	684e      	ldr	r6, [r1, #4]
 80030ae:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80030b2:	bf0c      	ite	eq
 80030b4:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 80030b8:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 80030bc:	60e7      	str	r7, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030be:	3301      	adds	r3, #1
 80030c0:	3202      	adds	r2, #2
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	f000 80a1 	beq.w	800320a <HAL_GPIO_Init+0x1f2>
    ioposition = 0x01U << position;
 80030c8:	f04f 0e01 	mov.w	lr, #1
 80030cc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d0:	680f      	ldr	r7, [r1, #0]
 80030d2:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 80030d6:	ea3e 0607 	bics.w	r6, lr, r7
 80030da:	d1f0      	bne.n	80030be <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030dc:	684f      	ldr	r7, [r1, #4]
 80030de:	f007 0703 	and.w	r7, r7, #3
 80030e2:	3f01      	subs	r7, #1
 80030e4:	2f01      	cmp	r7, #1
 80030e6:	d9a1      	bls.n	800302c <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e8:	684f      	ldr	r7, [r1, #4]
 80030ea:	f007 0703 	and.w	r7, r7, #3
 80030ee:	2f03      	cmp	r7, #3
 80030f0:	d027      	beq.n	8003142 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 80030f2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f4:	f04f 0e03 	mov.w	lr, #3
 80030f8:	fa0e fe02 	lsl.w	lr, lr, r2
 80030fc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003100:	688f      	ldr	r7, [r1, #8]
 8003102:	4097      	lsls	r7, r2
 8003104:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8003108:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310a:	684f      	ldr	r7, [r1, #4]
 800310c:	f007 0703 	and.w	r7, r7, #3
 8003110:	2f02      	cmp	r7, #2
 8003112:	d116      	bne.n	8003142 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8003114:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003118:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800311c:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003120:	f003 0907 	and.w	r9, r3, #7
 8003124:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003128:	f04f 0a0f 	mov.w	sl, #15
 800312c:	fa0a fa09 	lsl.w	sl, sl, r9
 8003130:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003134:	690f      	ldr	r7, [r1, #16]
 8003136:	fa07 f709 	lsl.w	r7, r7, r9
 800313a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 800313e:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8003142:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003144:	f04f 0e03 	mov.w	lr, #3
 8003148:	fa0e fe02 	lsl.w	lr, lr, r2
 800314c:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003150:	684f      	ldr	r7, [r1, #4]
 8003152:	f007 0703 	and.w	r7, r7, #3
 8003156:	4097      	lsls	r7, r2
 8003158:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 800315c:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800315e:	684f      	ldr	r7, [r1, #4]
 8003160:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8003164:	d0ab      	beq.n	80030be <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2700      	movs	r7, #0
 8003168:	9701      	str	r7, [sp, #4]
 800316a:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 800316c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8003170:	646f      	str	r7, [r5, #68]	; 0x44
 8003172:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8003174:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8003178:	9701      	str	r7, [sp, #4]
 800317a:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800317c:	f023 0703 	bic.w	r7, r3, #3
 8003180:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003184:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8003188:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800318c:	f003 0e03 	and.w	lr, r3, #3
 8003190:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8003194:	f04f 0e0f 	mov.w	lr, #15
 8003198:	fa0e fe0b 	lsl.w	lr, lr, fp
 800319c:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a0:	4e1d      	ldr	r6, [pc, #116]	; (8003218 <HAL_GPIO_Init+0x200>)
 80031a2:	42b0      	cmp	r0, r6
 80031a4:	f43f af59 	beq.w	800305a <HAL_GPIO_Init+0x42>
 80031a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80031ac:	42b0      	cmp	r0, r6
 80031ae:	d01a      	beq.n	80031e6 <HAL_GPIO_Init+0x1ce>
 80031b0:	4540      	cmp	r0, r8
 80031b2:	d01b      	beq.n	80031ec <HAL_GPIO_Init+0x1d4>
 80031b4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80031b8:	42b0      	cmp	r0, r6
 80031ba:	d01a      	beq.n	80031f2 <HAL_GPIO_Init+0x1da>
 80031bc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80031c0:	42b0      	cmp	r0, r6
 80031c2:	d019      	beq.n	80031f8 <HAL_GPIO_Init+0x1e0>
 80031c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80031c8:	42b0      	cmp	r0, r6
 80031ca:	d018      	beq.n	80031fe <HAL_GPIO_Init+0x1e6>
 80031cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80031d0:	42b0      	cmp	r0, r6
 80031d2:	d017      	beq.n	8003204 <HAL_GPIO_Init+0x1ec>
 80031d4:	f8df e048 	ldr.w	lr, [pc, #72]	; 8003220 <HAL_GPIO_Init+0x208>
 80031d8:	4570      	cmp	r0, lr
 80031da:	bf0c      	ite	eq
 80031dc:	f04f 0e07 	moveq.w	lr, #7
 80031e0:	f04f 0e08 	movne.w	lr, #8
 80031e4:	e73b      	b.n	800305e <HAL_GPIO_Init+0x46>
 80031e6:	f04f 0e01 	mov.w	lr, #1
 80031ea:	e738      	b.n	800305e <HAL_GPIO_Init+0x46>
 80031ec:	f04f 0e02 	mov.w	lr, #2
 80031f0:	e735      	b.n	800305e <HAL_GPIO_Init+0x46>
 80031f2:	f04f 0e03 	mov.w	lr, #3
 80031f6:	e732      	b.n	800305e <HAL_GPIO_Init+0x46>
 80031f8:	f04f 0e04 	mov.w	lr, #4
 80031fc:	e72f      	b.n	800305e <HAL_GPIO_Init+0x46>
 80031fe:	f04f 0e05 	mov.w	lr, #5
 8003202:	e72c      	b.n	800305e <HAL_GPIO_Init+0x46>
 8003204:	f04f 0e06 	mov.w	lr, #6
 8003208:	e729      	b.n	800305e <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 800320a:	b003      	add	sp, #12
 800320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	40013c00 	.word	0x40013c00
 8003218:	40020000 	.word	0x40020000
 800321c:	40020800 	.word	0x40020800
 8003220:	40021c00 	.word	0x40021c00

08003224 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	b10a      	cbz	r2, 800322a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003226:	6181      	str	r1, [r0, #24]
 8003228:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800322a:	0409      	lsls	r1, r1, #16
 800322c:	6181      	str	r1, [r0, #24]
  }
}
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003230:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003232:	ea01 0203 	and.w	r2, r1, r3
 8003236:	ea21 0103 	bic.w	r1, r1, r3
 800323a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800323e:	6181      	str	r1, [r0, #24]
}
 8003240:	4770      	bx	lr
	...

08003244 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003244:	2800      	cmp	r0, #0
 8003246:	f000 81e1 	beq.w	800360c <HAL_RCC_OscConfig+0x3c8>
{
 800324a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	f013 0f01 	tst.w	r3, #1
 8003258:	d03b      	beq.n	80032d2 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325a:	4b9f      	ldr	r3, [pc, #636]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d02c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003266:	4b9c      	ldr	r3, [pc, #624]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800326e:	2b08      	cmp	r3, #8
 8003270:	d021      	beq.n	80032b6 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003272:	6863      	ldr	r3, [r4, #4]
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d04f      	beq.n	800331a <HAL_RCC_OscConfig+0xd6>
 800327a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327e:	d052      	beq.n	8003326 <HAL_RCC_OscConfig+0xe2>
 8003280:	4b95      	ldr	r3, [pc, #596]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003290:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003292:	6863      	ldr	r3, [r4, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d050      	beq.n	800333a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7ff f82e 	bl	80022f8 <HAL_GetTick>
 800329c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4e8e      	ldr	r6, [pc, #568]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80032a0:	6833      	ldr	r3, [r6, #0]
 80032a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032a6:	d114      	bne.n	80032d2 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f826 	bl	80022f8 <HAL_GetTick>
 80032ac:	1b40      	subs	r0, r0, r5
 80032ae:	2864      	cmp	r0, #100	; 0x64
 80032b0:	d9f6      	bls.n	80032a0 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80032b2:	2003      	movs	r0, #3
 80032b4:	e1b1      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80032be:	d0d8      	beq.n	8003272 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	4b85      	ldr	r3, [pc, #532]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_OscConfig+0x8e>
 80032ca:	6863      	ldr	r3, [r4, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 819f 	beq.w	8003610 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	f013 0f02 	tst.w	r3, #2
 80032d8:	d054      	beq.n	8003384 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032da:	4b7f      	ldr	r3, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f013 0f0c 	tst.w	r3, #12
 80032e2:	d03e      	beq.n	8003362 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e4:	4b7c      	ldr	r3, [pc, #496]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d033      	beq.n	8003358 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f0:	68e3      	ldr	r3, [r4, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d068      	beq.n	80033c8 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f6:	4b79      	ldr	r3, [pc, #484]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fffc 	bl	80022f8 <HAL_GetTick>
 8003300:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003302:	4e75      	ldr	r6, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003304:	6833      	ldr	r3, [r6, #0]
 8003306:	f013 0f02 	tst.w	r3, #2
 800330a:	d154      	bne.n	80033b6 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330c:	f7fe fff4 	bl	80022f8 <HAL_GetTick>
 8003310:	1b40      	subs	r0, r0, r5
 8003312:	2802      	cmp	r0, #2
 8003314:	d9f6      	bls.n	8003304 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8003316:	2003      	movs	r0, #3
 8003318:	e17f      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331a:	4a6f      	ldr	r2, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e7b5      	b.n	8003292 <HAL_RCC_OscConfig+0x4e>
 8003326:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e7ab      	b.n	8003292 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800333a:	f7fe ffdd 	bl	80022f8 <HAL_GetTick>
 800333e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003340:	4e65      	ldr	r6, [pc, #404]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003342:	6833      	ldr	r3, [r6, #0]
 8003344:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003348:	d0c3      	beq.n	80032d2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334a:	f7fe ffd5 	bl	80022f8 <HAL_GetTick>
 800334e:	1b40      	subs	r0, r0, r5
 8003350:	2864      	cmp	r0, #100	; 0x64
 8003352:	d9f6      	bls.n	8003342 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8003354:	2003      	movs	r0, #3
 8003356:	e160      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003358:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003360:	d1c6      	bne.n	80032f0 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f013 0f02 	tst.w	r3, #2
 800336a:	d003      	beq.n	8003374 <HAL_RCC_OscConfig+0x130>
 800336c:	68e3      	ldr	r3, [r4, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 8150 	bne.w	8003614 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	6921      	ldr	r1, [r4, #16]
 800337a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800337e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003382:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	f013 0f08 	tst.w	r3, #8
 800338a:	d042      	beq.n	8003412 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800338c:	6963      	ldr	r3, [r4, #20]
 800338e:	b36b      	cbz	r3, 80033ec <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003390:	4b52      	ldr	r3, [pc, #328]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 8003392:	2201      	movs	r2, #1
 8003394:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe ffae 	bl	80022f8 <HAL_GetTick>
 800339c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4e4e      	ldr	r6, [pc, #312]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80033a0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80033a2:	f013 0f02 	tst.w	r3, #2
 80033a6:	d134      	bne.n	8003412 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fe ffa6 	bl	80022f8 <HAL_GetTick>
 80033ac:	1b40      	subs	r0, r0, r5
 80033ae:	2802      	cmp	r0, #2
 80033b0:	d9f6      	bls.n	80033a0 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80033b2:	2003      	movs	r0, #3
 80033b4:	e131      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	6921      	ldr	r1, [r4, #16]
 80033bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80033c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e7dd      	b.n	8003384 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80033c8:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033ce:	f7fe ff93 	bl	80022f8 <HAL_GetTick>
 80033d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d4:	4e40      	ldr	r6, [pc, #256]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80033d6:	6833      	ldr	r3, [r6, #0]
 80033d8:	f013 0f02 	tst.w	r3, #2
 80033dc:	d0d2      	beq.n	8003384 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033de:	f7fe ff8b 	bl	80022f8 <HAL_GetTick>
 80033e2:	1b40      	subs	r0, r0, r5
 80033e4:	2802      	cmp	r0, #2
 80033e6:	d9f6      	bls.n	80033d6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80033e8:	2003      	movs	r0, #3
 80033ea:	e116      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x298>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fe ff80 	bl	80022f8 <HAL_GetTick>
 80033f8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fa:	4e37      	ldr	r6, [pc, #220]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80033fc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80033fe:	f013 0f02 	tst.w	r3, #2
 8003402:	d006      	beq.n	8003412 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe ff78 	bl	80022f8 <HAL_GetTick>
 8003408:	1b40      	subs	r0, r0, r5
 800340a:	2802      	cmp	r0, #2
 800340c:	d9f6      	bls.n	80033fc <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 800340e:	2003      	movs	r0, #3
 8003410:	e103      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f013 0f04 	tst.w	r3, #4
 8003418:	d076      	beq.n	8003508 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003422:	d133      	bne.n	800348c <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	2300      	movs	r3, #0
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 800342a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800343c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x29c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003446:	d023      	beq.n	8003490 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	68a3      	ldr	r3, [r4, #8]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d034      	beq.n	80034b8 <HAL_RCC_OscConfig+0x274>
 800344e:	2b05      	cmp	r3, #5
 8003450:	d038      	beq.n	80034c4 <HAL_RCC_OscConfig+0x280>
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 8003454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	671a      	str	r2, [r3, #112]	; 0x70
 800345c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003464:	68a3      	ldr	r3, [r4, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fe ff45 	bl	80022f8 <HAL_GetTick>
 800346e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4f19      	ldr	r7, [pc, #100]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003478:	f013 0f02 	tst.w	r3, #2
 800347c:	d143      	bne.n	8003506 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe ff3b 	bl	80022f8 <HAL_GetTick>
 8003482:	1b80      	subs	r0, r0, r6
 8003484:	4540      	cmp	r0, r8
 8003486:	d9f6      	bls.n	8003476 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8003488:	2003      	movs	r0, #3
 800348a:	e0c6      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 800348c:	2500      	movs	r5, #0
 800348e:	e7d6      	b.n	800343e <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <HAL_RCC_OscConfig+0x29c>)
 8003492:	6813      	ldr	r3, [r2, #0]
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800349a:	f7fe ff2d 	bl	80022f8 <HAL_GetTick>
 800349e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4f0f      	ldr	r7, [pc, #60]	; (80034e0 <HAL_RCC_OscConfig+0x29c>)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034a8:	d1ce      	bne.n	8003448 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7fe ff25 	bl	80022f8 <HAL_GetTick>
 80034ae:	1b80      	subs	r0, r0, r6
 80034b0:	2802      	cmp	r0, #2
 80034b2:	d9f6      	bls.n	80034a2 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80034b4:	2003      	movs	r0, #3
 80034b6:	e0b0      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80034ba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6713      	str	r3, [r2, #112]	; 0x70
 80034c2:	e7cf      	b.n	8003464 <HAL_RCC_OscConfig+0x220>
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_RCC_OscConfig+0x294>)
 80034c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034c8:	f042 0204 	orr.w	r2, r2, #4
 80034cc:	671a      	str	r2, [r3, #112]	; 0x70
 80034ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	671a      	str	r2, [r3, #112]	; 0x70
 80034d6:	e7c5      	b.n	8003464 <HAL_RCC_OscConfig+0x220>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	42470000 	.word	0x42470000
 80034e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe ff08 	bl	80022f8 <HAL_GetTick>
 80034e8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	4f52      	ldr	r7, [pc, #328]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f2:	f013 0f02 	tst.w	r3, #2
 80034f6:	d006      	beq.n	8003506 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fefe 	bl	80022f8 <HAL_GetTick>
 80034fc:	1b80      	subs	r0, r0, r6
 80034fe:	4540      	cmp	r0, r8
 8003500:	d9f6      	bls.n	80034f0 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8003502:	2003      	movs	r0, #3
 8003504:	e089      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003506:	b9ed      	cbnz	r5, 8003544 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003508:	69a3      	ldr	r3, [r4, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8084 	beq.w	8003618 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003510:	4a48      	ldr	r2, [pc, #288]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
 8003512:	6892      	ldr	r2, [r2, #8]
 8003514:	f002 020c 	and.w	r2, r2, #12
 8003518:	2a08      	cmp	r2, #8
 800351a:	d051      	beq.n	80035c0 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351c:	2b02      	cmp	r3, #2
 800351e:	d017      	beq.n	8003550 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003520:	4b45      	ldr	r3, [pc, #276]	; (8003638 <HAL_RCC_OscConfig+0x3f4>)
 8003522:	2200      	movs	r2, #0
 8003524:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7fe fee7 	bl	80022f8 <HAL_GetTick>
 800352a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352c:	4d41      	ldr	r5, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
 800352e:	682b      	ldr	r3, [r5, #0]
 8003530:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003534:	d042      	beq.n	80035bc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe fedf 	bl	80022f8 <HAL_GetTick>
 800353a:	1b00      	subs	r0, r0, r4
 800353c:	2802      	cmp	r0, #2
 800353e:	d9f6      	bls.n	800352e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003540:	2003      	movs	r0, #3
 8003542:	e06a      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
 8003546:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	e7db      	b.n	8003508 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8003550:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_OscConfig+0x3f4>)
 8003552:	2200      	movs	r2, #0
 8003554:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003556:	f7fe fecf 	bl	80022f8 <HAL_GetTick>
 800355a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355c:	4e35      	ldr	r6, [pc, #212]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
 800355e:	6833      	ldr	r3, [r6, #0]
 8003560:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003564:	d006      	beq.n	8003574 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003566:	f7fe fec7 	bl	80022f8 <HAL_GetTick>
 800356a:	1b40      	subs	r0, r0, r5
 800356c:	2802      	cmp	r0, #2
 800356e:	d9f6      	bls.n	800355e <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8003570:	2003      	movs	r0, #3
 8003572:	e052      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003574:	69e3      	ldr	r3, [r4, #28]
 8003576:	6a22      	ldr	r2, [r4, #32]
 8003578:	4313      	orrs	r3, r2
 800357a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800357c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003582:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003586:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003588:	0852      	lsrs	r2, r2, #1
 800358a:	3a01      	subs	r2, #1
 800358c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
 8003592:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <HAL_RCC_OscConfig+0x3f4>)
 8003596:	2201      	movs	r2, #1
 8003598:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800359a:	f7fe fead 	bl	80022f8 <HAL_GetTick>
 800359e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	4d24      	ldr	r5, [pc, #144]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
 80035a2:	682b      	ldr	r3, [r5, #0]
 80035a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe fea5 	bl	80022f8 <HAL_GetTick>
 80035ae:	1b00      	subs	r0, r0, r4
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d9f6      	bls.n	80035a2 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80035b4:	2003      	movs	r0, #3
 80035b6:	e030      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80035b8:	2000      	movs	r0, #0
 80035ba:	e02e      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
 80035bc:	2000      	movs	r0, #0
 80035be:	e02c      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d02d      	beq.n	8003620 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x3f0>)
 80035c6:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	69e2      	ldr	r2, [r4, #28]
 80035ce:	4291      	cmp	r1, r2
 80035d0:	d128      	bne.n	8003624 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	6a21      	ldr	r1, [r4, #32]
 80035d8:	428a      	cmp	r2, r1
 80035da:	d125      	bne.n	8003628 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035de:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80035e2:	401a      	ands	r2, r3
 80035e4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80035e8:	d120      	bne.n	800362c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ea:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80035ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80035f8:	d11a      	bne.n	8003630 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8003604:	bf14      	ite	ne
 8003606:	2001      	movne	r0, #1
 8003608:	2000      	moveq	r0, #0
 800360a:	e006      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
}
 800360e:	4770      	bx	lr
        return HAL_ERROR;
 8003610:	2001      	movs	r0, #1
 8003612:	e002      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8003614:	2001      	movs	r0, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8003618:	2000      	movs	r0, #0
}
 800361a:	b002      	add	sp, #8
 800361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003620:	2001      	movs	r0, #1
 8003622:	e7fa      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8003624:	2001      	movs	r0, #1
 8003626:	e7f8      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
 8003628:	2001      	movs	r0, #1
 800362a:	e7f6      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
 800362c:	2001      	movs	r0, #1
 800362e:	e7f4      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
 8003630:	2001      	movs	r0, #1
 8003632:	e7f2      	b.n	800361a <HAL_RCC_OscConfig+0x3d6>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d057      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0xbe>
 800364a:	2b08      	cmp	r3, #8
 800364c:	d157      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800365c:	d02a      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003666:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800366a:	ebb1 000c 	subs.w	r0, r1, ip
 800366e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003672:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003676:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800367a:	0181      	lsls	r1, r0, #6
 800367c:	1a09      	subs	r1, r1, r0
 800367e:	eb63 030e 	sbc.w	r3, r3, lr
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003688:	00c9      	lsls	r1, r1, #3
 800368a:	eb11 0c0c 	adds.w	ip, r1, ip
 800368e:	f143 0300 	adc.w	r3, r3, #0
 8003692:	0259      	lsls	r1, r3, #9
 8003694:	2300      	movs	r3, #0
 8003696:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800369a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800369e:	f7fd fad3 	bl	8000c48 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80036aa:	3301      	adds	r3, #1
 80036ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80036ae:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80036b2:	e025      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80036bc:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80036c0:	ebb1 000c 	subs.w	r0, r1, ip
 80036c4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80036c8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80036cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036d0:	0181      	lsls	r1, r0, #6
 80036d2:	1a09      	subs	r1, r1, r0
 80036d4:	eb63 030e 	sbc.w	r3, r3, lr
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036de:	00c9      	lsls	r1, r1, #3
 80036e0:	eb11 0c0c 	adds.w	ip, r1, ip
 80036e4:	f143 0300 	adc.w	r3, r3, #0
 80036e8:	0299      	lsls	r1, r3, #10
 80036ea:	2300      	movs	r3, #0
 80036ec:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80036f0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80036f4:	f7fd faa8 	bl	8000c48 <__aeabi_uldivmod>
 80036f8:	e7d3      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fa:	4803      	ldr	r0, [pc, #12]	; (8003708 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036fc:	e000      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 80036fe:	4803      	ldr	r0, [pc, #12]	; (800370c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003700:	bd08      	pop	{r3, pc}
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	007a1200 	.word	0x007a1200
 800370c:	00f42400 	.word	0x00f42400

08003710 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003710:	2800      	cmp	r0, #0
 8003712:	f000 809d 	beq.w	8003850 <HAL_RCC_ClockConfig+0x140>
{
 8003716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371a:	460d      	mov	r5, r1
 800371c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800371e:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x150>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	428b      	cmp	r3, r1
 8003728:	d208      	bcs.n	800373c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	b2cb      	uxtb	r3, r1
 800372c:	4a4c      	ldr	r2, [pc, #304]	; (8003860 <HAL_RCC_ClockConfig+0x150>)
 800372e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	428b      	cmp	r3, r1
 8003738:	f040 808c 	bne.w	8003854 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f013 0f02 	tst.w	r3, #2
 8003742:	d017      	beq.n	8003774 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	f013 0f04 	tst.w	r3, #4
 8003748:	d004      	beq.n	8003754 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800374a:	4a46      	ldr	r2, [pc, #280]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 800374c:	6893      	ldr	r3, [r2, #8]
 800374e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003752:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	f013 0f08 	tst.w	r3, #8
 800375a:	d004      	beq.n	8003766 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4a41      	ldr	r2, [pc, #260]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 800375e:	6893      	ldr	r3, [r2, #8]
 8003760:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003764:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003766:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 8003768:	6893      	ldr	r3, [r2, #8]
 800376a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376e:	68a1      	ldr	r1, [r4, #8]
 8003770:	430b      	orrs	r3, r1
 8003772:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f013 0f01 	tst.w	r3, #1
 800377a:	d032      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377c:	6862      	ldr	r2, [r4, #4]
 800377e:	2a01      	cmp	r2, #1
 8003780:	d021      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003782:	1e93      	subs	r3, r2, #2
 8003784:	2b01      	cmp	r3, #1
 8003786:	d925      	bls.n	80037d4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	4b36      	ldr	r3, [pc, #216]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f013 0f02 	tst.w	r3, #2
 8003790:	d062      	beq.n	8003858 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4934      	ldr	r1, [pc, #208]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 8003794:	688b      	ldr	r3, [r1, #8]
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800379e:	f7fe fdab 	bl	80022f8 <HAL_GetTick>
 80037a2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a4:	4f2f      	ldr	r7, [pc, #188]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	6862      	ldr	r2, [r4, #4]
 80037b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037b6:	d014      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fe fd9e 	bl	80022f8 <HAL_GetTick>
 80037bc:	1b80      	subs	r0, r0, r6
 80037be:	4540      	cmp	r0, r8
 80037c0:	d9f3      	bls.n	80037aa <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80037c2:	2003      	movs	r0, #3
 80037c4:	e042      	b.n	800384c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037ce:	d1e0      	bne.n	8003792 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80037d0:	2001      	movs	r0, #1
 80037d2:	e03b      	b.n	800384c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d4:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037dc:	d1d9      	bne.n	8003792 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80037de:	2001      	movs	r0, #1
 80037e0:	e034      	b.n	800384c <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e2:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_RCC_ClockConfig+0x150>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	42ab      	cmp	r3, r5
 80037ec:	d907      	bls.n	80037fe <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	b2ea      	uxtb	r2, r5
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_ClockConfig+0x150>)
 80037f2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	42ab      	cmp	r3, r5
 80037fc:	d12e      	bne.n	800385c <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	f013 0f04 	tst.w	r3, #4
 8003804:	d006      	beq.n	8003814 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003806:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 8003808:	6893      	ldr	r3, [r2, #8]
 800380a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800380e:	68e1      	ldr	r1, [r4, #12]
 8003810:	430b      	orrs	r3, r1
 8003812:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f013 0f08 	tst.w	r3, #8
 800381a:	d007      	beq.n	800382c <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381c:	4a11      	ldr	r2, [pc, #68]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 800381e:	6893      	ldr	r3, [r2, #8]
 8003820:	6921      	ldr	r1, [r4, #16]
 8003822:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003826:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800382a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382c:	f7ff ff06 	bl	800363c <HAL_RCC_GetSysClockFreq>
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <HAL_RCC_ClockConfig+0x154>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003838:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_RCC_ClockConfig+0x158>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	40d8      	lsrs	r0, r3
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_ClockConfig+0x15c>)
 8003840:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x160>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	f7fe fd0b 	bl	8002260 <HAL_InitTick>
  return HAL_OK;
 800384a:	2000      	movs	r0, #0
}
 800384c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003850:	2001      	movs	r0, #1
}
 8003852:	4770      	bx	lr
      return HAL_ERROR;
 8003854:	2001      	movs	r0, #1
 8003856:	e7f9      	b.n	800384c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8003858:	2001      	movs	r0, #1
 800385a:	e7f7      	b.n	800384c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 800385c:	2001      	movs	r0, #1
 800385e:	e7f5      	b.n	800384c <HAL_RCC_ClockConfig+0x13c>
 8003860:	40023c00 	.word	0x40023c00
 8003864:	40023800 	.word	0x40023800
 8003868:	08009d48 	.word	0x08009d48
 800386c:	20000060 	.word	0x20000060
 8003870:	20000068 	.word	0x20000068

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800387c:	4a03      	ldr	r2, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x18>)
 800387e:	5cd3      	ldrb	r3, [r2, r3]
 8003880:	4a03      	ldr	r2, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003882:	6810      	ldr	r0, [r2, #0]
}
 8003884:	40d8      	lsrs	r0, r3
 8003886:	4770      	bx	lr
 8003888:	40023800 	.word	0x40023800
 800388c:	08009d58 	.word	0x08009d58
 8003890:	20000060 	.word	0x20000060

08003894 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800389c:	4a03      	ldr	r2, [pc, #12]	; (80038ac <HAL_RCC_GetPCLK2Freq+0x18>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	4a03      	ldr	r2, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80038a2:	6810      	ldr	r0, [r2, #0]
}
 80038a4:	40d8      	lsrs	r0, r3
 80038a6:	4770      	bx	lr
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08009d58 	.word	0x08009d58
 80038b0:	20000060 	.word	0x20000060

080038b4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d137      	bne.n	800392e <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c4:	6802      	ldr	r2, [r0, #0]
 80038c6:	68d3      	ldr	r3, [r2, #12]
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ce:	6803      	ldr	r3, [r0, #0]
 80038d0:	4a19      	ldr	r2, [pc, #100]	; (8003938 <HAL_TIM_Base_Start_IT+0x84>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d020      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038da:	d01d      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
 80038dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d019      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
 80038e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d015      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
 80038ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d011      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
 80038f4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00d      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
 80038fc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
 8003904:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003908:	4293      	cmp	r3, r2
 800390a:	d005      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003914:	2000      	movs	r0, #0
 8003916:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391e:	2a06      	cmp	r2, #6
 8003920:	d007      	beq.n	8003932 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800392a:	2000      	movs	r0, #0
 800392c:	4770      	bx	lr
    return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
 8003930:	4770      	bx	lr
  return HAL_OK;
 8003932:	2000      	movs	r0, #0
}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000

0800393c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	4770      	bx	lr

08003942 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003942:	4770      	bx	lr

08003944 <HAL_TIM_IRQHandler>:
{
 8003944:	b510      	push	{r4, lr}
 8003946:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003948:	6803      	ldr	r3, [r0, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	f012 0f02 	tst.w	r2, #2
 8003950:	d011      	beq.n	8003976 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	f012 0f02 	tst.w	r2, #2
 8003958:	d00d      	beq.n	8003976 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395a:	f06f 0202 	mvn.w	r2, #2
 800395e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003960:	2301      	movs	r3, #1
 8003962:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003964:	6803      	ldr	r3, [r0, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f013 0f03 	tst.w	r3, #3
 800396c:	d070      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800396e:	f7ff ffe6 	bl	800393e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	2300      	movs	r3, #0
 8003974:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	f012 0f04 	tst.w	r2, #4
 800397e:	d012      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	f012 0f04 	tst.w	r2, #4
 8003986:	d00e      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003988:	f06f 0204 	mvn.w	r2, #4
 800398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800398e:	2302      	movs	r3, #2
 8003990:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f413 7f40 	tst.w	r3, #768	; 0x300
 800399a:	d05f      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff ffce 	bl	800393e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	2300      	movs	r3, #0
 80039a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	f012 0f08 	tst.w	r2, #8
 80039ae:	d012      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	f012 0f08 	tst.w	r2, #8
 80039b6:	d00e      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039b8:	f06f 0208 	mvn.w	r2, #8
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039be:	2304      	movs	r3, #4
 80039c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f013 0f03 	tst.w	r3, #3
 80039ca:	d04e      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff ffb6 	bl	800393e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	2300      	movs	r3, #0
 80039d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	f012 0f10 	tst.w	r2, #16
 80039de:	d012      	beq.n	8003a06 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	f012 0f10 	tst.w	r2, #16
 80039e6:	d00e      	beq.n	8003a06 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039e8:	f06f 0210 	mvn.w	r2, #16
 80039ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ee:	2308      	movs	r3, #8
 80039f0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80039fa:	d03d      	beq.n	8003a78 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff ff9e 	bl	800393e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	2300      	movs	r3, #0
 8003a04:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	f012 0f01 	tst.w	r2, #1
 8003a0e:	d003      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	f012 0f01 	tst.w	r2, #1
 8003a16:	d136      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a28:	d134      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a32:	d003      	beq.n	8003a3c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a3a:	d132      	bne.n	8003aa2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	f012 0f20 	tst.w	r2, #32
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	f012 0f20 	tst.w	r2, #32
 8003a4c:	d130      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x16c>
}
 8003a4e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a50:	f7ff ff74 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7ff ff73 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a5a:	e78a      	b.n	8003972 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f7ff ff6d 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff ff6c 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a68:	e79b      	b.n	80039a2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7ff ff66 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff ff65 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a76:	e7ac      	b.n	80039d2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff ff5f 	bl	800393c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff ff5e 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a84:	e7bd      	b.n	8003a02 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a86:	f06f 0201 	mvn.w	r2, #1
 8003a8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7fd fdb3 	bl	80015f8 <HAL_TIM_PeriodElapsedCallback>
 8003a92:	e7c1      	b.n	8003a18 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 f9cb 	bl	8003e36 <HAL_TIMEx_BreakCallback>
 8003aa0:	e7c3      	b.n	8003a2a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff ff4a 	bl	8003942 <HAL_TIM_TriggerCallback>
 8003aae:	e7c5      	b.n	8003a3c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab0:	f06f 0220 	mvn.w	r2, #32
 8003ab4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f000 f9bc 	bl	8003e34 <HAL_TIMEx_CommutCallback>
}
 8003abc:	e7c7      	b.n	8003a4e <HAL_TIM_IRQHandler+0x10a>
	...

08003ac0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac2:	4a40      	ldr	r2, [pc, #256]	; (8003bc4 <TIM_Base_SetConfig+0x104>)
 8003ac4:	4290      	cmp	r0, r2
 8003ac6:	d05d      	beq.n	8003b84 <TIM_Base_SetConfig+0xc4>
 8003ac8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003acc:	d031      	beq.n	8003b32 <TIM_Base_SetConfig+0x72>
 8003ace:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ad2:	4290      	cmp	r0, r2
 8003ad4:	d051      	beq.n	8003b7a <TIM_Base_SetConfig+0xba>
 8003ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ada:	4290      	cmp	r0, r2
 8003adc:	d06d      	beq.n	8003bba <TIM_Base_SetConfig+0xfa>
 8003ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ae2:	4290      	cmp	r0, r2
 8003ae4:	d064      	beq.n	8003bb0 <TIM_Base_SetConfig+0xf0>
 8003ae6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003aea:	4290      	cmp	r0, r2
 8003aec:	d033      	beq.n	8003b56 <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aee:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003af2:	4290      	cmp	r0, r2
 8003af4:	d021      	beq.n	8003b3a <TIM_Base_SetConfig+0x7a>
 8003af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003afa:	4290      	cmp	r0, r2
 8003afc:	d01d      	beq.n	8003b3a <TIM_Base_SetConfig+0x7a>
 8003afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b02:	4290      	cmp	r0, r2
 8003b04:	d019      	beq.n	8003b3a <TIM_Base_SetConfig+0x7a>
 8003b06:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003b0a:	4290      	cmp	r0, r2
 8003b0c:	d015      	beq.n	8003b3a <TIM_Base_SetConfig+0x7a>
 8003b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b12:	4290      	cmp	r0, r2
 8003b14:	d011      	beq.n	8003b3a <TIM_Base_SetConfig+0x7a>
 8003b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b1a:	4290      	cmp	r0, r2
 8003b1c:	d00d      	beq.n	8003b3a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b22:	694a      	ldr	r2, [r1, #20]
 8003b24:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003b26:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	688b      	ldr	r3, [r1, #8]
 8003b2a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	680b      	ldr	r3, [r1, #0]
 8003b2e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	e03b      	b.n	8003baa <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b36:	684a      	ldr	r2, [r1, #4]
 8003b38:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	68ca      	ldr	r2, [r1, #12]
 8003b40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b46:	694a      	ldr	r2, [r1, #20]
 8003b48:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003b4a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b4c:	688b      	ldr	r3, [r1, #8]
 8003b4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b50:	680b      	ldr	r3, [r1, #0]
 8003b52:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b54:	e029      	b.n	8003baa <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b5a:	684a      	ldr	r2, [r1, #4]
 8003b5c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b62:	68ca      	ldr	r2, [r1, #12]
 8003b64:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b6a:	694a      	ldr	r2, [r1, #20]
 8003b6c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003b6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b70:	688b      	ldr	r3, [r1, #8]
 8003b72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b74:	680b      	ldr	r3, [r1, #0]
 8003b76:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	e015      	b.n	8003ba6 <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b7e:	684a      	ldr	r2, [r1, #4]
 8003b80:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	e7da      	b.n	8003b3a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b88:	684a      	ldr	r2, [r1, #4]
 8003b8a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b90:	68ca      	ldr	r2, [r1, #12]
 8003b92:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b98:	694a      	ldr	r2, [r1, #20]
 8003b9a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003b9c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9e:	688b      	ldr	r3, [r1, #8]
 8003ba0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ba2:	680b      	ldr	r3, [r1, #0]
 8003ba4:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba6:	690b      	ldr	r3, [r1, #16]
 8003ba8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003baa:	2301      	movs	r3, #1
 8003bac:	6143      	str	r3, [r0, #20]
}
 8003bae:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bb4:	684a      	ldr	r2, [r1, #4]
 8003bb6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb8:	e7bf      	b.n	8003b3a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bbe:	684a      	ldr	r2, [r1, #4]
 8003bc0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc2:	e7ba      	b.n	8003b3a <TIM_Base_SetConfig+0x7a>
 8003bc4:	40010000 	.word	0x40010000

08003bc8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003bc8:	b340      	cbz	r0, 8003c1c <HAL_TIM_Base_Init+0x54>
{
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003bce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bd2:	b1f3      	cbz	r3, 8003c12 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bda:	4621      	mov	r1, r4
 8003bdc:	f851 0b04 	ldr.w	r0, [r1], #4
 8003be0:	f7ff ff6e 	bl	8003ac0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003bee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003bf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003bf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003c0e:	2000      	movs	r0, #0
}
 8003c10:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c16:	f7fe f977 	bl	8001f08 <HAL_TIM_Base_MspInit>
 8003c1a:	e7db      	b.n	8003bd4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003c1c:	2001      	movs	r0, #1
}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8003c20:	2800      	cmp	r0, #0
 8003c22:	d053      	beq.n	8003ccc <HAL_TIM_Encoder_Init+0xac>
{
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	460d      	mov	r5, r1
 8003c28:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d047      	beq.n	8003cc2 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c38:	6822      	ldr	r2, [r4, #0]
 8003c3a:	6893      	ldr	r3, [r2, #8]
 8003c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c40:	f023 0307 	bic.w	r3, r3, #7
 8003c44:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c46:	4621      	mov	r1, r4
 8003c48:	f851 0b04 	ldr.w	r0, [r1], #4
 8003c4c:	f7ff ff38 	bl	8003ac0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003c54:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8003c56:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003c58:	682a      	ldr	r2, [r5, #0]
 8003c5a:	4316      	orrs	r6, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c64:	69aa      	ldr	r2, [r5, #24]
 8003c66:	68a9      	ldr	r1, [r5, #8]
 8003c68:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8003c6c:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c6e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
 8003c72:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c76:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c78:	692b      	ldr	r3, [r5, #16]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c80:	68e9      	ldr	r1, [r5, #12]
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6a29      	ldr	r1, [r5, #32]
 8003c86:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003c8a:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c8c:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c90:	6969      	ldr	r1, [r5, #20]
 8003c92:	686f      	ldr	r7, [r5, #4]
 8003c94:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8003c98:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 8003c9a:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003caa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8003cba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003cbe:	2000      	movs	r0, #0
}
 8003cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8003cc6:	f7fe f8c1 	bl	8001e4c <HAL_TIM_Encoder_MspInit>
 8003cca:	e7b2      	b.n	8003c32 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8003ccc:	2001      	movs	r0, #1
}
 8003cce:	4770      	bx	lr

08003cd0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd0:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cd4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd6:	f04f 0c01 	mov.w	ip, #1
 8003cda:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8003cde:	ea23 030c 	bic.w	r3, r3, ip
 8003ce2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ce4:	6a03      	ldr	r3, [r0, #32]
 8003ce6:	408a      	lsls	r2, r1
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	6202      	str	r2, [r0, #32]
}
 8003cec:	4770      	bx	lr

08003cee <HAL_TIM_Encoder_Start>:
{
 8003cee:	b510      	push	{r4, lr}
 8003cf0:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cf2:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8003cf6:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cf8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003cfc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8003d00:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d02:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 8003d06:	b991      	cbnz	r1, 8003d2e <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d08:	2801      	cmp	r0, #1
 8003d0a:	d142      	bne.n	8003d92 <HAL_TIM_Encoder_Start+0xa4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d0c:	2a01      	cmp	r2, #1
 8003d0e:	d141      	bne.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d10:	2302      	movs	r3, #2
 8003d12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	f7ff ffd8 	bl	8003cd0 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e032      	b.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	fa5f fc8c 	uxtb.w	ip, ip
 8003d34:	468e      	mov	lr, r1
  else if (Channel == TIM_CHANNEL_2)
 8003d36:	2904      	cmp	r1, #4
 8003d38:	d01b      	beq.n	8003d72 <HAL_TIM_Encoder_Start+0x84>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d3a:	2801      	cmp	r0, #1
 8003d3c:	d12f      	bne.n	8003d9e <HAL_TIM_Encoder_Start+0xb0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d128      	bne.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d42:	2a01      	cmp	r2, #1
 8003d44:	d12d      	bne.n	8003da2 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d46:	f1bc 0f01 	cmp.w	ip, #1
 8003d4a:	d12c      	bne.n	8003da6 <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d52:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d5e:	2100      	movs	r1, #0
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	f7ff ffb5 	bl	8003cd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d66:	2201      	movs	r2, #1
 8003d68:	2104      	movs	r1, #4
 8003d6a:	6820      	ldr	r0, [r4, #0]
 8003d6c:	f7ff ffb0 	bl	8003cd0 <TIM_CCxChannelCmd>
      break;
 8003d70:	e7d6      	b.n	8003d20 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10f      	bne.n	8003d96 <HAL_TIM_Encoder_Start+0xa8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d76:	f1bc 0f01 	cmp.w	ip, #1
 8003d7a:	d10e      	bne.n	8003d9a <HAL_TIM_Encoder_Start+0xac>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d86:	2201      	movs	r2, #1
 8003d88:	2104      	movs	r1, #4
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	f7ff ffa0 	bl	8003cd0 <TIM_CCxChannelCmd>
      break;
 8003d90:	e7c6      	b.n	8003d20 <HAL_TIM_Encoder_Start+0x32>
      return HAL_ERROR;
 8003d92:	2001      	movs	r0, #1
}
 8003d94:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8003d96:	2001      	movs	r0, #1
 8003d98:	e7fc      	b.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	e7fa      	b.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
      return HAL_ERROR;
 8003d9e:	2001      	movs	r0, #1
 8003da0:	e7f8      	b.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
 8003da2:	4618      	mov	r0, r3
 8003da4:	e7f6      	b.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
 8003da6:	4610      	mov	r0, r2
 8003da8:	e7f4      	b.n	8003d94 <HAL_TIM_Encoder_Start+0xa6>
	...

08003dac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d03b      	beq.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8003db4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003db6:	2301      	movs	r3, #1
 8003db8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc2:	6804      	ldr	r4, [r0, #0]
 8003dc4:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc6:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dcc:	680d      	ldr	r5, [r1, #0]
 8003dce:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd0:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd2:	6803      	ldr	r3, [r0, #0]
 8003dd4:	4c16      	ldr	r4, [pc, #88]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	d01a      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d017      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003de0:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d013      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003de8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d00f      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003df0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	d00b      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003df8:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e00:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	d003      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003e08:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e14:	6849      	ldr	r1, [r1, #4]
 8003e16:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e20:	2300      	movs	r3, #0
 8003e22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003e26:	4618      	mov	r0, r3
}
 8003e28:	bc30      	pop	{r4, r5}
 8003e2a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003e2c:	2002      	movs	r0, #2
}
 8003e2e:	4770      	bx	lr
 8003e30:	40010000 	.word	0x40010000

08003e34 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e36:	4770      	bx	lr

08003e38 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e38:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	f102 030c 	add.w	r3, r2, #12
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	320c      	adds	r2, #12
 8003e48:	e842 3100 	strex	r1, r3, [r2]
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d1f3      	bne.n	8003e38 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	f102 0314 	add.w	r3, r2, #20
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	3214      	adds	r2, #20
 8003e60:	e842 3100 	strex	r1, r3, [r2]
 8003e64:	2900      	cmp	r1, #0
 8003e66:	d1f3      	bne.n	8003e50 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d005      	beq.n	8003e7a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e74:	2300      	movs	r3, #0
 8003e76:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003e78:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f102 030c 	add.w	r3, r2, #12
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	320c      	adds	r2, #12
 8003e8a:	e842 3100 	strex	r1, r3, [r2]
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d1f3      	bne.n	8003e7a <UART_EndRxTransfer+0x42>
 8003e92:	e7ec      	b.n	8003e6e <UART_EndRxTransfer+0x36>

08003e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	6802      	ldr	r2, [r0, #0]
 8003e9a:	6913      	ldr	r3, [r2, #16]
 8003e9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ea0:	68c1      	ldr	r1, [r0, #12]
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8003ea6:	6801      	ldr	r1, [r0, #0]
 8003ea8:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eaa:	6883      	ldr	r3, [r0, #8]
 8003eac:	6900      	ldr	r0, [r0, #16]
 8003eae:	4303      	orrs	r3, r0
 8003eb0:	6960      	ldr	r0, [r4, #20]
 8003eb2:	4303      	orrs	r3, r0
 8003eb4:	69e0      	ldr	r0, [r4, #28]
 8003eb6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003eb8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8003ebc:	f022 020c 	bic.w	r2, r2, #12
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	6953      	ldr	r3, [r2, #20]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ecc:	69a1      	ldr	r1, [r4, #24]
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	4a2e      	ldr	r2, [pc, #184]	; (8003f90 <UART_SetConfig+0xfc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d006      	beq.n	8003ee8 <UART_SetConfig+0x54>
 8003eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d002      	beq.n	8003ee8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ee2:	f7ff fcc7 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8003ee6:	e001      	b.n	8003eec <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7ff fcd4 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eec:	69e3      	ldr	r3, [r4, #28]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef2:	d024      	beq.n	8003f3e <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	1803      	adds	r3, r0, r0
 8003ef8:	4149      	adcs	r1, r1
 8003efa:	181b      	adds	r3, r3, r0
 8003efc:	f141 0100 	adc.w	r1, r1, #0
 8003f00:	00c9      	lsls	r1, r1, #3
 8003f02:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1818      	adds	r0, r3, r0
 8003f0a:	6863      	ldr	r3, [r4, #4]
 8003f0c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003f10:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003f14:	f141 0100 	adc.w	r1, r1, #0
 8003f18:	f7fc fe96 	bl	8000c48 <__aeabi_uldivmod>
 8003f1c:	6821      	ldr	r1, [r4, #0]
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <UART_SetConfig+0x100>)
 8003f20:	fba2 4300 	umull	r4, r3, r2, r0
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	2464      	movs	r4, #100	; 0x64
 8003f28:	fb04 0013 	mls	r0, r4, r3, r0
 8003f2c:	0100      	lsls	r0, r0, #4
 8003f2e:	3032      	adds	r0, #50	; 0x32
 8003f30:	fba2 2000 	umull	r2, r0, r2, r0
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8003f3a:	6088      	str	r0, [r1, #8]
  }
}
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	1802      	adds	r2, r0, r0
 8003f42:	eb43 0103 	adc.w	r1, r3, r3
 8003f46:	1812      	adds	r2, r2, r0
 8003f48:	f141 0100 	adc.w	r1, r1, #0
 8003f4c:	00c9      	lsls	r1, r1, #3
 8003f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f52:	00d2      	lsls	r2, r2, #3
 8003f54:	1810      	adds	r0, r2, r0
 8003f56:	f141 0100 	adc.w	r1, r1, #0
 8003f5a:	6862      	ldr	r2, [r4, #4]
 8003f5c:	1892      	adds	r2, r2, r2
 8003f5e:	415b      	adcs	r3, r3
 8003f60:	f7fc fe72 	bl	8000c48 <__aeabi_uldivmod>
 8003f64:	4d0b      	ldr	r5, [pc, #44]	; (8003f94 <UART_SetConfig+0x100>)
 8003f66:	fba5 3200 	umull	r3, r2, r5, r0
 8003f6a:	0951      	lsrs	r1, r2, #5
 8003f6c:	2364      	movs	r3, #100	; 0x64
 8003f6e:	fb03 0311 	mls	r3, r3, r1, r0
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	3332      	adds	r3, #50	; 0x32
 8003f76:	fba5 2303 	umull	r2, r3, r5, r3
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003f80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f8a:	4413      	add	r3, r2
 8003f8c:	6083      	str	r3, [r0, #8]
 8003f8e:	e7d5      	b.n	8003f3c <UART_SetConfig+0xa8>
 8003f90:	40011000 	.word	0x40011000
 8003f94:	51eb851f 	.word	0x51eb851f

08003f98 <UART_WaitOnFlagUntilTimeout>:
{
 8003f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	4615      	mov	r5, r2
 8003fa2:	4699      	mov	r9, r3
 8003fa4:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa6:	f8d8 2000 	ldr.w	r2, [r8]
 8003faa:	6814      	ldr	r4, [r2, #0]
 8003fac:	ea36 0304 	bics.w	r3, r6, r4
 8003fb0:	bf0c      	ite	eq
 8003fb2:	f04f 0c01 	moveq.w	ip, #1
 8003fb6:	f04f 0c00 	movne.w	ip, #0
 8003fba:	45ac      	cmp	ip, r5
 8003fbc:	d12d      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003fc2:	d0f2      	beq.n	8003faa <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fc4:	b12f      	cbz	r7, 8003fd2 <UART_WaitOnFlagUntilTimeout+0x3a>
 8003fc6:	f7fe f997 	bl	80022f8 <HAL_GetTick>
 8003fca:	eba0 0009 	sub.w	r0, r0, r9
 8003fce:	42b8      	cmp	r0, r7
 8003fd0:	d9e9      	bls.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd2:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	f102 030c 	add.w	r3, r2, #12
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	320c      	adds	r2, #12
 8003fe4:	e842 3100 	strex	r1, r3, [r2]
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	d1f2      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fec:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	f102 0314 	add.w	r3, r2, #20
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	3214      	adds	r2, #20
 8003ffe:	e842 3100 	strex	r1, r3, [r2]
 8004002:	2900      	cmp	r1, #0
 8004004:	d1f2      	bne.n	8003fec <UART_WaitOnFlagUntilTimeout+0x54>
        huart->gState  = HAL_UART_STATE_READY;
 8004006:	2320      	movs	r3, #32
 8004008:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800400c:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004010:	2300      	movs	r3, #0
 8004012:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004016:	2003      	movs	r0, #3
 8004018:	e000      	b.n	800401c <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 800401a:	2000      	movs	r0, #0
}
 800401c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004020 <HAL_UART_Init>:
  if (huart == NULL)
 8004020:	b358      	cbz	r0, 800407a <HAL_UART_Init+0x5a>
{
 8004022:	b510      	push	{r4, lr}
 8004024:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800402a:	b30b      	cbz	r3, 8004070 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	2324      	movs	r3, #36	; 0x24
 800402e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	68d3      	ldr	r3, [r2, #12]
 8004036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800403a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff ff29 	bl	8003e94 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	6913      	ldr	r3, [r2, #16]
 8004046:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800404a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	6953      	ldr	r3, [r2, #20]
 8004050:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004054:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	68d3      	ldr	r3, [r2, #12]
 800405a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800405e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	2000      	movs	r0, #0
 8004062:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004064:	2320      	movs	r3, #32
 8004066:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800406a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800406e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004070:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004074:	f7fd ffb6 	bl	8001fe4 <HAL_UART_MspInit>
 8004078:	e7d8      	b.n	800402c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800407a:	2001      	movs	r0, #1
}
 800407c:	4770      	bx	lr

0800407e <HAL_UART_Transmit>:
{
 800407e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004086:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	d15a      	bne.n	8004146 <HAL_UART_Transmit+0xc8>
 8004090:	4604      	mov	r4, r0
 8004092:	460d      	mov	r5, r1
 8004094:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004096:	2900      	cmp	r1, #0
 8004098:	d059      	beq.n	800414e <HAL_UART_Transmit+0xd0>
 800409a:	2a00      	cmp	r2, #0
 800409c:	d059      	beq.n	8004152 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 800409e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d057      	beq.n	8004156 <HAL_UART_Transmit+0xd8>
 80040a6:	2301      	movs	r3, #1
 80040a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b0:	2321      	movs	r3, #33	; 0x21
 80040b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80040b6:	f7fe f91f 	bl	80022f8 <HAL_GetTick>
 80040ba:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80040bc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c0:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	68a3      	ldr	r3, [r4, #8]
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d00c      	beq.n	80040e6 <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 80040cc:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80040d0:	2300      	movs	r3, #0
 80040d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80040d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80040d8:	b29b      	uxth	r3, r3
 80040da:	b343      	cbz	r3, 800412e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040dc:	f04f 0900 	mov.w	r9, #0
 80040e0:	f04f 0880 	mov.w	r8, #128	; 0x80
 80040e4:	e014      	b.n	8004110 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	b913      	cbnz	r3, 80040f0 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 80040ea:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80040ec:	2500      	movs	r5, #0
 80040ee:	e7ef      	b.n	80040d0 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 80040f0:	f04f 0a00 	mov.w	sl, #0
 80040f4:	e7ec      	b.n	80040d0 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f6:	6822      	ldr	r2, [r4, #0]
 80040f8:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80040fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004100:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004102:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004104:	3a01      	subs	r2, #1
 8004106:	b292      	uxth	r2, r2
 8004108:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800410a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800410c:	b29b      	uxth	r3, r3
 800410e:	b173      	cbz	r3, 800412e <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004110:	9600      	str	r6, [sp, #0]
 8004112:	463b      	mov	r3, r7
 8004114:	464a      	mov	r2, r9
 8004116:	4641      	mov	r1, r8
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff ff3d 	bl	8003f98 <UART_WaitOnFlagUntilTimeout>
 800411e:	b9e0      	cbnz	r0, 800415a <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8004120:	2d00      	cmp	r5, #0
 8004122:	d0e8      	beq.n	80040f6 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f815 2b01 	ldrb.w	r2, [r5], #1
 800412a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800412c:	e7e9      	b.n	8004102 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412e:	9600      	str	r6, [sp, #0]
 8004130:	463b      	mov	r3, r7
 8004132:	2200      	movs	r2, #0
 8004134:	2140      	movs	r1, #64	; 0x40
 8004136:	4620      	mov	r0, r4
 8004138:	f7ff ff2e 	bl	8003f98 <UART_WaitOnFlagUntilTimeout>
 800413c:	b978      	cbnz	r0, 800415e <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 800413e:	2320      	movs	r3, #32
 8004140:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004144:	e000      	b.n	8004148 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8004146:	2002      	movs	r0, #2
}
 8004148:	b002      	add	sp, #8
 800414a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 800414e:	2001      	movs	r0, #1
 8004150:	e7fa      	b.n	8004148 <HAL_UART_Transmit+0xca>
 8004152:	2001      	movs	r0, #1
 8004154:	e7f8      	b.n	8004148 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8004156:	2002      	movs	r0, #2
 8004158:	e7f6      	b.n	8004148 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 800415a:	2003      	movs	r0, #3
 800415c:	e7f4      	b.n	8004148 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 800415e:	2003      	movs	r0, #3
 8004160:	e7f2      	b.n	8004148 <HAL_UART_Transmit+0xca>

08004162 <HAL_UART_TxCpltCallback>:
}
 8004162:	4770      	bx	lr

08004164 <HAL_UART_RxHalfCpltCallback>:
}
 8004164:	4770      	bx	lr

08004166 <HAL_UART_ErrorCallback>:
}
 8004166:	4770      	bx	lr

08004168 <UART_DMAError>:
{
 8004168:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004170:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d00e      	beq.n	8004198 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800417e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b22      	cmp	r3, #34	; 0x22
 8004186:	d01c      	beq.n	80041c2 <UART_DMAError+0x5a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800418a:	f043 0310 	orr.w	r3, r3, #16
 800418e:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8004190:	4620      	mov	r0, r4
 8004192:	f7ff ffe8 	bl	8004166 <HAL_UART_ErrorCallback>
}
 8004196:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004198:	f012 0f80 	tst.w	r2, #128	; 0x80
 800419c:	d0ed      	beq.n	800417a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	84e3      	strh	r3, [r4, #38]	; 0x26
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	f102 030c 	add.w	r3, r2, #12
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	320c      	adds	r2, #12
 80041b2:	e842 3100 	strex	r1, r3, [r2]
 80041b6:	2900      	cmp	r1, #0
 80041b8:	d1f3      	bne.n	80041a2 <UART_DMAError+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	2320      	movs	r3, #32
 80041bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80041c0:	e7db      	b.n	800417a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80041c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80041c6:	d0df      	beq.n	8004188 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7ff fe33 	bl	8003e38 <UART_EndRxTransfer>
 80041d2:	e7d9      	b.n	8004188 <UART_DMAError+0x20>

080041d4 <UART_DMAAbortOnError>:
{
 80041d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041dc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80041de:	f7ff ffc2 	bl	8004166 <HAL_UART_ErrorCallback>
}
 80041e2:	bd08      	pop	{r3, pc}

080041e4 <HAL_UARTEx_RxEventCallback>:
}
 80041e4:	4770      	bx	lr

080041e6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b22      	cmp	r3, #34	; 0x22
 80041ee:	d11e      	bne.n	800422e <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f0:	6883      	ldr	r3, [r0, #8]
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	d006      	beq.n	8004206 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041fa:	b183      	cbz	r3, 800421e <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041fc:	6803      	ldr	r3, [r0, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	e01b      	b.n	800423e <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004206:	6903      	ldr	r3, [r0, #16]
 8004208:	b9ab      	cbnz	r3, 8004236 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800420a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800420c:	6803      	ldr	r3, [r0, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004216:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004218:	3302      	adds	r3, #2
 800421a:	6283      	str	r3, [r0, #40]	; 0x28
 800421c:	e013      	b.n	8004246 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800421e:	6903      	ldr	r3, [r0, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1eb      	bne.n	80041fc <UART_Receive_IT+0x16>
 8004224:	e008      	b.n	8004238 <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 8004226:	f7fd f917 	bl	8001458 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800422a:	2000      	movs	r0, #0
 800422c:	e046      	b.n	80042bc <UART_Receive_IT+0xd6>
    return HAL_BUSY;
 800422e:	2002      	movs	r0, #2
 8004230:	4770      	bx	lr
    return HAL_OK;
 8004232:	2000      	movs	r0, #0
}
 8004234:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004236:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004238:	6803      	ldr	r3, [r0, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004240:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004242:	3301      	adds	r3, #1
 8004244:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004246:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004248:	3b01      	subs	r3, #1
 800424a:	b29b      	uxth	r3, r3
 800424c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ef      	bne.n	8004232 <UART_Receive_IT+0x4c>
{
 8004252:	b500      	push	{lr}
 8004254:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004256:	6802      	ldr	r2, [r0, #0]
 8004258:	68d3      	ldr	r3, [r2, #12]
 800425a:	f023 0320 	bic.w	r3, r3, #32
 800425e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004260:	6802      	ldr	r2, [r0, #0]
 8004262:	68d3      	ldr	r3, [r2, #12]
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800426a:	6802      	ldr	r2, [r0, #0]
 800426c:	6953      	ldr	r3, [r2, #20]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004274:	2320      	movs	r3, #32
 8004276:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800427c:	2b01      	cmp	r3, #1
 800427e:	d1d2      	bne.n	8004226 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004280:	2300      	movs	r3, #0
 8004282:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	f102 030c 	add.w	r3, r2, #12
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	320c      	adds	r2, #12
 8004294:	e842 3100 	strex	r1, r3, [r2]
 8004298:	2900      	cmp	r1, #0
 800429a:	d1f3      	bne.n	8004284 <UART_Receive_IT+0x9e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800429c:	6803      	ldr	r3, [r0, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	f012 0f10 	tst.w	r2, #16
 80042a4:	d006      	beq.n	80042b4 <UART_Receive_IT+0xce>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042a6:	2200      	movs	r2, #0
 80042a8:	9201      	str	r2, [sp, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	9201      	str	r2, [sp, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042b4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80042b6:	f7ff ff95 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80042ba:	2000      	movs	r0, #0
}
 80042bc:	b003      	add	sp, #12
 80042be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080042c4 <HAL_UART_IRQHandler>:
{
 80042c4:	b510      	push	{r4, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042ca:	6802      	ldr	r2, [r0, #0]
 80042cc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ce:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d0:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 80042d2:	f013 0f0f 	tst.w	r3, #15
 80042d6:	d109      	bne.n	80042ec <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d8:	f013 0f20 	tst.w	r3, #32
 80042dc:	d00d      	beq.n	80042fa <HAL_UART_IRQHandler+0x36>
 80042de:	f011 0f20 	tst.w	r1, #32
 80042e2:	d00a      	beq.n	80042fa <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff ff7e 	bl	80041e6 <UART_Receive_IT>
      return;
 80042ea:	e017      	b.n	800431c <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042ec:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042f0:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 80042f4:	ea5c 0c00 	orrs.w	ip, ip, r0
 80042f8:	d112      	bne.n	8004320 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80042fc:	2801      	cmp	r0, #1
 80042fe:	d07f      	beq.n	8004400 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004300:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004304:	d003      	beq.n	800430e <HAL_UART_IRQHandler+0x4a>
 8004306:	f011 0f80 	tst.w	r1, #128	; 0x80
 800430a:	f040 8116 	bne.w	800453a <HAL_UART_IRQHandler+0x276>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800430e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004312:	d003      	beq.n	800431c <HAL_UART_IRQHandler+0x58>
 8004314:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004318:	f040 813c 	bne.w	8004594 <HAL_UART_IRQHandler+0x2d0>
}
 800431c:	b002      	add	sp, #8
 800431e:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004320:	f013 0f01 	tst.w	r3, #1
 8004324:	d006      	beq.n	8004334 <HAL_UART_IRQHandler+0x70>
 8004326:	f411 7f80 	tst.w	r1, #256	; 0x100
 800432a:	d003      	beq.n	8004334 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004334:	f013 0f04 	tst.w	r3, #4
 8004338:	d02f      	beq.n	800439a <HAL_UART_IRQHandler+0xd6>
 800433a:	b158      	cbz	r0, 8004354 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800433c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800433e:	f042 0202 	orr.w	r2, r2, #2
 8004342:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004344:	f013 0f02 	tst.w	r3, #2
 8004348:	f000 812f 	beq.w	80045aa <HAL_UART_IRQHandler+0x2e6>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800434c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800434e:	f042 0204 	orr.w	r2, r2, #4
 8004352:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004354:	f013 0f08 	tst.w	r3, #8
 8004358:	d007      	beq.n	800436a <HAL_UART_IRQHandler+0xa6>
 800435a:	f001 0220 	and.w	r2, r1, #32
 800435e:	4302      	orrs	r2, r0
 8004360:	d003      	beq.n	800436a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004362:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800436a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800436c:	2a00      	cmp	r2, #0
 800436e:	d0d5      	beq.n	800431c <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004370:	f013 0f20 	tst.w	r3, #32
 8004374:	d002      	beq.n	800437c <HAL_UART_IRQHandler+0xb8>
 8004376:	f011 0f20 	tst.w	r1, #32
 800437a:	d114      	bne.n	80043a6 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004380:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004382:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	4313      	orrs	r3, r2
 800438c:	d10f      	bne.n	80043ae <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 800438e:	4620      	mov	r0, r4
 8004390:	f7ff fee9 	bl	8004166 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	2300      	movs	r3, #0
 8004396:	6423      	str	r3, [r4, #64]	; 0x40
 8004398:	e7c0      	b.n	800431c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439a:	f013 0f02 	tst.w	r3, #2
 800439e:	d0d9      	beq.n	8004354 <HAL_UART_IRQHandler+0x90>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d0d7      	beq.n	8004354 <HAL_UART_IRQHandler+0x90>
 80043a4:	e7d2      	b.n	800434c <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7ff ff1d 	bl	80041e6 <UART_Receive_IT>
 80043ac:	e7e6      	b.n	800437c <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 80043ae:	4620      	mov	r0, r4
 80043b0:	f7ff fd42 	bl	8003e38 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043bc:	d01c      	beq.n	80043f8 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	f102 0314 	add.w	r3, r2, #20
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	3214      	adds	r2, #20
 80043ce:	e842 3100 	strex	r1, r3, [r2]
 80043d2:	2900      	cmp	r1, #0
 80043d4:	d1f3      	bne.n	80043be <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 80043d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043d8:	b153      	cbz	r3, 80043f0 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043da:	4a76      	ldr	r2, [pc, #472]	; (80045b4 <HAL_UART_IRQHandler+0x2f0>)
 80043dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80043e0:	f7fe fd19 	bl	8002e16 <HAL_DMA_Abort_IT>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d099      	beq.n	800431c <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80043ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80043ec:	4798      	blx	r3
 80043ee:	e795      	b.n	800431c <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7ff feb8 	bl	8004166 <HAL_UART_ErrorCallback>
 80043f6:	e791      	b.n	800431c <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff feb4 	bl	8004166 <HAL_UART_ErrorCallback>
 80043fe:	e78d      	b.n	800431c <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004400:	f013 0f10 	tst.w	r3, #16
 8004404:	f43f af7c 	beq.w	8004300 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004408:	f011 0f10 	tst.w	r1, #16
 800440c:	f43f af78 	beq.w	8004300 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004410:	2300      	movs	r3, #0
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	6853      	ldr	r3, [r2, #4]
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441e:	6953      	ldr	r3, [r2, #20]
 8004420:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004424:	d04f      	beq.n	80044c6 <HAL_UART_IRQHandler+0x202>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004426:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800442e:	2b00      	cmp	r3, #0
 8004430:	f43f af74 	beq.w	800431c <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004434:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004436:	4299      	cmp	r1, r3
 8004438:	f67f af70 	bls.w	800431c <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 800443c:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800443e:	69d3      	ldr	r3, [r2, #28]
 8004440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004444:	d037      	beq.n	80044b6 <HAL_UART_IRQHandler+0x1f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004446:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f102 030c 	add.w	r3, r2, #12
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	320c      	adds	r2, #12
 8004456:	e842 3100 	strex	r1, r3, [r2]
 800445a:	2900      	cmp	r1, #0
 800445c:	d1f3      	bne.n	8004446 <HAL_UART_IRQHandler+0x182>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	f102 0314 	add.w	r3, r2, #20
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	3214      	adds	r2, #20
 800446e:	e842 3100 	strex	r1, r3, [r2]
 8004472:	2900      	cmp	r1, #0
 8004474:	d1f3      	bne.n	800445e <HAL_UART_IRQHandler+0x19a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004476:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	f102 0314 	add.w	r3, r2, #20
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	3214      	adds	r2, #20
 8004486:	e842 3100 	strex	r1, r3, [r2]
 800448a:	2900      	cmp	r1, #0
 800448c:	d1f3      	bne.n	8004476 <HAL_UART_IRQHandler+0x1b2>
          huart->RxState = HAL_UART_STATE_READY;
 800448e:	2320      	movs	r3, #32
 8004490:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004494:	2300      	movs	r3, #0
 8004496:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	f102 030c 	add.w	r3, r2, #12
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	320c      	adds	r2, #12
 80044a8:	e842 3100 	strex	r1, r3, [r2]
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d1f3      	bne.n	8004498 <HAL_UART_IRQHandler+0x1d4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80044b2:	f7fe fc66 	bl	8002d82 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044b6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80044b8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80044ba:	1ac9      	subs	r1, r1, r3
 80044bc:	b289      	uxth	r1, r1
 80044be:	4620      	mov	r0, r4
 80044c0:	f7ff fe90 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
 80044c4:	e72a      	b.n	800431c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044c6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80044c8:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 80044ca:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f43f af24 	beq.w	800431c <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044d4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 80044da:	2900      	cmp	r1, #0
 80044dc:	f43f af1e 	beq.w	800431c <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	f102 030c 	add.w	r3, r2, #12
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	320c      	adds	r2, #12
 80044f0:	e842 3000 	strex	r0, r3, [r2]
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d1f3      	bne.n	80044e0 <HAL_UART_IRQHandler+0x21c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	f102 0314 	add.w	r3, r2, #20
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	3214      	adds	r2, #20
 8004508:	e842 3000 	strex	r0, r3, [r2]
 800450c:	2800      	cmp	r0, #0
 800450e:	d1f3      	bne.n	80044f8 <HAL_UART_IRQHandler+0x234>
        huart->RxState = HAL_UART_STATE_READY;
 8004510:	2320      	movs	r3, #32
 8004512:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	2300      	movs	r3, #0
 8004518:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	f102 030c 	add.w	r3, r2, #12
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	320c      	adds	r2, #12
 800452a:	e842 3000 	strex	r0, r3, [r2]
 800452e:	2800      	cmp	r0, #0
 8004530:	d1f3      	bne.n	800451a <HAL_UART_IRQHandler+0x256>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004532:	4620      	mov	r0, r4
 8004534:	f7ff fe56 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
 8004538:	e6f0      	b.n	800431c <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800453a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b21      	cmp	r3, #33	; 0x21
 8004542:	f47f aeeb 	bne.w	800431c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004546:	68a3      	ldr	r3, [r4, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d016      	beq.n	800457c <HAL_UART_IRQHandler+0x2b8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800454e:	6a23      	ldr	r3, [r4, #32]
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	6221      	str	r1, [r4, #32]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004558:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800455a:	3b01      	subs	r3, #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	84e3      	strh	r3, [r4, #38]	; 0x26
 8004560:	2b00      	cmp	r3, #0
 8004562:	f47f aedb 	bne.w	800431c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	68d3      	ldr	r3, [r2, #12]
 800456a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	68d3      	ldr	r3, [r2, #12]
 8004574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004578:	60d3      	str	r3, [r2, #12]
 800457a:	e6cf      	b.n	800431c <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <HAL_UART_IRQHandler+0x28a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004582:	6a23      	ldr	r3, [r4, #32]
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800458c:	6a23      	ldr	r3, [r4, #32]
 800458e:	3302      	adds	r3, #2
 8004590:	6223      	str	r3, [r4, #32]
 8004592:	e7e1      	b.n	8004558 <HAL_UART_IRQHandler+0x294>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004594:	68d3      	ldr	r3, [r2, #12]
 8004596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459a:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800459c:	2320      	movs	r3, #32
 800459e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80045a2:	4620      	mov	r0, r4
 80045a4:	f7ff fddd 	bl	8004162 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80045a8:	e6b8      	b.n	800431c <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045aa:	f013 0f08 	tst.w	r3, #8
 80045ae:	f47f aed8 	bne.w	8004362 <HAL_UART_IRQHandler+0x9e>
 80045b2:	e6da      	b.n	800436a <HAL_UART_IRQHandler+0xa6>
 80045b4:	080041d5 	.word	0x080041d5

080045b8 <UART_DMARxHalfCplt>:
{
 80045b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80045c2:	f7ff fdcf 	bl	8004164 <HAL_UART_RxHalfCpltCallback>
}
 80045c6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045c8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80045ca:	0849      	lsrs	r1, r1, #1
 80045cc:	f7ff fe0a 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
 80045d0:	e7f9      	b.n	80045c6 <UART_DMARxHalfCplt+0xe>

080045d2 <UART_DMAReceiveCplt>:
{
 80045d2:	b508      	push	{r3, lr}
 80045d4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045e0:	d12b      	bne.n	800463a <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	f102 030c 	add.w	r3, r2, #12
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	320c      	adds	r2, #12
 80045f6:	e842 3100 	strex	r1, r3, [r2]
 80045fa:	2900      	cmp	r1, #0
 80045fc:	d1f3      	bne.n	80045e6 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	f102 0314 	add.w	r3, r2, #20
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	3214      	adds	r2, #20
 800460e:	e842 3100 	strex	r1, r3, [r2]
 8004612:	2900      	cmp	r1, #0
 8004614:	d1f3      	bne.n	80045fe <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004616:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	f102 0314 	add.w	r3, r2, #20
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	3214      	adds	r2, #20
 8004626:	e842 3100 	strex	r1, r3, [r2]
 800462a:	2900      	cmp	r1, #0
 800462c:	d1f3      	bne.n	8004616 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800462e:	2320      	movs	r3, #32
 8004630:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004634:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004636:	2b01      	cmp	r3, #1
 8004638:	d005      	beq.n	8004646 <UART_DMAReceiveCplt+0x74>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800463c:	2b01      	cmp	r3, #1
 800463e:	d00f      	beq.n	8004660 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004640:	f7fc ff0a 	bl	8001458 <HAL_UART_RxCpltCallback>
}
 8004644:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004646:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	f102 030c 	add.w	r3, r2, #12
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	320c      	adds	r2, #12
 8004656:	e842 3100 	strex	r1, r3, [r2]
 800465a:	2900      	cmp	r1, #0
 800465c:	d1f3      	bne.n	8004646 <UART_DMAReceiveCplt+0x74>
 800465e:	e7ec      	b.n	800463a <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004660:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004662:	f7ff fdbf 	bl	80041e4 <HAL_UARTEx_RxEventCallback>
 8004666:	e7ed      	b.n	8004644 <UART_DMAReceiveCplt+0x72>

08004668 <UART_Start_Receive_DMA>:
{
 8004668:	b530      	push	{r4, r5, lr}
 800466a:	b083      	sub	sp, #12
 800466c:	4604      	mov	r4, r0
 800466e:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004670:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004672:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004674:	2500      	movs	r5, #0
 8004676:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004678:	2222      	movs	r2, #34	; 0x22
 800467a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800467e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004680:	481f      	ldr	r0, [pc, #124]	; (8004700 <UART_Start_Receive_DMA+0x98>)
 8004682:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004684:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004686:	481f      	ldr	r0, [pc, #124]	; (8004704 <UART_Start_Receive_DMA+0x9c>)
 8004688:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800468a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800468c:	481e      	ldr	r0, [pc, #120]	; (8004708 <UART_Start_Receive_DMA+0xa0>)
 800468e:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8004690:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004692:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	460a      	mov	r2, r1
 8004698:	1d01      	adds	r1, r0, #4
 800469a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800469c:	f7fe fb28 	bl	8002cf0 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046a0:	9501      	str	r5, [sp, #4]
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	9201      	str	r2, [sp, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(huart);
 80046ae:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	f102 030c 	add.w	r3, r2, #12
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	320c      	adds	r2, #12
 80046c2:	e842 3100 	strex	r1, r3, [r2]
 80046c6:	2900      	cmp	r1, #0
 80046c8:	d1f3      	bne.n	80046b2 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	f102 0314 	add.w	r3, r2, #20
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	3214      	adds	r2, #20
 80046da:	e842 3100 	strex	r1, r3, [r2]
 80046de:	2900      	cmp	r1, #0
 80046e0:	d1f3      	bne.n	80046ca <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	f102 0314 	add.w	r3, r2, #20
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	3214      	adds	r2, #20
 80046f2:	e842 3100 	strex	r1, r3, [r2]
 80046f6:	2900      	cmp	r1, #0
 80046f8:	d1f3      	bne.n	80046e2 <UART_Start_Receive_DMA+0x7a>
}
 80046fa:	2000      	movs	r0, #0
 80046fc:	b003      	add	sp, #12
 80046fe:	bd30      	pop	{r4, r5, pc}
 8004700:	080045d3 	.word	0x080045d3
 8004704:	080045b9 	.word	0x080045b9
 8004708:	08004169 	.word	0x08004169

0800470c <HAL_UART_Receive_DMA>:
{
 800470c:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800470e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b20      	cmp	r3, #32
 8004716:	d10d      	bne.n	8004734 <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 8004718:	b171      	cbz	r1, 8004738 <HAL_UART_Receive_DMA+0x2c>
 800471a:	b17a      	cbz	r2, 800473c <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 800471c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d00d      	beq.n	8004740 <HAL_UART_Receive_DMA+0x34>
 8004724:	2301      	movs	r3, #1
 8004726:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	2300      	movs	r3, #0
 800472c:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800472e:	f7ff ff9b 	bl	8004668 <UART_Start_Receive_DMA>
 8004732:	e000      	b.n	8004736 <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 8004734:	2002      	movs	r0, #2
}
 8004736:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8004738:	2001      	movs	r0, #1
 800473a:	e7fc      	b.n	8004736 <HAL_UART_Receive_DMA+0x2a>
 800473c:	2001      	movs	r0, #1
 800473e:	e7fa      	b.n	8004736 <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 8004740:	2002      	movs	r0, #2
 8004742:	e7f8      	b.n	8004736 <HAL_UART_Receive_DMA+0x2a>

08004744 <__errno>:
 8004744:	4b01      	ldr	r3, [pc, #4]	; (800474c <__errno+0x8>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000006c 	.word	0x2000006c

08004750 <__libc_init_array>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	4d0d      	ldr	r5, [pc, #52]	; (8004788 <__libc_init_array+0x38>)
 8004754:	4c0d      	ldr	r4, [pc, #52]	; (800478c <__libc_init_array+0x3c>)
 8004756:	1b64      	subs	r4, r4, r5
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	2600      	movs	r6, #0
 800475c:	42a6      	cmp	r6, r4
 800475e:	d109      	bne.n	8004774 <__libc_init_array+0x24>
 8004760:	4d0b      	ldr	r5, [pc, #44]	; (8004790 <__libc_init_array+0x40>)
 8004762:	4c0c      	ldr	r4, [pc, #48]	; (8004794 <__libc_init_array+0x44>)
 8004764:	f005 fad6 	bl	8009d14 <_init>
 8004768:	1b64      	subs	r4, r4, r5
 800476a:	10a4      	asrs	r4, r4, #2
 800476c:	2600      	movs	r6, #0
 800476e:	42a6      	cmp	r6, r4
 8004770:	d105      	bne.n	800477e <__libc_init_array+0x2e>
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	f855 3b04 	ldr.w	r3, [r5], #4
 8004778:	4798      	blx	r3
 800477a:	3601      	adds	r6, #1
 800477c:	e7ee      	b.n	800475c <__libc_init_array+0xc>
 800477e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004782:	4798      	blx	r3
 8004784:	3601      	adds	r6, #1
 8004786:	e7f2      	b.n	800476e <__libc_init_array+0x1e>
 8004788:	0800a4d4 	.word	0x0800a4d4
 800478c:	0800a4d4 	.word	0x0800a4d4
 8004790:	0800a4d4 	.word	0x0800a4d4
 8004794:	0800a4dc 	.word	0x0800a4dc

08004798 <memset>:
 8004798:	4402      	add	r2, r0
 800479a:	4603      	mov	r3, r0
 800479c:	4293      	cmp	r3, r2
 800479e:	d100      	bne.n	80047a2 <memset+0xa>
 80047a0:	4770      	bx	lr
 80047a2:	f803 1b01 	strb.w	r1, [r3], #1
 80047a6:	e7f9      	b.n	800479c <memset+0x4>

080047a8 <sprintf>:
 80047a8:	b40e      	push	{r1, r2, r3}
 80047aa:	b500      	push	{lr}
 80047ac:	b09c      	sub	sp, #112	; 0x70
 80047ae:	ab1d      	add	r3, sp, #116	; 0x74
 80047b0:	9002      	str	r0, [sp, #8]
 80047b2:	9006      	str	r0, [sp, #24]
 80047b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047b8:	4809      	ldr	r0, [pc, #36]	; (80047e0 <sprintf+0x38>)
 80047ba:	9107      	str	r1, [sp, #28]
 80047bc:	9104      	str	r1, [sp, #16]
 80047be:	4909      	ldr	r1, [pc, #36]	; (80047e4 <sprintf+0x3c>)
 80047c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047c4:	9105      	str	r1, [sp, #20]
 80047c6:	6800      	ldr	r0, [r0, #0]
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	a902      	add	r1, sp, #8
 80047cc:	f000 f80c 	bl	80047e8 <_svfprintf_r>
 80047d0:	9b02      	ldr	r3, [sp, #8]
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	b01c      	add	sp, #112	; 0x70
 80047d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047dc:	b003      	add	sp, #12
 80047de:	4770      	bx	lr
 80047e0:	2000006c 	.word	0x2000006c
 80047e4:	ffff0208 	.word	0xffff0208

080047e8 <_svfprintf_r>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	ed2d 8b04 	vpush	{d8-d9}
 80047f0:	b0cf      	sub	sp, #316	; 0x13c
 80047f2:	4688      	mov	r8, r1
 80047f4:	4691      	mov	r9, r2
 80047f6:	461e      	mov	r6, r3
 80047f8:	4682      	mov	sl, r0
 80047fa:	f002 f973 	bl	8006ae4 <_localeconv_r>
 80047fe:	6803      	ldr	r3, [r0, #0]
 8004800:	9313      	str	r3, [sp, #76]	; 0x4c
 8004802:	4618      	mov	r0, r3
 8004804:	f7fb fce4 	bl	80001d0 <strlen>
 8004808:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800480c:	900d      	str	r0, [sp, #52]	; 0x34
 800480e:	0618      	lsls	r0, r3, #24
 8004810:	d51a      	bpl.n	8004848 <_svfprintf_r+0x60>
 8004812:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004816:	b9bb      	cbnz	r3, 8004848 <_svfprintf_r+0x60>
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	4650      	mov	r0, sl
 800481c:	f002 f96a 	bl	8006af4 <_malloc_r>
 8004820:	f8c8 0000 	str.w	r0, [r8]
 8004824:	f8c8 0010 	str.w	r0, [r8, #16]
 8004828:	b958      	cbnz	r0, 8004842 <_svfprintf_r+0x5a>
 800482a:	230c      	movs	r3, #12
 800482c:	f8ca 3000 	str.w	r3, [sl]
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	930c      	str	r3, [sp, #48]	; 0x30
 8004836:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004838:	b04f      	add	sp, #316	; 0x13c
 800483a:	ecbd 8b04 	vpop	{d8-d9}
 800483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004842:	2340      	movs	r3, #64	; 0x40
 8004844:	f8c8 3014 	str.w	r3, [r8, #20]
 8004848:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8004a98 <_svfprintf_r+0x2b0>
 800484c:	2500      	movs	r5, #0
 800484e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8004852:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004856:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800485a:	ac25      	add	r4, sp, #148	; 0x94
 800485c:	9422      	str	r4, [sp, #136]	; 0x88
 800485e:	9505      	str	r5, [sp, #20]
 8004860:	950a      	str	r5, [sp, #40]	; 0x28
 8004862:	9512      	str	r5, [sp, #72]	; 0x48
 8004864:	9514      	str	r5, [sp, #80]	; 0x50
 8004866:	950c      	str	r5, [sp, #48]	; 0x30
 8004868:	464b      	mov	r3, r9
 800486a:	461d      	mov	r5, r3
 800486c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004870:	b10a      	cbz	r2, 8004876 <_svfprintf_r+0x8e>
 8004872:	2a25      	cmp	r2, #37	; 0x25
 8004874:	d1f9      	bne.n	800486a <_svfprintf_r+0x82>
 8004876:	ebb5 0709 	subs.w	r7, r5, r9
 800487a:	d00d      	beq.n	8004898 <_svfprintf_r+0xb0>
 800487c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800487e:	443b      	add	r3, r7
 8004880:	9324      	str	r3, [sp, #144]	; 0x90
 8004882:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004884:	3301      	adds	r3, #1
 8004886:	2b07      	cmp	r3, #7
 8004888:	e9c4 9700 	strd	r9, r7, [r4]
 800488c:	9323      	str	r3, [sp, #140]	; 0x8c
 800488e:	dc79      	bgt.n	8004984 <_svfprintf_r+0x19c>
 8004890:	3408      	adds	r4, #8
 8004892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004894:	443b      	add	r3, r7
 8004896:	930c      	str	r3, [sp, #48]	; 0x30
 8004898:	782b      	ldrb	r3, [r5, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f001 8148 	beq.w	8005b30 <_svfprintf_r+0x1348>
 80048a0:	2300      	movs	r3, #0
 80048a2:	f04f 32ff 	mov.w	r2, #4294967295
 80048a6:	9204      	str	r2, [sp, #16]
 80048a8:	3501      	adds	r5, #1
 80048aa:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80048ae:	9310      	str	r3, [sp, #64]	; 0x40
 80048b0:	469b      	mov	fp, r3
 80048b2:	270a      	movs	r7, #10
 80048b4:	222b      	movs	r2, #43	; 0x2b
 80048b6:	462b      	mov	r3, r5
 80048b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80048bc:	9106      	str	r1, [sp, #24]
 80048be:	930b      	str	r3, [sp, #44]	; 0x2c
 80048c0:	9b06      	ldr	r3, [sp, #24]
 80048c2:	3b20      	subs	r3, #32
 80048c4:	2b5a      	cmp	r3, #90	; 0x5a
 80048c6:	f200 85bf 	bhi.w	8005448 <_svfprintf_r+0xc60>
 80048ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80048ce:	007e      	.short	0x007e
 80048d0:	05bd05bd 	.word	0x05bd05bd
 80048d4:	05bd0086 	.word	0x05bd0086
 80048d8:	05bd05bd 	.word	0x05bd05bd
 80048dc:	05bd0065 	.word	0x05bd0065
 80048e0:	008905bd 	.word	0x008905bd
 80048e4:	05bd0093 	.word	0x05bd0093
 80048e8:	00960090 	.word	0x00960090
 80048ec:	00b305bd 	.word	0x00b305bd
 80048f0:	00b600b6 	.word	0x00b600b6
 80048f4:	00b600b6 	.word	0x00b600b6
 80048f8:	00b600b6 	.word	0x00b600b6
 80048fc:	00b600b6 	.word	0x00b600b6
 8004900:	05bd00b6 	.word	0x05bd00b6
 8004904:	05bd05bd 	.word	0x05bd05bd
 8004908:	05bd05bd 	.word	0x05bd05bd
 800490c:	05bd05bd 	.word	0x05bd05bd
 8004910:	05bd012c 	.word	0x05bd012c
 8004914:	00fc00e9 	.word	0x00fc00e9
 8004918:	012c012c 	.word	0x012c012c
 800491c:	05bd012c 	.word	0x05bd012c
 8004920:	05bd05bd 	.word	0x05bd05bd
 8004924:	00c605bd 	.word	0x00c605bd
 8004928:	05bd05bd 	.word	0x05bd05bd
 800492c:	05bd0498 	.word	0x05bd0498
 8004930:	05bd05bd 	.word	0x05bd05bd
 8004934:	05bd04e2 	.word	0x05bd04e2
 8004938:	05bd0503 	.word	0x05bd0503
 800493c:	052505bd 	.word	0x052505bd
 8004940:	05bd05bd 	.word	0x05bd05bd
 8004944:	05bd05bd 	.word	0x05bd05bd
 8004948:	05bd05bd 	.word	0x05bd05bd
 800494c:	05bd05bd 	.word	0x05bd05bd
 8004950:	05bd012c 	.word	0x05bd012c
 8004954:	00fe00e9 	.word	0x00fe00e9
 8004958:	012c012c 	.word	0x012c012c
 800495c:	00c9012c 	.word	0x00c9012c
 8004960:	00dd00fe 	.word	0x00dd00fe
 8004964:	00d605bd 	.word	0x00d605bd
 8004968:	047305bd 	.word	0x047305bd
 800496c:	04d0049a 	.word	0x04d0049a
 8004970:	05bd00dd 	.word	0x05bd00dd
 8004974:	007c04e2 	.word	0x007c04e2
 8004978:	05bd0505 	.word	0x05bd0505
 800497c:	054405bd 	.word	0x054405bd
 8004980:	007c05bd 	.word	0x007c05bd
 8004984:	aa22      	add	r2, sp, #136	; 0x88
 8004986:	4641      	mov	r1, r8
 8004988:	4650      	mov	r0, sl
 800498a:	f002 fe9a 	bl	80076c2 <__ssprint_r>
 800498e:	2800      	cmp	r0, #0
 8004990:	f040 8137 	bne.w	8004c02 <_svfprintf_r+0x41a>
 8004994:	ac25      	add	r4, sp, #148	; 0x94
 8004996:	e77c      	b.n	8004892 <_svfprintf_r+0xaa>
 8004998:	4650      	mov	r0, sl
 800499a:	f002 f8a3 	bl	8006ae4 <_localeconv_r>
 800499e:	6843      	ldr	r3, [r0, #4]
 80049a0:	9314      	str	r3, [sp, #80]	; 0x50
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb fc14 	bl	80001d0 <strlen>
 80049a8:	9012      	str	r0, [sp, #72]	; 0x48
 80049aa:	4650      	mov	r0, sl
 80049ac:	f002 f89a 	bl	8006ae4 <_localeconv_r>
 80049b0:	6883      	ldr	r3, [r0, #8]
 80049b2:	930a      	str	r3, [sp, #40]	; 0x28
 80049b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049b6:	222b      	movs	r2, #43	; 0x2b
 80049b8:	b12b      	cbz	r3, 80049c6 <_svfprintf_r+0x1de>
 80049ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049bc:	b11b      	cbz	r3, 80049c6 <_svfprintf_r+0x1de>
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b10b      	cbz	r3, 80049c6 <_svfprintf_r+0x1de>
 80049c2:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80049c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80049c8:	e775      	b.n	80048b6 <_svfprintf_r+0xce>
 80049ca:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f9      	bne.n	80049c6 <_svfprintf_r+0x1de>
 80049d2:	2320      	movs	r3, #32
 80049d4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80049d8:	e7f5      	b.n	80049c6 <_svfprintf_r+0x1de>
 80049da:	f04b 0b01 	orr.w	fp, fp, #1
 80049de:	e7f2      	b.n	80049c6 <_svfprintf_r+0x1de>
 80049e0:	f856 3b04 	ldr.w	r3, [r6], #4
 80049e4:	9310      	str	r3, [sp, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	daed      	bge.n	80049c6 <_svfprintf_r+0x1de>
 80049ea:	425b      	negs	r3, r3
 80049ec:	9310      	str	r3, [sp, #64]	; 0x40
 80049ee:	f04b 0b04 	orr.w	fp, fp, #4
 80049f2:	e7e8      	b.n	80049c6 <_svfprintf_r+0x1de>
 80049f4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80049f8:	e7e5      	b.n	80049c6 <_svfprintf_r+0x1de>
 80049fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80049fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a00:	9306      	str	r3, [sp, #24]
 8004a02:	2b2a      	cmp	r3, #42	; 0x2a
 8004a04:	d113      	bne.n	8004a2e <_svfprintf_r+0x246>
 8004a06:	f856 0b04 	ldr.w	r0, [r6], #4
 8004a0a:	950b      	str	r5, [sp, #44]	; 0x2c
 8004a0c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8004a10:	9304      	str	r3, [sp, #16]
 8004a12:	e7d8      	b.n	80049c6 <_svfprintf_r+0x1de>
 8004a14:	9904      	ldr	r1, [sp, #16]
 8004a16:	fb07 3301 	mla	r3, r7, r1, r3
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a20:	9306      	str	r3, [sp, #24]
 8004a22:	9b06      	ldr	r3, [sp, #24]
 8004a24:	3b30      	subs	r3, #48	; 0x30
 8004a26:	2b09      	cmp	r3, #9
 8004a28:	d9f4      	bls.n	8004a14 <_svfprintf_r+0x22c>
 8004a2a:	950b      	str	r5, [sp, #44]	; 0x2c
 8004a2c:	e748      	b.n	80048c0 <_svfprintf_r+0xd8>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	e7f6      	b.n	8004a22 <_svfprintf_r+0x23a>
 8004a34:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8004a38:	e7c5      	b.n	80049c6 <_svfprintf_r+0x1de>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004a3e:	9310      	str	r3, [sp, #64]	; 0x40
 8004a40:	9b06      	ldr	r3, [sp, #24]
 8004a42:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004a44:	3b30      	subs	r3, #48	; 0x30
 8004a46:	fb07 3301 	mla	r3, r7, r1, r3
 8004a4a:	9310      	str	r3, [sp, #64]	; 0x40
 8004a4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a50:	9306      	str	r3, [sp, #24]
 8004a52:	3b30      	subs	r3, #48	; 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d9f3      	bls.n	8004a40 <_svfprintf_r+0x258>
 8004a58:	e7e7      	b.n	8004a2a <_svfprintf_r+0x242>
 8004a5a:	f04b 0b08 	orr.w	fp, fp, #8
 8004a5e:	e7b2      	b.n	80049c6 <_svfprintf_r+0x1de>
 8004a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b68      	cmp	r3, #104	; 0x68
 8004a66:	bf01      	itttt	eq
 8004a68:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8004a6a:	3301      	addeq	r3, #1
 8004a6c:	930b      	streq	r3, [sp, #44]	; 0x2c
 8004a6e:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8004a72:	bf18      	it	ne
 8004a74:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8004a78:	e7a5      	b.n	80049c6 <_svfprintf_r+0x1de>
 8004a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b6c      	cmp	r3, #108	; 0x6c
 8004a80:	d105      	bne.n	8004a8e <_svfprintf_r+0x2a6>
 8004a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a84:	3301      	adds	r3, #1
 8004a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a88:	f04b 0b20 	orr.w	fp, fp, #32
 8004a8c:	e79b      	b.n	80049c6 <_svfprintf_r+0x1de>
 8004a8e:	f04b 0b10 	orr.w	fp, fp, #16
 8004a92:	e798      	b.n	80049c6 <_svfprintf_r+0x1de>
 8004a94:	f3af 8000 	nop.w
	...
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f852 3b04 	ldr.w	r3, [r2], #4
 8004aa8:	9207      	str	r2, [sp, #28]
 8004aaa:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8004aae:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8004ab8:	9003      	str	r0, [sp, #12]
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	4606      	mov	r6, r0
 8004abe:	4605      	mov	r5, r0
 8004ac0:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8004ac4:	e1bc      	b.n	8004e40 <_svfprintf_r+0x658>
 8004ac6:	f04b 0b10 	orr.w	fp, fp, #16
 8004aca:	f01b 0f20 	tst.w	fp, #32
 8004ace:	d012      	beq.n	8004af6 <_svfprintf_r+0x30e>
 8004ad0:	1df3      	adds	r3, r6, #7
 8004ad2:	f023 0307 	bic.w	r3, r3, #7
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	685d      	ldr	r5, [r3, #4]
 8004ada:	f852 6b08 	ldr.w	r6, [r2], #8
 8004ade:	9207      	str	r2, [sp, #28]
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	da06      	bge.n	8004af2 <_svfprintf_r+0x30a>
 8004ae4:	4276      	negs	r6, r6
 8004ae6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004aea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8004aee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004af2:	2301      	movs	r3, #1
 8004af4:	e396      	b.n	8005224 <_svfprintf_r+0xa3c>
 8004af6:	4633      	mov	r3, r6
 8004af8:	f01b 0f10 	tst.w	fp, #16
 8004afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b00:	9307      	str	r3, [sp, #28]
 8004b02:	d002      	beq.n	8004b0a <_svfprintf_r+0x322>
 8004b04:	462e      	mov	r6, r5
 8004b06:	17ed      	asrs	r5, r5, #31
 8004b08:	e7ea      	b.n	8004ae0 <_svfprintf_r+0x2f8>
 8004b0a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004b0e:	d003      	beq.n	8004b18 <_svfprintf_r+0x330>
 8004b10:	b22e      	sxth	r6, r5
 8004b12:	f345 35c0 	sbfx	r5, r5, #15, #1
 8004b16:	e7e3      	b.n	8004ae0 <_svfprintf_r+0x2f8>
 8004b18:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8004b1c:	d0f2      	beq.n	8004b04 <_svfprintf_r+0x31c>
 8004b1e:	b26e      	sxtb	r6, r5
 8004b20:	f345 15c0 	sbfx	r5, r5, #7, #1
 8004b24:	e7dc      	b.n	8004ae0 <_svfprintf_r+0x2f8>
 8004b26:	3607      	adds	r6, #7
 8004b28:	f026 0307 	bic.w	r3, r6, #7
 8004b2c:	ecb3 7b02 	vldmia	r3!, {d7}
 8004b30:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004b34:	9307      	str	r3, [sp, #28]
 8004b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b38:	ee09 3a10 	vmov	s18, r3
 8004b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b42:	ee09 3a90 	vmov	s19, r3
 8004b46:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <_svfprintf_r+0x44c>)
 8004b4c:	ec51 0b19 	vmov	r0, r1, d9
 8004b50:	f7fb ffec 	bl	8000b2c <__aeabi_dcmpun>
 8004b54:	bb10      	cbnz	r0, 8004b9c <_svfprintf_r+0x3b4>
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <_svfprintf_r+0x44c>)
 8004b58:	ec51 0b19 	vmov	r0, r1, d9
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b60:	f7fb ffc6 	bl	8000af0 <__aeabi_dcmple>
 8004b64:	b9d0      	cbnz	r0, 8004b9c <_svfprintf_r+0x3b4>
 8004b66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f7fb ffb5 	bl	8000adc <__aeabi_dcmplt>
 8004b72:	b110      	cbz	r0, 8004b7a <_svfprintf_r+0x392>
 8004b74:	232d      	movs	r3, #45	; 0x2d
 8004b76:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004b7a:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <_svfprintf_r+0x450>)
 8004b7c:	482f      	ldr	r0, [pc, #188]	; (8004c3c <_svfprintf_r+0x454>)
 8004b7e:	9b06      	ldr	r3, [sp, #24]
 8004b80:	2100      	movs	r1, #0
 8004b82:	2b47      	cmp	r3, #71	; 0x47
 8004b84:	bfd4      	ite	le
 8004b86:	4691      	movle	r9, r2
 8004b88:	4681      	movgt	r9, r0
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8004b90:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8004b94:	2600      	movs	r6, #0
 8004b96:	4633      	mov	r3, r6
 8004b98:	f001 b800 	b.w	8005b9c <_svfprintf_r+0x13b4>
 8004b9c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f7fb ffc2 	bl	8000b2c <__aeabi_dcmpun>
 8004ba8:	b140      	cbz	r0, 8004bbc <_svfprintf_r+0x3d4>
 8004baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bac:	4a24      	ldr	r2, [pc, #144]	; (8004c40 <_svfprintf_r+0x458>)
 8004bae:	4825      	ldr	r0, [pc, #148]	; (8004c44 <_svfprintf_r+0x45c>)
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bfbc      	itt	lt
 8004bb4:	232d      	movlt	r3, #45	; 0x2d
 8004bb6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8004bba:	e7e0      	b.n	8004b7e <_svfprintf_r+0x396>
 8004bbc:	9b06      	ldr	r3, [sp, #24]
 8004bbe:	f023 0320 	bic.w	r3, r3, #32
 8004bc2:	2b41      	cmp	r3, #65	; 0x41
 8004bc4:	9308      	str	r3, [sp, #32]
 8004bc6:	d125      	bne.n	8004c14 <_svfprintf_r+0x42c>
 8004bc8:	2330      	movs	r3, #48	; 0x30
 8004bca:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8004bce:	9b06      	ldr	r3, [sp, #24]
 8004bd0:	2b61      	cmp	r3, #97	; 0x61
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2378      	moveq	r3, #120	; 0x78
 8004bd6:	2358      	movne	r3, #88	; 0x58
 8004bd8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8004bdc:	9b04      	ldr	r3, [sp, #16]
 8004bde:	2b63      	cmp	r3, #99	; 0x63
 8004be0:	f04b 0b02 	orr.w	fp, fp, #2
 8004be4:	dd30      	ble.n	8004c48 <_svfprintf_r+0x460>
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	4650      	mov	r0, sl
 8004bea:	f001 ff83 	bl	8006af4 <_malloc_r>
 8004bee:	4681      	mov	r9, r0
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f040 81fd 	bne.w	8004ff0 <_svfprintf_r+0x808>
 8004bf6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfe:	f8a8 300c 	strh.w	r3, [r8, #12]
 8004c02:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004c06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c0c:	bf18      	it	ne
 8004c0e:	f04f 33ff 	movne.w	r3, #4294967295
 8004c12:	e60f      	b.n	8004834 <_svfprintf_r+0x4c>
 8004c14:	9b04      	ldr	r3, [sp, #16]
 8004c16:	3301      	adds	r3, #1
 8004c18:	f000 81ec 	beq.w	8004ff4 <_svfprintf_r+0x80c>
 8004c1c:	9b08      	ldr	r3, [sp, #32]
 8004c1e:	2b47      	cmp	r3, #71	; 0x47
 8004c20:	f040 81eb 	bne.w	8004ffa <_svfprintf_r+0x812>
 8004c24:	9b04      	ldr	r3, [sp, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f040 81e7 	bne.w	8004ffa <_svfprintf_r+0x812>
 8004c2c:	9303      	str	r3, [sp, #12]
 8004c2e:	2301      	movs	r3, #1
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	e00c      	b.n	8004c4e <_svfprintf_r+0x466>
 8004c34:	7fefffff 	.word	0x7fefffff
 8004c38:	08009d6c 	.word	0x08009d6c
 8004c3c:	08009d70 	.word	0x08009d70
 8004c40:	08009d74 	.word	0x08009d74
 8004c44:	08009d78 	.word	0x08009d78
 8004c48:	9003      	str	r0, [sp, #12]
 8004c4a:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8004c4e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8004c52:	9311      	str	r3, [sp, #68]	; 0x44
 8004c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f280 81d1 	bge.w	8004ffe <_svfprintf_r+0x816>
 8004c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c5e:	ee08 3a10 	vmov	s16, r3
 8004c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c68:	ee08 3a90 	vmov	s17, r3
 8004c6c:	232d      	movs	r3, #45	; 0x2d
 8004c6e:	9318      	str	r3, [sp, #96]	; 0x60
 8004c70:	9b08      	ldr	r3, [sp, #32]
 8004c72:	2b41      	cmp	r3, #65	; 0x41
 8004c74:	f040 81e1 	bne.w	800503a <_svfprintf_r+0x852>
 8004c78:	eeb0 0a48 	vmov.f32	s0, s16
 8004c7c:	eef0 0a68 	vmov.f32	s1, s17
 8004c80:	a81c      	add	r0, sp, #112	; 0x70
 8004c82:	f002 fcc3 	bl	800760c <frexp>
 8004c86:	2200      	movs	r2, #0
 8004c88:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004c8c:	ec51 0b10 	vmov	r0, r1, d0
 8004c90:	f7fb fcb2 	bl	80005f8 <__aeabi_dmul>
 8004c94:	2200      	movs	r2, #0
 8004c96:	2300      	movs	r3, #0
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	f7fb ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ca0:	b108      	cbz	r0, 8004ca6 <_svfprintf_r+0x4be>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	931c      	str	r3, [sp, #112]	; 0x70
 8004ca6:	4ba7      	ldr	r3, [pc, #668]	; (8004f44 <_svfprintf_r+0x75c>)
 8004ca8:	4aa7      	ldr	r2, [pc, #668]	; (8004f48 <_svfprintf_r+0x760>)
 8004caa:	9906      	ldr	r1, [sp, #24]
 8004cac:	2961      	cmp	r1, #97	; 0x61
 8004cae:	bf18      	it	ne
 8004cb0:	461a      	movne	r2, r3
 8004cb2:	9b04      	ldr	r3, [sp, #16]
 8004cb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	9305      	str	r3, [sp, #20]
 8004cba:	464d      	mov	r5, r9
 8004cbc:	4ba3      	ldr	r3, [pc, #652]	; (8004f4c <_svfprintf_r+0x764>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb fc98 	bl	80005f8 <__aeabi_dmul>
 8004cc8:	460f      	mov	r7, r1
 8004cca:	4606      	mov	r6, r0
 8004ccc:	f7fb ff44 	bl	8000b58 <__aeabi_d2iz>
 8004cd0:	9019      	str	r0, [sp, #100]	; 0x64
 8004cd2:	f7fb fc27 	bl	8000524 <__aeabi_i2d>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4630      	mov	r0, r6
 8004cdc:	4639      	mov	r1, r7
 8004cde:	f7fb fad3 	bl	8000288 <__aeabi_dsub>
 8004ce2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ce6:	5c9b      	ldrb	r3, [r3, r2]
 8004ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8004cec:	9b05      	ldr	r3, [sp, #20]
 8004cee:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	460f      	mov	r7, r1
 8004cf6:	d007      	beq.n	8004d08 <_svfprintf_r+0x520>
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f7fb fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d0d9      	beq.n	8004cbc <_svfprintf_r+0x4d4>
 8004d08:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <_svfprintf_r+0x768>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	4639      	mov	r1, r7
 8004d10:	f7fb ff02 	bl	8000b18 <__aeabi_dcmpgt>
 8004d14:	b960      	cbnz	r0, 8004d30 <_svfprintf_r+0x548>
 8004d16:	4b8e      	ldr	r3, [pc, #568]	; (8004f50 <_svfprintf_r+0x768>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	f7fb fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	f000 8184 	beq.w	8005030 <_svfprintf_r+0x848>
 8004d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d2a:	07db      	lsls	r3, r3, #31
 8004d2c:	f140 8180 	bpl.w	8005030 <_svfprintf_r+0x848>
 8004d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d32:	9520      	str	r5, [sp, #128]	; 0x80
 8004d34:	7bd9      	ldrb	r1, [r3, #15]
 8004d36:	2030      	movs	r0, #48	; 0x30
 8004d38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d3a:	1e53      	subs	r3, r2, #1
 8004d3c:	9320      	str	r3, [sp, #128]	; 0x80
 8004d3e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004d42:	428b      	cmp	r3, r1
 8004d44:	f000 8163 	beq.w	800500e <_svfprintf_r+0x826>
 8004d48:	2b39      	cmp	r3, #57	; 0x39
 8004d4a:	bf0b      	itete	eq
 8004d4c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8004d4e:	3301      	addne	r3, #1
 8004d50:	7a9b      	ldrbeq	r3, [r3, #10]
 8004d52:	b2db      	uxtbne	r3, r3
 8004d54:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004d58:	eba5 0309 	sub.w	r3, r5, r9
 8004d5c:	9305      	str	r3, [sp, #20]
 8004d5e:	9b08      	ldr	r3, [sp, #32]
 8004d60:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004d62:	2b47      	cmp	r3, #71	; 0x47
 8004d64:	f040 81b1 	bne.w	80050ca <_svfprintf_r+0x8e2>
 8004d68:	1cef      	adds	r7, r5, #3
 8004d6a:	db03      	blt.n	8004d74 <_svfprintf_r+0x58c>
 8004d6c:	9b04      	ldr	r3, [sp, #16]
 8004d6e:	42ab      	cmp	r3, r5
 8004d70:	f280 81d6 	bge.w	8005120 <_svfprintf_r+0x938>
 8004d74:	9b06      	ldr	r3, [sp, #24]
 8004d76:	3b02      	subs	r3, #2
 8004d78:	9306      	str	r3, [sp, #24]
 8004d7a:	9906      	ldr	r1, [sp, #24]
 8004d7c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004d80:	f021 0120 	bic.w	r1, r1, #32
 8004d84:	2941      	cmp	r1, #65	; 0x41
 8004d86:	bf08      	it	eq
 8004d88:	320f      	addeq	r2, #15
 8004d8a:	f105 33ff 	add.w	r3, r5, #4294967295
 8004d8e:	bf06      	itte	eq
 8004d90:	b2d2      	uxtbeq	r2, r2
 8004d92:	2101      	moveq	r1, #1
 8004d94:	2100      	movne	r1, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	931c      	str	r3, [sp, #112]	; 0x70
 8004d9a:	bfb8      	it	lt
 8004d9c:	f1c5 0301 	rsblt	r3, r5, #1
 8004da0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8004da4:	bfb4      	ite	lt
 8004da6:	222d      	movlt	r2, #45	; 0x2d
 8004da8:	222b      	movge	r2, #43	; 0x2b
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8004db0:	f340 81a4 	ble.w	80050fc <_svfprintf_r+0x914>
 8004db4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8004db8:	260a      	movs	r6, #10
 8004dba:	4611      	mov	r1, r2
 8004dbc:	fb93 f5f6 	sdiv	r5, r3, r6
 8004dc0:	fb06 3015 	mls	r0, r6, r5, r3
 8004dc4:	3030      	adds	r0, #48	; 0x30
 8004dc6:	f801 0c01 	strb.w	r0, [r1, #-1]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	2863      	cmp	r0, #99	; 0x63
 8004dce:	f102 32ff 	add.w	r2, r2, #4294967295
 8004dd2:	462b      	mov	r3, r5
 8004dd4:	dcf1      	bgt.n	8004dba <_svfprintf_r+0x5d2>
 8004dd6:	3330      	adds	r3, #48	; 0x30
 8004dd8:	1e88      	subs	r0, r1, #2
 8004dda:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004dde:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8004de2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8004de6:	4603      	mov	r3, r0
 8004de8:	42ab      	cmp	r3, r5
 8004dea:	f0c0 8182 	bcc.w	80050f2 <_svfprintf_r+0x90a>
 8004dee:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8004df2:	1a52      	subs	r2, r2, r1
 8004df4:	42a8      	cmp	r0, r5
 8004df6:	bf88      	it	hi
 8004df8:	2200      	movhi	r2, #0
 8004dfa:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8004dfe:	441a      	add	r2, r3
 8004e00:	ab1e      	add	r3, sp, #120	; 0x78
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	9a05      	ldr	r2, [sp, #20]
 8004e06:	9315      	str	r3, [sp, #84]	; 0x54
 8004e08:	2a01      	cmp	r2, #1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	dc02      	bgt.n	8004e16 <_svfprintf_r+0x62e>
 8004e10:	f01b 0f01 	tst.w	fp, #1
 8004e14:	d003      	beq.n	8004e1e <_svfprintf_r+0x636>
 8004e16:	9b04      	ldr	r3, [sp, #16]
 8004e18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e1a:	4413      	add	r3, r2
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8004e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e26:	9311      	str	r3, [sp, #68]	; 0x44
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8004e2e:	461d      	mov	r5, r3
 8004e30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004e32:	b113      	cbz	r3, 8004e3a <_svfprintf_r+0x652>
 8004e34:	232d      	movs	r3, #45	; 0x2d
 8004e36:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8004e3a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8004e3e:	2600      	movs	r6, #0
 8004e40:	9b04      	ldr	r3, [sp, #16]
 8004e42:	42b3      	cmp	r3, r6
 8004e44:	bfb8      	it	lt
 8004e46:	4633      	movlt	r3, r6
 8004e48:	9311      	str	r3, [sp, #68]	; 0x44
 8004e4a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8004e4e:	b113      	cbz	r3, 8004e56 <_svfprintf_r+0x66e>
 8004e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e52:	3301      	adds	r3, #1
 8004e54:	9311      	str	r3, [sp, #68]	; 0x44
 8004e56:	f01b 0302 	ands.w	r3, fp, #2
 8004e5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8004e5c:	bf1e      	ittt	ne
 8004e5e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8004e60:	3302      	addne	r3, #2
 8004e62:	9311      	strne	r3, [sp, #68]	; 0x44
 8004e64:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8004e68:	9318      	str	r3, [sp, #96]	; 0x60
 8004e6a:	d11f      	bne.n	8004eac <_svfprintf_r+0x6c4>
 8004e6c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8004e70:	1a9f      	subs	r7, r3, r2
 8004e72:	2f00      	cmp	r7, #0
 8004e74:	dd1a      	ble.n	8004eac <_svfprintf_r+0x6c4>
 8004e76:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004e7a:	4836      	ldr	r0, [pc, #216]	; (8004f54 <_svfprintf_r+0x76c>)
 8004e7c:	6020      	str	r0, [r4, #0]
 8004e7e:	2f10      	cmp	r7, #16
 8004e80:	f103 0301 	add.w	r3, r3, #1
 8004e84:	f104 0108 	add.w	r1, r4, #8
 8004e88:	f300 82ed 	bgt.w	8005466 <_svfprintf_r+0xc7e>
 8004e8c:	6067      	str	r7, [r4, #4]
 8004e8e:	2b07      	cmp	r3, #7
 8004e90:	4417      	add	r7, r2
 8004e92:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8004e96:	f340 82f9 	ble.w	800548c <_svfprintf_r+0xca4>
 8004e9a:	aa22      	add	r2, sp, #136	; 0x88
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f002 fc0f 	bl	80076c2 <__ssprint_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f040 8621 	bne.w	8005aec <_svfprintf_r+0x1304>
 8004eaa:	ac25      	add	r4, sp, #148	; 0x94
 8004eac:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8004eb0:	b173      	cbz	r3, 8004ed0 <_svfprintf_r+0x6e8>
 8004eb2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	6063      	str	r3, [r4, #4]
 8004ebc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	9324      	str	r3, [sp, #144]	; 0x90
 8004ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	9323      	str	r3, [sp, #140]	; 0x8c
 8004eca:	f300 82e1 	bgt.w	8005490 <_svfprintf_r+0xca8>
 8004ece:	3408      	adds	r4, #8
 8004ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ed2:	b16b      	cbz	r3, 8004ef0 <_svfprintf_r+0x708>
 8004ed4:	ab1b      	add	r3, sp, #108	; 0x6c
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	2302      	movs	r3, #2
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ede:	3302      	adds	r3, #2
 8004ee0:	9324      	str	r3, [sp, #144]	; 0x90
 8004ee2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	2b07      	cmp	r3, #7
 8004ee8:	9323      	str	r3, [sp, #140]	; 0x8c
 8004eea:	f300 82db 	bgt.w	80054a4 <_svfprintf_r+0xcbc>
 8004eee:	3408      	adds	r4, #8
 8004ef0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d11f      	bne.n	8004f36 <_svfprintf_r+0x74e>
 8004ef6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8004efa:	1a9f      	subs	r7, r3, r2
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	dd1a      	ble.n	8004f36 <_svfprintf_r+0x74e>
 8004f00:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004f04:	4814      	ldr	r0, [pc, #80]	; (8004f58 <_svfprintf_r+0x770>)
 8004f06:	6020      	str	r0, [r4, #0]
 8004f08:	2f10      	cmp	r7, #16
 8004f0a:	f103 0301 	add.w	r3, r3, #1
 8004f0e:	f104 0108 	add.w	r1, r4, #8
 8004f12:	f300 82d1 	bgt.w	80054b8 <_svfprintf_r+0xcd0>
 8004f16:	6067      	str	r7, [r4, #4]
 8004f18:	2b07      	cmp	r3, #7
 8004f1a:	4417      	add	r7, r2
 8004f1c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8004f20:	f340 82dd 	ble.w	80054de <_svfprintf_r+0xcf6>
 8004f24:	aa22      	add	r2, sp, #136	; 0x88
 8004f26:	4641      	mov	r1, r8
 8004f28:	4650      	mov	r0, sl
 8004f2a:	f002 fbca 	bl	80076c2 <__ssprint_r>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f040 85dc 	bne.w	8005aec <_svfprintf_r+0x1304>
 8004f34:	ac25      	add	r4, sp, #148	; 0x94
 8004f36:	9b04      	ldr	r3, [sp, #16]
 8004f38:	1af6      	subs	r6, r6, r3
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	dd28      	ble.n	8004f90 <_svfprintf_r+0x7a8>
 8004f3e:	4f06      	ldr	r7, [pc, #24]	; (8004f58 <_svfprintf_r+0x770>)
 8004f40:	e00c      	b.n	8004f5c <_svfprintf_r+0x774>
 8004f42:	bf00      	nop
 8004f44:	08009d8d 	.word	0x08009d8d
 8004f48:	08009d7c 	.word	0x08009d7c
 8004f4c:	40300000 	.word	0x40300000
 8004f50:	3fe00000 	.word	0x3fe00000
 8004f54:	08009da0 	.word	0x08009da0
 8004f58:	08009db0 	.word	0x08009db0
 8004f5c:	6027      	str	r7, [r4, #0]
 8004f5e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8004f62:	2e10      	cmp	r6, #16
 8004f64:	f103 0301 	add.w	r3, r3, #1
 8004f68:	f104 0108 	add.w	r1, r4, #8
 8004f6c:	f300 82b9 	bgt.w	80054e2 <_svfprintf_r+0xcfa>
 8004f70:	6066      	str	r6, [r4, #4]
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	4416      	add	r6, r2
 8004f76:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8004f7a:	f340 82c5 	ble.w	8005508 <_svfprintf_r+0xd20>
 8004f7e:	aa22      	add	r2, sp, #136	; 0x88
 8004f80:	4641      	mov	r1, r8
 8004f82:	4650      	mov	r0, sl
 8004f84:	f002 fb9d 	bl	80076c2 <__ssprint_r>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	f040 85af 	bne.w	8005aec <_svfprintf_r+0x1304>
 8004f8e:	ac25      	add	r4, sp, #148	; 0x94
 8004f90:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004f94:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8004f96:	f040 82bd 	bne.w	8005514 <_svfprintf_r+0xd2c>
 8004f9a:	9b04      	ldr	r3, [sp, #16]
 8004f9c:	f8c4 9000 	str.w	r9, [r4]
 8004fa0:	441e      	add	r6, r3
 8004fa2:	6063      	str	r3, [r4, #4]
 8004fa4:	9624      	str	r6, [sp, #144]	; 0x90
 8004fa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fa8:	3301      	adds	r3, #1
 8004faa:	2b07      	cmp	r3, #7
 8004fac:	9323      	str	r3, [sp, #140]	; 0x8c
 8004fae:	f300 82f6 	bgt.w	800559e <_svfprintf_r+0xdb6>
 8004fb2:	3408      	adds	r4, #8
 8004fb4:	f01b 0f04 	tst.w	fp, #4
 8004fb8:	f040 857a 	bne.w	8005ab0 <_svfprintf_r+0x12c8>
 8004fbc:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8004fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fc2:	428a      	cmp	r2, r1
 8004fc4:	bfac      	ite	ge
 8004fc6:	189b      	addge	r3, r3, r2
 8004fc8:	185b      	addlt	r3, r3, r1
 8004fca:	930c      	str	r3, [sp, #48]	; 0x30
 8004fcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004fce:	b13b      	cbz	r3, 8004fe0 <_svfprintf_r+0x7f8>
 8004fd0:	aa22      	add	r2, sp, #136	; 0x88
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	f002 fb74 	bl	80076c2 <__ssprint_r>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f040 8586 	bne.w	8005aec <_svfprintf_r+0x1304>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9323      	str	r3, [sp, #140]	; 0x8c
 8004fe4:	9b03      	ldr	r3, [sp, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 859c 	bne.w	8005b24 <_svfprintf_r+0x133c>
 8004fec:	ac25      	add	r4, sp, #148	; 0x94
 8004fee:	e0ec      	b.n	80051ca <_svfprintf_r+0x9e2>
 8004ff0:	9003      	str	r0, [sp, #12]
 8004ff2:	e62c      	b.n	8004c4e <_svfprintf_r+0x466>
 8004ff4:	9003      	str	r0, [sp, #12]
 8004ff6:	2306      	movs	r3, #6
 8004ff8:	e61a      	b.n	8004c30 <_svfprintf_r+0x448>
 8004ffa:	9003      	str	r0, [sp, #12]
 8004ffc:	e627      	b.n	8004c4e <_svfprintf_r+0x466>
 8004ffe:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8005002:	2300      	movs	r3, #0
 8005004:	eeb0 8a47 	vmov.f32	s16, s14
 8005008:	eef0 8a67 	vmov.f32	s17, s15
 800500c:	e62f      	b.n	8004c6e <_svfprintf_r+0x486>
 800500e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8005012:	e691      	b.n	8004d38 <_svfprintf_r+0x550>
 8005014:	f803 0b01 	strb.w	r0, [r3], #1
 8005018:	1aca      	subs	r2, r1, r3
 800501a:	2a00      	cmp	r2, #0
 800501c:	dafa      	bge.n	8005014 <_svfprintf_r+0x82c>
 800501e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005022:	3201      	adds	r2, #1
 8005024:	f103 0301 	add.w	r3, r3, #1
 8005028:	bfb8      	it	lt
 800502a:	2300      	movlt	r3, #0
 800502c:	441d      	add	r5, r3
 800502e:	e693      	b.n	8004d58 <_svfprintf_r+0x570>
 8005030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005032:	462b      	mov	r3, r5
 8005034:	18a9      	adds	r1, r5, r2
 8005036:	2030      	movs	r0, #48	; 0x30
 8005038:	e7ee      	b.n	8005018 <_svfprintf_r+0x830>
 800503a:	9b08      	ldr	r3, [sp, #32]
 800503c:	2b46      	cmp	r3, #70	; 0x46
 800503e:	d005      	beq.n	800504c <_svfprintf_r+0x864>
 8005040:	2b45      	cmp	r3, #69	; 0x45
 8005042:	d11b      	bne.n	800507c <_svfprintf_r+0x894>
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	1c5d      	adds	r5, r3, #1
 8005048:	2102      	movs	r1, #2
 800504a:	e001      	b.n	8005050 <_svfprintf_r+0x868>
 800504c:	9d04      	ldr	r5, [sp, #16]
 800504e:	2103      	movs	r1, #3
 8005050:	ab20      	add	r3, sp, #128	; 0x80
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	ab1d      	add	r3, sp, #116	; 0x74
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	462a      	mov	r2, r5
 800505a:	ab1c      	add	r3, sp, #112	; 0x70
 800505c:	4650      	mov	r0, sl
 800505e:	eeb0 0a48 	vmov.f32	s0, s16
 8005062:	eef0 0a68 	vmov.f32	s1, s17
 8005066:	f000 fe3f 	bl	8005ce8 <_dtoa_r>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	2b47      	cmp	r3, #71	; 0x47
 800506e:	4681      	mov	r9, r0
 8005070:	d106      	bne.n	8005080 <_svfprintf_r+0x898>
 8005072:	f01b 0f01 	tst.w	fp, #1
 8005076:	d103      	bne.n	8005080 <_svfprintf_r+0x898>
 8005078:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800507a:	e66d      	b.n	8004d58 <_svfprintf_r+0x570>
 800507c:	9d04      	ldr	r5, [sp, #16]
 800507e:	e7e3      	b.n	8005048 <_svfprintf_r+0x860>
 8005080:	9b08      	ldr	r3, [sp, #32]
 8005082:	2b46      	cmp	r3, #70	; 0x46
 8005084:	eb09 0605 	add.w	r6, r9, r5
 8005088:	d10f      	bne.n	80050aa <_svfprintf_r+0x8c2>
 800508a:	f899 3000 	ldrb.w	r3, [r9]
 800508e:	2b30      	cmp	r3, #48	; 0x30
 8005090:	d109      	bne.n	80050a6 <_svfprintf_r+0x8be>
 8005092:	ec51 0b18 	vmov	r0, r1, d8
 8005096:	2200      	movs	r2, #0
 8005098:	2300      	movs	r3, #0
 800509a:	f7fb fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 800509e:	b910      	cbnz	r0, 80050a6 <_svfprintf_r+0x8be>
 80050a0:	f1c5 0501 	rsb	r5, r5, #1
 80050a4:	951c      	str	r5, [sp, #112]	; 0x70
 80050a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80050a8:	441e      	add	r6, r3
 80050aa:	ec51 0b18 	vmov	r0, r1, d8
 80050ae:	2200      	movs	r2, #0
 80050b0:	2300      	movs	r3, #0
 80050b2:	f7fb fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80050b6:	b100      	cbz	r0, 80050ba <_svfprintf_r+0x8d2>
 80050b8:	9620      	str	r6, [sp, #128]	; 0x80
 80050ba:	2230      	movs	r2, #48	; 0x30
 80050bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050be:	429e      	cmp	r6, r3
 80050c0:	d9da      	bls.n	8005078 <_svfprintf_r+0x890>
 80050c2:	1c59      	adds	r1, r3, #1
 80050c4:	9120      	str	r1, [sp, #128]	; 0x80
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e7f8      	b.n	80050bc <_svfprintf_r+0x8d4>
 80050ca:	9b08      	ldr	r3, [sp, #32]
 80050cc:	2b46      	cmp	r3, #70	; 0x46
 80050ce:	f47f ae54 	bne.w	8004d7a <_svfprintf_r+0x592>
 80050d2:	9a04      	ldr	r2, [sp, #16]
 80050d4:	f00b 0301 	and.w	r3, fp, #1
 80050d8:	2d00      	cmp	r5, #0
 80050da:	ea43 0302 	orr.w	r3, r3, r2
 80050de:	dd1a      	ble.n	8005116 <_svfprintf_r+0x92e>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d034      	beq.n	800514e <_svfprintf_r+0x966>
 80050e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e6:	18eb      	adds	r3, r5, r3
 80050e8:	441a      	add	r2, r3
 80050ea:	9204      	str	r2, [sp, #16]
 80050ec:	2366      	movs	r3, #102	; 0x66
 80050ee:	9306      	str	r3, [sp, #24]
 80050f0:	e033      	b.n	800515a <_svfprintf_r+0x972>
 80050f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80050f6:	f802 6b01 	strb.w	r6, [r2], #1
 80050fa:	e675      	b.n	8004de8 <_svfprintf_r+0x600>
 80050fc:	b941      	cbnz	r1, 8005110 <_svfprintf_r+0x928>
 80050fe:	2230      	movs	r2, #48	; 0x30
 8005100:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8005104:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005108:	3330      	adds	r3, #48	; 0x30
 800510a:	f802 3b01 	strb.w	r3, [r2], #1
 800510e:	e677      	b.n	8004e00 <_svfprintf_r+0x618>
 8005110:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8005114:	e7f8      	b.n	8005108 <_svfprintf_r+0x920>
 8005116:	b1e3      	cbz	r3, 8005152 <_svfprintf_r+0x96a>
 8005118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511a:	9a04      	ldr	r2, [sp, #16]
 800511c:	3301      	adds	r3, #1
 800511e:	e7e3      	b.n	80050e8 <_svfprintf_r+0x900>
 8005120:	9b05      	ldr	r3, [sp, #20]
 8005122:	429d      	cmp	r5, r3
 8005124:	db07      	blt.n	8005136 <_svfprintf_r+0x94e>
 8005126:	f01b 0f01 	tst.w	fp, #1
 800512a:	d02d      	beq.n	8005188 <_svfprintf_r+0x9a0>
 800512c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800512e:	18eb      	adds	r3, r5, r3
 8005130:	9304      	str	r3, [sp, #16]
 8005132:	2367      	movs	r3, #103	; 0x67
 8005134:	e7db      	b.n	80050ee <_svfprintf_r+0x906>
 8005136:	9b05      	ldr	r3, [sp, #20]
 8005138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800513a:	2d00      	cmp	r5, #0
 800513c:	4413      	add	r3, r2
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	dcf7      	bgt.n	8005132 <_svfprintf_r+0x94a>
 8005142:	9a04      	ldr	r2, [sp, #16]
 8005144:	f1c5 0301 	rsb	r3, r5, #1
 8005148:	441a      	add	r2, r3
 800514a:	9204      	str	r2, [sp, #16]
 800514c:	e7f1      	b.n	8005132 <_svfprintf_r+0x94a>
 800514e:	9504      	str	r5, [sp, #16]
 8005150:	e7cc      	b.n	80050ec <_svfprintf_r+0x904>
 8005152:	2366      	movs	r3, #102	; 0x66
 8005154:	9306      	str	r3, [sp, #24]
 8005156:	2301      	movs	r3, #1
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800515e:	9309      	str	r3, [sp, #36]	; 0x24
 8005160:	d025      	beq.n	80051ae <_svfprintf_r+0x9c6>
 8005162:	2300      	movs	r3, #0
 8005164:	2d00      	cmp	r5, #0
 8005166:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800516a:	f77f ae61 	ble.w	8004e30 <_svfprintf_r+0x648>
 800516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2bff      	cmp	r3, #255	; 0xff
 8005174:	d10a      	bne.n	800518c <_svfprintf_r+0x9a4>
 8005176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800517a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800517c:	4413      	add	r3, r2
 800517e:	9a04      	ldr	r2, [sp, #16]
 8005180:	fb01 2303 	mla	r3, r1, r3, r2
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	e653      	b.n	8004e30 <_svfprintf_r+0x648>
 8005188:	9504      	str	r5, [sp, #16]
 800518a:	e7d2      	b.n	8005132 <_svfprintf_r+0x94a>
 800518c:	42ab      	cmp	r3, r5
 800518e:	daf2      	bge.n	8005176 <_svfprintf_r+0x98e>
 8005190:	1aed      	subs	r5, r5, r3
 8005192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	b133      	cbz	r3, 80051a6 <_svfprintf_r+0x9be>
 8005198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519a:	3301      	adds	r3, #1
 800519c:	9309      	str	r3, [sp, #36]	; 0x24
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	3301      	adds	r3, #1
 80051a2:	930a      	str	r3, [sp, #40]	; 0x28
 80051a4:	e7e3      	b.n	800516e <_svfprintf_r+0x986>
 80051a6:	9b08      	ldr	r3, [sp, #32]
 80051a8:	3301      	adds	r3, #1
 80051aa:	9308      	str	r3, [sp, #32]
 80051ac:	e7df      	b.n	800516e <_svfprintf_r+0x986>
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	9308      	str	r3, [sp, #32]
 80051b2:	e63d      	b.n	8004e30 <_svfprintf_r+0x648>
 80051b4:	1d33      	adds	r3, r6, #4
 80051b6:	f01b 0f20 	tst.w	fp, #32
 80051ba:	9307      	str	r3, [sp, #28]
 80051bc:	d00a      	beq.n	80051d4 <_svfprintf_r+0x9ec>
 80051be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051c4:	17d2      	asrs	r2, r2, #31
 80051c6:	e9c3 1200 	strd	r1, r2, [r3]
 80051ca:	9e07      	ldr	r6, [sp, #28]
 80051cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80051d0:	f7ff bb4a 	b.w	8004868 <_svfprintf_r+0x80>
 80051d4:	f01b 0f10 	tst.w	fp, #16
 80051d8:	d003      	beq.n	80051e2 <_svfprintf_r+0x9fa>
 80051da:	6833      	ldr	r3, [r6, #0]
 80051dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e7f3      	b.n	80051ca <_svfprintf_r+0x9e2>
 80051e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80051e6:	d003      	beq.n	80051f0 <_svfprintf_r+0xa08>
 80051e8:	6833      	ldr	r3, [r6, #0]
 80051ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	e7ec      	b.n	80051ca <_svfprintf_r+0x9e2>
 80051f0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80051f4:	d0f1      	beq.n	80051da <_svfprintf_r+0x9f2>
 80051f6:	6833      	ldr	r3, [r6, #0]
 80051f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e7e5      	b.n	80051ca <_svfprintf_r+0x9e2>
 80051fe:	f04b 0b10 	orr.w	fp, fp, #16
 8005202:	f01b 0320 	ands.w	r3, fp, #32
 8005206:	d01f      	beq.n	8005248 <_svfprintf_r+0xa60>
 8005208:	1df3      	adds	r3, r6, #7
 800520a:	f023 0307 	bic.w	r3, r3, #7
 800520e:	461a      	mov	r2, r3
 8005210:	685d      	ldr	r5, [r3, #4]
 8005212:	f852 6b08 	ldr.w	r6, [r2], #8
 8005216:	9207      	str	r2, [sp, #28]
 8005218:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800521c:	2300      	movs	r3, #0
 800521e:	2200      	movs	r2, #0
 8005220:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8005224:	9a04      	ldr	r2, [sp, #16]
 8005226:	3201      	adds	r2, #1
 8005228:	f000 848d 	beq.w	8005b46 <_svfprintf_r+0x135e>
 800522c:	ea56 0205 	orrs.w	r2, r6, r5
 8005230:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8005234:	f040 848c 	bne.w	8005b50 <_svfprintf_r+0x1368>
 8005238:	9a04      	ldr	r2, [sp, #16]
 800523a:	2a00      	cmp	r2, #0
 800523c:	f000 80f9 	beq.w	8005432 <_svfprintf_r+0xc4a>
 8005240:	2b01      	cmp	r3, #1
 8005242:	f040 8488 	bne.w	8005b56 <_svfprintf_r+0x136e>
 8005246:	e09f      	b.n	8005388 <_svfprintf_r+0xba0>
 8005248:	4632      	mov	r2, r6
 800524a:	f01b 0510 	ands.w	r5, fp, #16
 800524e:	f852 6b04 	ldr.w	r6, [r2], #4
 8005252:	9207      	str	r2, [sp, #28]
 8005254:	d001      	beq.n	800525a <_svfprintf_r+0xa72>
 8005256:	461d      	mov	r5, r3
 8005258:	e7de      	b.n	8005218 <_svfprintf_r+0xa30>
 800525a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800525e:	d001      	beq.n	8005264 <_svfprintf_r+0xa7c>
 8005260:	b2b6      	uxth	r6, r6
 8005262:	e7d9      	b.n	8005218 <_svfprintf_r+0xa30>
 8005264:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8005268:	d0d6      	beq.n	8005218 <_svfprintf_r+0xa30>
 800526a:	b2f6      	uxtb	r6, r6
 800526c:	e7f3      	b.n	8005256 <_svfprintf_r+0xa6e>
 800526e:	4633      	mov	r3, r6
 8005270:	2278      	movs	r2, #120	; 0x78
 8005272:	f853 6b04 	ldr.w	r6, [r3], #4
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	2330      	movs	r3, #48	; 0x30
 800527a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800527e:	4ba3      	ldr	r3, [pc, #652]	; (800550c <_svfprintf_r+0xd24>)
 8005280:	9316      	str	r3, [sp, #88]	; 0x58
 8005282:	2500      	movs	r5, #0
 8005284:	f04b 0b02 	orr.w	fp, fp, #2
 8005288:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800528c:	2302      	movs	r3, #2
 800528e:	9206      	str	r2, [sp, #24]
 8005290:	e7c5      	b.n	800521e <_svfprintf_r+0xa36>
 8005292:	4633      	mov	r3, r6
 8005294:	2500      	movs	r5, #0
 8005296:	f853 9b04 	ldr.w	r9, [r3], #4
 800529a:	9307      	str	r3, [sp, #28]
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80052a2:	1c58      	adds	r0, r3, #1
 80052a4:	d010      	beq.n	80052c8 <_svfprintf_r+0xae0>
 80052a6:	461a      	mov	r2, r3
 80052a8:	4629      	mov	r1, r5
 80052aa:	4648      	mov	r0, r9
 80052ac:	f7fa ff98 	bl	80001e0 <memchr>
 80052b0:	9003      	str	r0, [sp, #12]
 80052b2:	2800      	cmp	r0, #0
 80052b4:	f000 80d4 	beq.w	8005460 <_svfprintf_r+0xc78>
 80052b8:	eba0 0309 	sub.w	r3, r0, r9
 80052bc:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80052c0:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80052c4:	462e      	mov	r6, r5
 80052c6:	e5bb      	b.n	8004e40 <_svfprintf_r+0x658>
 80052c8:	4648      	mov	r0, r9
 80052ca:	f7fa ff81 	bl	80001d0 <strlen>
 80052ce:	e9cd 5003 	strd	r5, r0, [sp, #12]
 80052d2:	e45f      	b.n	8004b94 <_svfprintf_r+0x3ac>
 80052d4:	f04b 0b10 	orr.w	fp, fp, #16
 80052d8:	f01b 0320 	ands.w	r3, fp, #32
 80052dc:	d009      	beq.n	80052f2 <_svfprintf_r+0xb0a>
 80052de:	1df3      	adds	r3, r6, #7
 80052e0:	f023 0307 	bic.w	r3, r3, #7
 80052e4:	461a      	mov	r2, r3
 80052e6:	685d      	ldr	r5, [r3, #4]
 80052e8:	f852 6b08 	ldr.w	r6, [r2], #8
 80052ec:	9207      	str	r2, [sp, #28]
 80052ee:	2301      	movs	r3, #1
 80052f0:	e795      	b.n	800521e <_svfprintf_r+0xa36>
 80052f2:	4632      	mov	r2, r6
 80052f4:	f01b 0510 	ands.w	r5, fp, #16
 80052f8:	f852 6b04 	ldr.w	r6, [r2], #4
 80052fc:	9207      	str	r2, [sp, #28]
 80052fe:	d001      	beq.n	8005304 <_svfprintf_r+0xb1c>
 8005300:	461d      	mov	r5, r3
 8005302:	e7f4      	b.n	80052ee <_svfprintf_r+0xb06>
 8005304:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005308:	d001      	beq.n	800530e <_svfprintf_r+0xb26>
 800530a:	b2b6      	uxth	r6, r6
 800530c:	e7ef      	b.n	80052ee <_svfprintf_r+0xb06>
 800530e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8005312:	d0ec      	beq.n	80052ee <_svfprintf_r+0xb06>
 8005314:	b2f6      	uxtb	r6, r6
 8005316:	e7f3      	b.n	8005300 <_svfprintf_r+0xb18>
 8005318:	4b7d      	ldr	r3, [pc, #500]	; (8005510 <_svfprintf_r+0xd28>)
 800531a:	9316      	str	r3, [sp, #88]	; 0x58
 800531c:	f01b 0320 	ands.w	r3, fp, #32
 8005320:	d01b      	beq.n	800535a <_svfprintf_r+0xb72>
 8005322:	1df3      	adds	r3, r6, #7
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	461a      	mov	r2, r3
 800532a:	685d      	ldr	r5, [r3, #4]
 800532c:	f852 6b08 	ldr.w	r6, [r2], #8
 8005330:	9207      	str	r2, [sp, #28]
 8005332:	f01b 0f01 	tst.w	fp, #1
 8005336:	d00a      	beq.n	800534e <_svfprintf_r+0xb66>
 8005338:	ea56 0305 	orrs.w	r3, r6, r5
 800533c:	d007      	beq.n	800534e <_svfprintf_r+0xb66>
 800533e:	2330      	movs	r3, #48	; 0x30
 8005340:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8005344:	9b06      	ldr	r3, [sp, #24]
 8005346:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800534a:	f04b 0b02 	orr.w	fp, fp, #2
 800534e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8005352:	2302      	movs	r3, #2
 8005354:	e763      	b.n	800521e <_svfprintf_r+0xa36>
 8005356:	4b6d      	ldr	r3, [pc, #436]	; (800550c <_svfprintf_r+0xd24>)
 8005358:	e7df      	b.n	800531a <_svfprintf_r+0xb32>
 800535a:	4632      	mov	r2, r6
 800535c:	f01b 0510 	ands.w	r5, fp, #16
 8005360:	f852 6b04 	ldr.w	r6, [r2], #4
 8005364:	9207      	str	r2, [sp, #28]
 8005366:	d001      	beq.n	800536c <_svfprintf_r+0xb84>
 8005368:	461d      	mov	r5, r3
 800536a:	e7e2      	b.n	8005332 <_svfprintf_r+0xb4a>
 800536c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005370:	d001      	beq.n	8005376 <_svfprintf_r+0xb8e>
 8005372:	b2b6      	uxth	r6, r6
 8005374:	e7dd      	b.n	8005332 <_svfprintf_r+0xb4a>
 8005376:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800537a:	d0da      	beq.n	8005332 <_svfprintf_r+0xb4a>
 800537c:	b2f6      	uxtb	r6, r6
 800537e:	e7f3      	b.n	8005368 <_svfprintf_r+0xb80>
 8005380:	2e0a      	cmp	r6, #10
 8005382:	f175 0300 	sbcs.w	r3, r5, #0
 8005386:	d205      	bcs.n	8005394 <_svfprintf_r+0xbac>
 8005388:	3630      	adds	r6, #48	; 0x30
 800538a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800538e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8005392:	e3fb      	b.n	8005b8c <_svfprintf_r+0x13a4>
 8005394:	2300      	movs	r3, #0
 8005396:	9305      	str	r3, [sp, #20]
 8005398:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800539c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80053a0:	9303      	str	r3, [sp, #12]
 80053a2:	220a      	movs	r2, #10
 80053a4:	2300      	movs	r3, #0
 80053a6:	4630      	mov	r0, r6
 80053a8:	4629      	mov	r1, r5
 80053aa:	f7fb fc4d 	bl	8000c48 <__aeabi_uldivmod>
 80053ae:	9b05      	ldr	r3, [sp, #20]
 80053b0:	3301      	adds	r3, #1
 80053b2:	9305      	str	r3, [sp, #20]
 80053b4:	9b03      	ldr	r3, [sp, #12]
 80053b6:	3230      	adds	r2, #48	; 0x30
 80053b8:	f10b 39ff 	add.w	r9, fp, #4294967295
 80053bc:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80053c0:	b1d3      	cbz	r3, 80053f8 <_svfprintf_r+0xc10>
 80053c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c4:	9a05      	ldr	r2, [sp, #20]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d115      	bne.n	80053f8 <_svfprintf_r+0xc10>
 80053cc:	2aff      	cmp	r2, #255	; 0xff
 80053ce:	d013      	beq.n	80053f8 <_svfprintf_r+0xc10>
 80053d0:	2e0a      	cmp	r6, #10
 80053d2:	f175 0300 	sbcs.w	r3, r5, #0
 80053d6:	d30f      	bcc.n	80053f8 <_svfprintf_r+0xc10>
 80053d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80053dc:	eba9 0903 	sub.w	r9, r9, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	4648      	mov	r0, r9
 80053e4:	f002 f95a 	bl	800769c <strncpy>
 80053e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	b11b      	cbz	r3, 80053f6 <_svfprintf_r+0xc0e>
 80053ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f0:	3301      	adds	r3, #1
 80053f2:	930a      	str	r3, [sp, #40]	; 0x28
 80053f4:	2300      	movs	r3, #0
 80053f6:	9305      	str	r3, [sp, #20]
 80053f8:	2300      	movs	r3, #0
 80053fa:	220a      	movs	r2, #10
 80053fc:	4630      	mov	r0, r6
 80053fe:	4629      	mov	r1, r5
 8005400:	f7fb fc22 	bl	8000c48 <__aeabi_uldivmod>
 8005404:	2e0a      	cmp	r6, #10
 8005406:	f175 0300 	sbcs.w	r3, r5, #0
 800540a:	f0c0 83bf 	bcc.w	8005b8c <_svfprintf_r+0x13a4>
 800540e:	4606      	mov	r6, r0
 8005410:	460d      	mov	r5, r1
 8005412:	46cb      	mov	fp, r9
 8005414:	e7c5      	b.n	80053a2 <_svfprintf_r+0xbba>
 8005416:	f006 030f 	and.w	r3, r6, #15
 800541a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800541c:	0936      	lsrs	r6, r6, #4
 800541e:	5cd3      	ldrb	r3, [r2, r3]
 8005420:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005424:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8005428:	092d      	lsrs	r5, r5, #4
 800542a:	ea56 0305 	orrs.w	r3, r6, r5
 800542e:	d1f2      	bne.n	8005416 <_svfprintf_r+0xc2e>
 8005430:	e3ac      	b.n	8005b8c <_svfprintf_r+0x13a4>
 8005432:	b933      	cbnz	r3, 8005442 <_svfprintf_r+0xc5a>
 8005434:	f01b 0f01 	tst.w	fp, #1
 8005438:	d003      	beq.n	8005442 <_svfprintf_r+0xc5a>
 800543a:	2330      	movs	r3, #48	; 0x30
 800543c:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8005440:	e7a5      	b.n	800538e <_svfprintf_r+0xba6>
 8005442:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8005446:	e3a1      	b.n	8005b8c <_svfprintf_r+0x13a4>
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8370 	beq.w	8005b30 <_svfprintf_r+0x1348>
 8005450:	2000      	movs	r0, #0
 8005452:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8005456:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800545a:	9607      	str	r6, [sp, #28]
 800545c:	f7ff bb29 	b.w	8004ab2 <_svfprintf_r+0x2ca>
 8005460:	9e03      	ldr	r6, [sp, #12]
 8005462:	f7ff bb98 	b.w	8004b96 <_svfprintf_r+0x3ae>
 8005466:	2010      	movs	r0, #16
 8005468:	4402      	add	r2, r0
 800546a:	2b07      	cmp	r3, #7
 800546c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005470:	6060      	str	r0, [r4, #4]
 8005472:	dd08      	ble.n	8005486 <_svfprintf_r+0xc9e>
 8005474:	aa22      	add	r2, sp, #136	; 0x88
 8005476:	4641      	mov	r1, r8
 8005478:	4650      	mov	r0, sl
 800547a:	f002 f922 	bl	80076c2 <__ssprint_r>
 800547e:	2800      	cmp	r0, #0
 8005480:	f040 8334 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005484:	a925      	add	r1, sp, #148	; 0x94
 8005486:	3f10      	subs	r7, #16
 8005488:	460c      	mov	r4, r1
 800548a:	e4f4      	b.n	8004e76 <_svfprintf_r+0x68e>
 800548c:	460c      	mov	r4, r1
 800548e:	e50d      	b.n	8004eac <_svfprintf_r+0x6c4>
 8005490:	aa22      	add	r2, sp, #136	; 0x88
 8005492:	4641      	mov	r1, r8
 8005494:	4650      	mov	r0, sl
 8005496:	f002 f914 	bl	80076c2 <__ssprint_r>
 800549a:	2800      	cmp	r0, #0
 800549c:	f040 8326 	bne.w	8005aec <_svfprintf_r+0x1304>
 80054a0:	ac25      	add	r4, sp, #148	; 0x94
 80054a2:	e515      	b.n	8004ed0 <_svfprintf_r+0x6e8>
 80054a4:	aa22      	add	r2, sp, #136	; 0x88
 80054a6:	4641      	mov	r1, r8
 80054a8:	4650      	mov	r0, sl
 80054aa:	f002 f90a 	bl	80076c2 <__ssprint_r>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f040 831c 	bne.w	8005aec <_svfprintf_r+0x1304>
 80054b4:	ac25      	add	r4, sp, #148	; 0x94
 80054b6:	e51b      	b.n	8004ef0 <_svfprintf_r+0x708>
 80054b8:	2010      	movs	r0, #16
 80054ba:	4402      	add	r2, r0
 80054bc:	2b07      	cmp	r3, #7
 80054be:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80054c2:	6060      	str	r0, [r4, #4]
 80054c4:	dd08      	ble.n	80054d8 <_svfprintf_r+0xcf0>
 80054c6:	aa22      	add	r2, sp, #136	; 0x88
 80054c8:	4641      	mov	r1, r8
 80054ca:	4650      	mov	r0, sl
 80054cc:	f002 f8f9 	bl	80076c2 <__ssprint_r>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	f040 830b 	bne.w	8005aec <_svfprintf_r+0x1304>
 80054d6:	a925      	add	r1, sp, #148	; 0x94
 80054d8:	3f10      	subs	r7, #16
 80054da:	460c      	mov	r4, r1
 80054dc:	e510      	b.n	8004f00 <_svfprintf_r+0x718>
 80054de:	460c      	mov	r4, r1
 80054e0:	e529      	b.n	8004f36 <_svfprintf_r+0x74e>
 80054e2:	2010      	movs	r0, #16
 80054e4:	4402      	add	r2, r0
 80054e6:	2b07      	cmp	r3, #7
 80054e8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80054ec:	6060      	str	r0, [r4, #4]
 80054ee:	dd08      	ble.n	8005502 <_svfprintf_r+0xd1a>
 80054f0:	aa22      	add	r2, sp, #136	; 0x88
 80054f2:	4641      	mov	r1, r8
 80054f4:	4650      	mov	r0, sl
 80054f6:	f002 f8e4 	bl	80076c2 <__ssprint_r>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f040 82f6 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005500:	a925      	add	r1, sp, #148	; 0x94
 8005502:	3e10      	subs	r6, #16
 8005504:	460c      	mov	r4, r1
 8005506:	e529      	b.n	8004f5c <_svfprintf_r+0x774>
 8005508:	460c      	mov	r4, r1
 800550a:	e541      	b.n	8004f90 <_svfprintf_r+0x7a8>
 800550c:	08009d7c 	.word	0x08009d7c
 8005510:	08009d8d 	.word	0x08009d8d
 8005514:	9b06      	ldr	r3, [sp, #24]
 8005516:	2b65      	cmp	r3, #101	; 0x65
 8005518:	f340 8230 	ble.w	800597c <_svfprintf_r+0x1194>
 800551c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005520:	2200      	movs	r2, #0
 8005522:	2300      	movs	r3, #0
 8005524:	f7fb fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005528:	2800      	cmp	r0, #0
 800552a:	d068      	beq.n	80055fe <_svfprintf_r+0xe16>
 800552c:	4b6d      	ldr	r3, [pc, #436]	; (80056e4 <_svfprintf_r+0xefc>)
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	2301      	movs	r3, #1
 8005532:	441e      	add	r6, r3
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005538:	9624      	str	r6, [sp, #144]	; 0x90
 800553a:	3301      	adds	r3, #1
 800553c:	2b07      	cmp	r3, #7
 800553e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005540:	dc37      	bgt.n	80055b2 <_svfprintf_r+0xdca>
 8005542:	3408      	adds	r4, #8
 8005544:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005546:	9a05      	ldr	r2, [sp, #20]
 8005548:	4293      	cmp	r3, r2
 800554a:	db03      	blt.n	8005554 <_svfprintf_r+0xd6c>
 800554c:	f01b 0f01 	tst.w	fp, #1
 8005550:	f43f ad30 	beq.w	8004fb4 <_svfprintf_r+0x7cc>
 8005554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800555a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800555c:	6063      	str	r3, [r4, #4]
 800555e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005560:	4413      	add	r3, r2
 8005562:	9324      	str	r3, [sp, #144]	; 0x90
 8005564:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005566:	3301      	adds	r3, #1
 8005568:	2b07      	cmp	r3, #7
 800556a:	9323      	str	r3, [sp, #140]	; 0x8c
 800556c:	dc2b      	bgt.n	80055c6 <_svfprintf_r+0xdde>
 800556e:	3408      	adds	r4, #8
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	1e5d      	subs	r5, r3, #1
 8005574:	2d00      	cmp	r5, #0
 8005576:	f77f ad1d 	ble.w	8004fb4 <_svfprintf_r+0x7cc>
 800557a:	4e5b      	ldr	r6, [pc, #364]	; (80056e8 <_svfprintf_r+0xf00>)
 800557c:	2710      	movs	r7, #16
 800557e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005582:	2d10      	cmp	r5, #16
 8005584:	f103 0301 	add.w	r3, r3, #1
 8005588:	f104 0108 	add.w	r1, r4, #8
 800558c:	6026      	str	r6, [r4, #0]
 800558e:	dc24      	bgt.n	80055da <_svfprintf_r+0xdf2>
 8005590:	6065      	str	r5, [r4, #4]
 8005592:	2b07      	cmp	r3, #7
 8005594:	4415      	add	r5, r2
 8005596:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800559a:	f340 8286 	ble.w	8005aaa <_svfprintf_r+0x12c2>
 800559e:	aa22      	add	r2, sp, #136	; 0x88
 80055a0:	4641      	mov	r1, r8
 80055a2:	4650      	mov	r0, sl
 80055a4:	f002 f88d 	bl	80076c2 <__ssprint_r>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f040 829f 	bne.w	8005aec <_svfprintf_r+0x1304>
 80055ae:	ac25      	add	r4, sp, #148	; 0x94
 80055b0:	e500      	b.n	8004fb4 <_svfprintf_r+0x7cc>
 80055b2:	aa22      	add	r2, sp, #136	; 0x88
 80055b4:	4641      	mov	r1, r8
 80055b6:	4650      	mov	r0, sl
 80055b8:	f002 f883 	bl	80076c2 <__ssprint_r>
 80055bc:	2800      	cmp	r0, #0
 80055be:	f040 8295 	bne.w	8005aec <_svfprintf_r+0x1304>
 80055c2:	ac25      	add	r4, sp, #148	; 0x94
 80055c4:	e7be      	b.n	8005544 <_svfprintf_r+0xd5c>
 80055c6:	aa22      	add	r2, sp, #136	; 0x88
 80055c8:	4641      	mov	r1, r8
 80055ca:	4650      	mov	r0, sl
 80055cc:	f002 f879 	bl	80076c2 <__ssprint_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	f040 828b 	bne.w	8005aec <_svfprintf_r+0x1304>
 80055d6:	ac25      	add	r4, sp, #148	; 0x94
 80055d8:	e7ca      	b.n	8005570 <_svfprintf_r+0xd88>
 80055da:	3210      	adds	r2, #16
 80055dc:	2b07      	cmp	r3, #7
 80055de:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80055e2:	6067      	str	r7, [r4, #4]
 80055e4:	dd08      	ble.n	80055f8 <_svfprintf_r+0xe10>
 80055e6:	aa22      	add	r2, sp, #136	; 0x88
 80055e8:	4641      	mov	r1, r8
 80055ea:	4650      	mov	r0, sl
 80055ec:	f002 f869 	bl	80076c2 <__ssprint_r>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	f040 827b 	bne.w	8005aec <_svfprintf_r+0x1304>
 80055f6:	a925      	add	r1, sp, #148	; 0x94
 80055f8:	3d10      	subs	r5, #16
 80055fa:	460c      	mov	r4, r1
 80055fc:	e7bf      	b.n	800557e <_svfprintf_r+0xd96>
 80055fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005600:	2b00      	cmp	r3, #0
 8005602:	dc73      	bgt.n	80056ec <_svfprintf_r+0xf04>
 8005604:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <_svfprintf_r+0xefc>)
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	2301      	movs	r3, #1
 800560a:	441e      	add	r6, r3
 800560c:	6063      	str	r3, [r4, #4]
 800560e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005610:	9624      	str	r6, [sp, #144]	; 0x90
 8005612:	3301      	adds	r3, #1
 8005614:	2b07      	cmp	r3, #7
 8005616:	9323      	str	r3, [sp, #140]	; 0x8c
 8005618:	dc3d      	bgt.n	8005696 <_svfprintf_r+0xeae>
 800561a:	3408      	adds	r4, #8
 800561c:	9905      	ldr	r1, [sp, #20]
 800561e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005620:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005622:	430a      	orrs	r2, r1
 8005624:	f00b 0101 	and.w	r1, fp, #1
 8005628:	430a      	orrs	r2, r1
 800562a:	f43f acc3 	beq.w	8004fb4 <_svfprintf_r+0x7cc>
 800562e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005630:	6022      	str	r2, [r4, #0]
 8005632:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005634:	6062      	str	r2, [r4, #4]
 8005636:	4413      	add	r3, r2
 8005638:	9324      	str	r3, [sp, #144]	; 0x90
 800563a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800563c:	3301      	adds	r3, #1
 800563e:	2b07      	cmp	r3, #7
 8005640:	9323      	str	r3, [sp, #140]	; 0x8c
 8005642:	dc32      	bgt.n	80056aa <_svfprintf_r+0xec2>
 8005644:	3408      	adds	r4, #8
 8005646:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005648:	2d00      	cmp	r5, #0
 800564a:	da1b      	bge.n	8005684 <_svfprintf_r+0xe9c>
 800564c:	4e26      	ldr	r6, [pc, #152]	; (80056e8 <_svfprintf_r+0xf00>)
 800564e:	426d      	negs	r5, r5
 8005650:	4623      	mov	r3, r4
 8005652:	2710      	movs	r7, #16
 8005654:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8005658:	2d10      	cmp	r5, #16
 800565a:	f102 0201 	add.w	r2, r2, #1
 800565e:	f104 0408 	add.w	r4, r4, #8
 8005662:	601e      	str	r6, [r3, #0]
 8005664:	dc2b      	bgt.n	80056be <_svfprintf_r+0xed6>
 8005666:	605d      	str	r5, [r3, #4]
 8005668:	2a07      	cmp	r2, #7
 800566a:	440d      	add	r5, r1
 800566c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8005670:	dd08      	ble.n	8005684 <_svfprintf_r+0xe9c>
 8005672:	aa22      	add	r2, sp, #136	; 0x88
 8005674:	4641      	mov	r1, r8
 8005676:	4650      	mov	r0, sl
 8005678:	f002 f823 	bl	80076c2 <__ssprint_r>
 800567c:	2800      	cmp	r0, #0
 800567e:	f040 8235 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005682:	ac25      	add	r4, sp, #148	; 0x94
 8005684:	9b05      	ldr	r3, [sp, #20]
 8005686:	9a05      	ldr	r2, [sp, #20]
 8005688:	6063      	str	r3, [r4, #4]
 800568a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800568c:	f8c4 9000 	str.w	r9, [r4]
 8005690:	4413      	add	r3, r2
 8005692:	9324      	str	r3, [sp, #144]	; 0x90
 8005694:	e487      	b.n	8004fa6 <_svfprintf_r+0x7be>
 8005696:	aa22      	add	r2, sp, #136	; 0x88
 8005698:	4641      	mov	r1, r8
 800569a:	4650      	mov	r0, sl
 800569c:	f002 f811 	bl	80076c2 <__ssprint_r>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f040 8223 	bne.w	8005aec <_svfprintf_r+0x1304>
 80056a6:	ac25      	add	r4, sp, #148	; 0x94
 80056a8:	e7b8      	b.n	800561c <_svfprintf_r+0xe34>
 80056aa:	aa22      	add	r2, sp, #136	; 0x88
 80056ac:	4641      	mov	r1, r8
 80056ae:	4650      	mov	r0, sl
 80056b0:	f002 f807 	bl	80076c2 <__ssprint_r>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	f040 8219 	bne.w	8005aec <_svfprintf_r+0x1304>
 80056ba:	ac25      	add	r4, sp, #148	; 0x94
 80056bc:	e7c3      	b.n	8005646 <_svfprintf_r+0xe5e>
 80056be:	3110      	adds	r1, #16
 80056c0:	2a07      	cmp	r2, #7
 80056c2:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80056c6:	605f      	str	r7, [r3, #4]
 80056c8:	dd08      	ble.n	80056dc <_svfprintf_r+0xef4>
 80056ca:	aa22      	add	r2, sp, #136	; 0x88
 80056cc:	4641      	mov	r1, r8
 80056ce:	4650      	mov	r0, sl
 80056d0:	f001 fff7 	bl	80076c2 <__ssprint_r>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f040 8209 	bne.w	8005aec <_svfprintf_r+0x1304>
 80056da:	ac25      	add	r4, sp, #148	; 0x94
 80056dc:	3d10      	subs	r5, #16
 80056de:	4623      	mov	r3, r4
 80056e0:	e7b8      	b.n	8005654 <_svfprintf_r+0xe6c>
 80056e2:	bf00      	nop
 80056e4:	08009d9e 	.word	0x08009d9e
 80056e8:	08009db0 	.word	0x08009db0
 80056ec:	9f05      	ldr	r7, [sp, #20]
 80056ee:	42af      	cmp	r7, r5
 80056f0:	bfa8      	it	ge
 80056f2:	462f      	movge	r7, r5
 80056f4:	2f00      	cmp	r7, #0
 80056f6:	dd0a      	ble.n	800570e <_svfprintf_r+0xf26>
 80056f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056fa:	3301      	adds	r3, #1
 80056fc:	443e      	add	r6, r7
 80056fe:	2b07      	cmp	r3, #7
 8005700:	e9c4 9700 	strd	r9, r7, [r4]
 8005704:	9624      	str	r6, [sp, #144]	; 0x90
 8005706:	9323      	str	r3, [sp, #140]	; 0x8c
 8005708:	f300 8085 	bgt.w	8005816 <_svfprintf_r+0x102e>
 800570c:	3408      	adds	r4, #8
 800570e:	2f00      	cmp	r7, #0
 8005710:	bfac      	ite	ge
 8005712:	1bee      	subge	r6, r5, r7
 8005714:	462e      	movlt	r6, r5
 8005716:	2e00      	cmp	r6, #0
 8005718:	dd19      	ble.n	800574e <_svfprintf_r+0xf66>
 800571a:	4f97      	ldr	r7, [pc, #604]	; (8005978 <_svfprintf_r+0x1190>)
 800571c:	6027      	str	r7, [r4, #0]
 800571e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005722:	2e10      	cmp	r6, #16
 8005724:	f103 0301 	add.w	r3, r3, #1
 8005728:	f104 0108 	add.w	r1, r4, #8
 800572c:	dc7d      	bgt.n	800582a <_svfprintf_r+0x1042>
 800572e:	6066      	str	r6, [r4, #4]
 8005730:	2b07      	cmp	r3, #7
 8005732:	4416      	add	r6, r2
 8005734:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8005738:	f340 808a 	ble.w	8005850 <_svfprintf_r+0x1068>
 800573c:	aa22      	add	r2, sp, #136	; 0x88
 800573e:	4641      	mov	r1, r8
 8005740:	4650      	mov	r0, sl
 8005742:	f001 ffbe 	bl	80076c2 <__ssprint_r>
 8005746:	2800      	cmp	r0, #0
 8005748:	f040 81d0 	bne.w	8005aec <_svfprintf_r+0x1304>
 800574c:	ac25      	add	r4, sp, #148	; 0x94
 800574e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8005752:	444d      	add	r5, r9
 8005754:	d00a      	beq.n	800576c <_svfprintf_r+0xf84>
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d17b      	bne.n	8005854 <_svfprintf_r+0x106c>
 800575c:	9b08      	ldr	r3, [sp, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d17b      	bne.n	800585a <_svfprintf_r+0x1072>
 8005762:	9b05      	ldr	r3, [sp, #20]
 8005764:	444b      	add	r3, r9
 8005766:	429d      	cmp	r5, r3
 8005768:	bf28      	it	cs
 800576a:	461d      	movcs	r5, r3
 800576c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800576e:	9a05      	ldr	r2, [sp, #20]
 8005770:	4293      	cmp	r3, r2
 8005772:	db02      	blt.n	800577a <_svfprintf_r+0xf92>
 8005774:	f01b 0f01 	tst.w	fp, #1
 8005778:	d00e      	beq.n	8005798 <_svfprintf_r+0xfb0>
 800577a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005782:	6063      	str	r3, [r4, #4]
 8005784:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005786:	4413      	add	r3, r2
 8005788:	9324      	str	r3, [sp, #144]	; 0x90
 800578a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800578c:	3301      	adds	r3, #1
 800578e:	2b07      	cmp	r3, #7
 8005790:	9323      	str	r3, [sp, #140]	; 0x8c
 8005792:	f300 80dd 	bgt.w	8005950 <_svfprintf_r+0x1168>
 8005796:	3408      	adds	r4, #8
 8005798:	9b05      	ldr	r3, [sp, #20]
 800579a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800579c:	eb09 0203 	add.w	r2, r9, r3
 80057a0:	1b9e      	subs	r6, r3, r6
 80057a2:	1b52      	subs	r2, r2, r5
 80057a4:	4296      	cmp	r6, r2
 80057a6:	bfa8      	it	ge
 80057a8:	4616      	movge	r6, r2
 80057aa:	2e00      	cmp	r6, #0
 80057ac:	dd0b      	ble.n	80057c6 <_svfprintf_r+0xfde>
 80057ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057b0:	4433      	add	r3, r6
 80057b2:	9324      	str	r3, [sp, #144]	; 0x90
 80057b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057b6:	3301      	adds	r3, #1
 80057b8:	2b07      	cmp	r3, #7
 80057ba:	e9c4 5600 	strd	r5, r6, [r4]
 80057be:	9323      	str	r3, [sp, #140]	; 0x8c
 80057c0:	f300 80d0 	bgt.w	8005964 <_svfprintf_r+0x117c>
 80057c4:	3408      	adds	r4, #8
 80057c6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80057c8:	9b05      	ldr	r3, [sp, #20]
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	eba3 0505 	sub.w	r5, r3, r5
 80057d0:	bfa8      	it	ge
 80057d2:	1bad      	subge	r5, r5, r6
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	f77f abed 	ble.w	8004fb4 <_svfprintf_r+0x7cc>
 80057da:	4e67      	ldr	r6, [pc, #412]	; (8005978 <_svfprintf_r+0x1190>)
 80057dc:	2710      	movs	r7, #16
 80057de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80057e2:	2d10      	cmp	r5, #16
 80057e4:	f103 0301 	add.w	r3, r3, #1
 80057e8:	f104 0108 	add.w	r1, r4, #8
 80057ec:	6026      	str	r6, [r4, #0]
 80057ee:	f77f aecf 	ble.w	8005590 <_svfprintf_r+0xda8>
 80057f2:	3210      	adds	r2, #16
 80057f4:	2b07      	cmp	r3, #7
 80057f6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80057fa:	6067      	str	r7, [r4, #4]
 80057fc:	dd08      	ble.n	8005810 <_svfprintf_r+0x1028>
 80057fe:	aa22      	add	r2, sp, #136	; 0x88
 8005800:	4641      	mov	r1, r8
 8005802:	4650      	mov	r0, sl
 8005804:	f001 ff5d 	bl	80076c2 <__ssprint_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	f040 816f 	bne.w	8005aec <_svfprintf_r+0x1304>
 800580e:	a925      	add	r1, sp, #148	; 0x94
 8005810:	3d10      	subs	r5, #16
 8005812:	460c      	mov	r4, r1
 8005814:	e7e3      	b.n	80057de <_svfprintf_r+0xff6>
 8005816:	aa22      	add	r2, sp, #136	; 0x88
 8005818:	4641      	mov	r1, r8
 800581a:	4650      	mov	r0, sl
 800581c:	f001 ff51 	bl	80076c2 <__ssprint_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	f040 8163 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005826:	ac25      	add	r4, sp, #148	; 0x94
 8005828:	e771      	b.n	800570e <_svfprintf_r+0xf26>
 800582a:	2010      	movs	r0, #16
 800582c:	4402      	add	r2, r0
 800582e:	2b07      	cmp	r3, #7
 8005830:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005834:	6060      	str	r0, [r4, #4]
 8005836:	dd08      	ble.n	800584a <_svfprintf_r+0x1062>
 8005838:	aa22      	add	r2, sp, #136	; 0x88
 800583a:	4641      	mov	r1, r8
 800583c:	4650      	mov	r0, sl
 800583e:	f001 ff40 	bl	80076c2 <__ssprint_r>
 8005842:	2800      	cmp	r0, #0
 8005844:	f040 8152 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005848:	a925      	add	r1, sp, #148	; 0x94
 800584a:	3e10      	subs	r6, #16
 800584c:	460c      	mov	r4, r1
 800584e:	e765      	b.n	800571c <_svfprintf_r+0xf34>
 8005850:	460c      	mov	r4, r1
 8005852:	e77c      	b.n	800574e <_svfprintf_r+0xf66>
 8005854:	9b08      	ldr	r3, [sp, #32]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04a      	beq.n	80058f0 <_svfprintf_r+0x1108>
 800585a:	9b08      	ldr	r3, [sp, #32]
 800585c:	3b01      	subs	r3, #1
 800585e:	9308      	str	r3, [sp, #32]
 8005860:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800586c:	4413      	add	r3, r2
 800586e:	9324      	str	r3, [sp, #144]	; 0x90
 8005870:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005872:	3301      	adds	r3, #1
 8005874:	2b07      	cmp	r3, #7
 8005876:	9323      	str	r3, [sp, #140]	; 0x8c
 8005878:	dc41      	bgt.n	80058fe <_svfprintf_r+0x1116>
 800587a:	3408      	adds	r4, #8
 800587c:	9b05      	ldr	r3, [sp, #20]
 800587e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005880:	eb09 0703 	add.w	r7, r9, r3
 8005884:	1b7b      	subs	r3, r7, r5
 8005886:	7817      	ldrb	r7, [r2, #0]
 8005888:	429f      	cmp	r7, r3
 800588a:	bfa8      	it	ge
 800588c:	461f      	movge	r7, r3
 800588e:	2f00      	cmp	r7, #0
 8005890:	dd0a      	ble.n	80058a8 <_svfprintf_r+0x10c0>
 8005892:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005894:	443b      	add	r3, r7
 8005896:	9324      	str	r3, [sp, #144]	; 0x90
 8005898:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800589a:	3301      	adds	r3, #1
 800589c:	2b07      	cmp	r3, #7
 800589e:	e9c4 5700 	strd	r5, r7, [r4]
 80058a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80058a4:	dc35      	bgt.n	8005912 <_svfprintf_r+0x112a>
 80058a6:	3408      	adds	r4, #8
 80058a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058aa:	781e      	ldrb	r6, [r3, #0]
 80058ac:	2f00      	cmp	r7, #0
 80058ae:	bfa8      	it	ge
 80058b0:	1bf6      	subge	r6, r6, r7
 80058b2:	2e00      	cmp	r6, #0
 80058b4:	dd18      	ble.n	80058e8 <_svfprintf_r+0x1100>
 80058b6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80058ba:	482f      	ldr	r0, [pc, #188]	; (8005978 <_svfprintf_r+0x1190>)
 80058bc:	6020      	str	r0, [r4, #0]
 80058be:	2e10      	cmp	r6, #16
 80058c0:	f103 0301 	add.w	r3, r3, #1
 80058c4:	f104 0108 	add.w	r1, r4, #8
 80058c8:	dc2d      	bgt.n	8005926 <_svfprintf_r+0x113e>
 80058ca:	4432      	add	r2, r6
 80058cc:	2b07      	cmp	r3, #7
 80058ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80058d2:	6066      	str	r6, [r4, #4]
 80058d4:	dd3a      	ble.n	800594c <_svfprintf_r+0x1164>
 80058d6:	aa22      	add	r2, sp, #136	; 0x88
 80058d8:	4641      	mov	r1, r8
 80058da:	4650      	mov	r0, sl
 80058dc:	f001 fef1 	bl	80076c2 <__ssprint_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	f040 8103 	bne.w	8005aec <_svfprintf_r+0x1304>
 80058e6:	ac25      	add	r4, sp, #148	; 0x94
 80058e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	441d      	add	r5, r3
 80058ee:	e732      	b.n	8005756 <_svfprintf_r+0xf6e>
 80058f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f2:	3b01      	subs	r3, #1
 80058f4:	930a      	str	r3, [sp, #40]	; 0x28
 80058f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f8:	3b01      	subs	r3, #1
 80058fa:	9309      	str	r3, [sp, #36]	; 0x24
 80058fc:	e7b0      	b.n	8005860 <_svfprintf_r+0x1078>
 80058fe:	aa22      	add	r2, sp, #136	; 0x88
 8005900:	4641      	mov	r1, r8
 8005902:	4650      	mov	r0, sl
 8005904:	f001 fedd 	bl	80076c2 <__ssprint_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	f040 80ef 	bne.w	8005aec <_svfprintf_r+0x1304>
 800590e:	ac25      	add	r4, sp, #148	; 0x94
 8005910:	e7b4      	b.n	800587c <_svfprintf_r+0x1094>
 8005912:	aa22      	add	r2, sp, #136	; 0x88
 8005914:	4641      	mov	r1, r8
 8005916:	4650      	mov	r0, sl
 8005918:	f001 fed3 	bl	80076c2 <__ssprint_r>
 800591c:	2800      	cmp	r0, #0
 800591e:	f040 80e5 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005922:	ac25      	add	r4, sp, #148	; 0x94
 8005924:	e7c0      	b.n	80058a8 <_svfprintf_r+0x10c0>
 8005926:	2010      	movs	r0, #16
 8005928:	4402      	add	r2, r0
 800592a:	2b07      	cmp	r3, #7
 800592c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005930:	6060      	str	r0, [r4, #4]
 8005932:	dd08      	ble.n	8005946 <_svfprintf_r+0x115e>
 8005934:	aa22      	add	r2, sp, #136	; 0x88
 8005936:	4641      	mov	r1, r8
 8005938:	4650      	mov	r0, sl
 800593a:	f001 fec2 	bl	80076c2 <__ssprint_r>
 800593e:	2800      	cmp	r0, #0
 8005940:	f040 80d4 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005944:	a925      	add	r1, sp, #148	; 0x94
 8005946:	3e10      	subs	r6, #16
 8005948:	460c      	mov	r4, r1
 800594a:	e7b4      	b.n	80058b6 <_svfprintf_r+0x10ce>
 800594c:	460c      	mov	r4, r1
 800594e:	e7cb      	b.n	80058e8 <_svfprintf_r+0x1100>
 8005950:	aa22      	add	r2, sp, #136	; 0x88
 8005952:	4641      	mov	r1, r8
 8005954:	4650      	mov	r0, sl
 8005956:	f001 feb4 	bl	80076c2 <__ssprint_r>
 800595a:	2800      	cmp	r0, #0
 800595c:	f040 80c6 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005960:	ac25      	add	r4, sp, #148	; 0x94
 8005962:	e719      	b.n	8005798 <_svfprintf_r+0xfb0>
 8005964:	aa22      	add	r2, sp, #136	; 0x88
 8005966:	4641      	mov	r1, r8
 8005968:	4650      	mov	r0, sl
 800596a:	f001 feaa 	bl	80076c2 <__ssprint_r>
 800596e:	2800      	cmp	r0, #0
 8005970:	f040 80bc 	bne.w	8005aec <_svfprintf_r+0x1304>
 8005974:	ac25      	add	r4, sp, #148	; 0x94
 8005976:	e726      	b.n	80057c6 <_svfprintf_r+0xfde>
 8005978:	08009db0 	.word	0x08009db0
 800597c:	9a05      	ldr	r2, [sp, #20]
 800597e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005980:	2a01      	cmp	r2, #1
 8005982:	f106 0601 	add.w	r6, r6, #1
 8005986:	f103 0301 	add.w	r3, r3, #1
 800598a:	f104 0508 	add.w	r5, r4, #8
 800598e:	dc02      	bgt.n	8005996 <_svfprintf_r+0x11ae>
 8005990:	f01b 0f01 	tst.w	fp, #1
 8005994:	d07e      	beq.n	8005a94 <_svfprintf_r+0x12ac>
 8005996:	2201      	movs	r2, #1
 8005998:	2b07      	cmp	r3, #7
 800599a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800599e:	f8c4 9000 	str.w	r9, [r4]
 80059a2:	6062      	str	r2, [r4, #4]
 80059a4:	dd08      	ble.n	80059b8 <_svfprintf_r+0x11d0>
 80059a6:	aa22      	add	r2, sp, #136	; 0x88
 80059a8:	4641      	mov	r1, r8
 80059aa:	4650      	mov	r0, sl
 80059ac:	f001 fe89 	bl	80076c2 <__ssprint_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f040 809b 	bne.w	8005aec <_svfprintf_r+0x1304>
 80059b6:	ad25      	add	r5, sp, #148	; 0x94
 80059b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059c0:	606b      	str	r3, [r5, #4]
 80059c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80059c4:	4413      	add	r3, r2
 80059c6:	9324      	str	r3, [sp, #144]	; 0x90
 80059c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059ca:	3301      	adds	r3, #1
 80059cc:	2b07      	cmp	r3, #7
 80059ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80059d0:	dc32      	bgt.n	8005a38 <_svfprintf_r+0x1250>
 80059d2:	3508      	adds	r5, #8
 80059d4:	9b05      	ldr	r3, [sp, #20]
 80059d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80059da:	1e5c      	subs	r4, r3, #1
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	f7fb f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d130      	bne.n	8005a4a <_svfprintf_r+0x1262>
 80059e8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80059ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80059ec:	9a05      	ldr	r2, [sp, #20]
 80059ee:	3101      	adds	r1, #1
 80059f0:	3b01      	subs	r3, #1
 80059f2:	f109 0001 	add.w	r0, r9, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	2907      	cmp	r1, #7
 80059fa:	e9c5 0400 	strd	r0, r4, [r5]
 80059fe:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8005a02:	dd50      	ble.n	8005aa6 <_svfprintf_r+0x12be>
 8005a04:	aa22      	add	r2, sp, #136	; 0x88
 8005a06:	4641      	mov	r1, r8
 8005a08:	4650      	mov	r0, sl
 8005a0a:	f001 fe5a 	bl	80076c2 <__ssprint_r>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d16c      	bne.n	8005aec <_svfprintf_r+0x1304>
 8005a12:	ad25      	add	r5, sp, #148	; 0x94
 8005a14:	ab1e      	add	r3, sp, #120	; 0x78
 8005a16:	602b      	str	r3, [r5, #0]
 8005a18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a1c:	606b      	str	r3, [r5, #4]
 8005a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a20:	4413      	add	r3, r2
 8005a22:	9324      	str	r3, [sp, #144]	; 0x90
 8005a24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a26:	3301      	adds	r3, #1
 8005a28:	2b07      	cmp	r3, #7
 8005a2a:	9323      	str	r3, [sp, #140]	; 0x8c
 8005a2c:	f73f adb7 	bgt.w	800559e <_svfprintf_r+0xdb6>
 8005a30:	f105 0408 	add.w	r4, r5, #8
 8005a34:	f7ff babe 	b.w	8004fb4 <_svfprintf_r+0x7cc>
 8005a38:	aa22      	add	r2, sp, #136	; 0x88
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	4650      	mov	r0, sl
 8005a3e:	f001 fe40 	bl	80076c2 <__ssprint_r>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d152      	bne.n	8005aec <_svfprintf_r+0x1304>
 8005a46:	ad25      	add	r5, sp, #148	; 0x94
 8005a48:	e7c4      	b.n	80059d4 <_svfprintf_r+0x11ec>
 8005a4a:	2c00      	cmp	r4, #0
 8005a4c:	dde2      	ble.n	8005a14 <_svfprintf_r+0x122c>
 8005a4e:	4e56      	ldr	r6, [pc, #344]	; (8005ba8 <_svfprintf_r+0x13c0>)
 8005a50:	2710      	movs	r7, #16
 8005a52:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005a56:	2c10      	cmp	r4, #16
 8005a58:	f103 0301 	add.w	r3, r3, #1
 8005a5c:	f105 0108 	add.w	r1, r5, #8
 8005a60:	602e      	str	r6, [r5, #0]
 8005a62:	dc07      	bgt.n	8005a74 <_svfprintf_r+0x128c>
 8005a64:	606c      	str	r4, [r5, #4]
 8005a66:	2b07      	cmp	r3, #7
 8005a68:	4414      	add	r4, r2
 8005a6a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8005a6e:	dcc9      	bgt.n	8005a04 <_svfprintf_r+0x121c>
 8005a70:	460d      	mov	r5, r1
 8005a72:	e7cf      	b.n	8005a14 <_svfprintf_r+0x122c>
 8005a74:	3210      	adds	r2, #16
 8005a76:	2b07      	cmp	r3, #7
 8005a78:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005a7c:	606f      	str	r7, [r5, #4]
 8005a7e:	dd06      	ble.n	8005a8e <_svfprintf_r+0x12a6>
 8005a80:	aa22      	add	r2, sp, #136	; 0x88
 8005a82:	4641      	mov	r1, r8
 8005a84:	4650      	mov	r0, sl
 8005a86:	f001 fe1c 	bl	80076c2 <__ssprint_r>
 8005a8a:	bb78      	cbnz	r0, 8005aec <_svfprintf_r+0x1304>
 8005a8c:	a925      	add	r1, sp, #148	; 0x94
 8005a8e:	3c10      	subs	r4, #16
 8005a90:	460d      	mov	r5, r1
 8005a92:	e7de      	b.n	8005a52 <_svfprintf_r+0x126a>
 8005a94:	2201      	movs	r2, #1
 8005a96:	2b07      	cmp	r3, #7
 8005a98:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8005a9c:	f8c4 9000 	str.w	r9, [r4]
 8005aa0:	6062      	str	r2, [r4, #4]
 8005aa2:	ddb7      	ble.n	8005a14 <_svfprintf_r+0x122c>
 8005aa4:	e7ae      	b.n	8005a04 <_svfprintf_r+0x121c>
 8005aa6:	3508      	adds	r5, #8
 8005aa8:	e7b4      	b.n	8005a14 <_svfprintf_r+0x122c>
 8005aaa:	460c      	mov	r4, r1
 8005aac:	f7ff ba82 	b.w	8004fb4 <_svfprintf_r+0x7cc>
 8005ab0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8005ab4:	1a9d      	subs	r5, r3, r2
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	f77f aa80 	ble.w	8004fbc <_svfprintf_r+0x7d4>
 8005abc:	4e3b      	ldr	r6, [pc, #236]	; (8005bac <_svfprintf_r+0x13c4>)
 8005abe:	2710      	movs	r7, #16
 8005ac0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005ac4:	2d10      	cmp	r5, #16
 8005ac6:	f103 0301 	add.w	r3, r3, #1
 8005aca:	6026      	str	r6, [r4, #0]
 8005acc:	dc18      	bgt.n	8005b00 <_svfprintf_r+0x1318>
 8005ace:	6065      	str	r5, [r4, #4]
 8005ad0:	2b07      	cmp	r3, #7
 8005ad2:	4415      	add	r5, r2
 8005ad4:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8005ad8:	f77f aa70 	ble.w	8004fbc <_svfprintf_r+0x7d4>
 8005adc:	aa22      	add	r2, sp, #136	; 0x88
 8005ade:	4641      	mov	r1, r8
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	f001 fdee 	bl	80076c2 <__ssprint_r>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f43f aa68 	beq.w	8004fbc <_svfprintf_r+0x7d4>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f43f a887 	beq.w	8004c02 <_svfprintf_r+0x41a>
 8005af4:	4619      	mov	r1, r3
 8005af6:	4650      	mov	r0, sl
 8005af8:	f000 ff34 	bl	8006964 <_free_r>
 8005afc:	f7ff b881 	b.w	8004c02 <_svfprintf_r+0x41a>
 8005b00:	3210      	adds	r2, #16
 8005b02:	2b07      	cmp	r3, #7
 8005b04:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005b08:	6067      	str	r7, [r4, #4]
 8005b0a:	dc02      	bgt.n	8005b12 <_svfprintf_r+0x132a>
 8005b0c:	3408      	adds	r4, #8
 8005b0e:	3d10      	subs	r5, #16
 8005b10:	e7d6      	b.n	8005ac0 <_svfprintf_r+0x12d8>
 8005b12:	aa22      	add	r2, sp, #136	; 0x88
 8005b14:	4641      	mov	r1, r8
 8005b16:	4650      	mov	r0, sl
 8005b18:	f001 fdd3 	bl	80076c2 <__ssprint_r>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1e5      	bne.n	8005aec <_svfprintf_r+0x1304>
 8005b20:	ac25      	add	r4, sp, #148	; 0x94
 8005b22:	e7f4      	b.n	8005b0e <_svfprintf_r+0x1326>
 8005b24:	9903      	ldr	r1, [sp, #12]
 8005b26:	4650      	mov	r0, sl
 8005b28:	f000 ff1c 	bl	8006964 <_free_r>
 8005b2c:	f7ff ba5e 	b.w	8004fec <_svfprintf_r+0x804>
 8005b30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f43f a865 	beq.w	8004c02 <_svfprintf_r+0x41a>
 8005b38:	aa22      	add	r2, sp, #136	; 0x88
 8005b3a:	4641      	mov	r1, r8
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	f001 fdc0 	bl	80076c2 <__ssprint_r>
 8005b42:	f7ff b85e 	b.w	8004c02 <_svfprintf_r+0x41a>
 8005b46:	ea56 0205 	orrs.w	r2, r6, r5
 8005b4a:	465f      	mov	r7, fp
 8005b4c:	f43f ab78 	beq.w	8005240 <_svfprintf_r+0xa58>
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	f43f ac15 	beq.w	8005380 <_svfprintf_r+0xb98>
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8005b5c:	f43f ac5b 	beq.w	8005416 <_svfprintf_r+0xc2e>
 8005b60:	f006 0307 	and.w	r3, r6, #7
 8005b64:	08f6      	lsrs	r6, r6, #3
 8005b66:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8005b6a:	08ed      	lsrs	r5, r5, #3
 8005b6c:	3330      	adds	r3, #48	; 0x30
 8005b6e:	ea56 0105 	orrs.w	r1, r6, r5
 8005b72:	464a      	mov	r2, r9
 8005b74:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8005b78:	d1f2      	bne.n	8005b60 <_svfprintf_r+0x1378>
 8005b7a:	07f9      	lsls	r1, r7, #31
 8005b7c:	d506      	bpl.n	8005b8c <_svfprintf_r+0x13a4>
 8005b7e:	2b30      	cmp	r3, #48	; 0x30
 8005b80:	d004      	beq.n	8005b8c <_svfprintf_r+0x13a4>
 8005b82:	2330      	movs	r3, #48	; 0x30
 8005b84:	f809 3c01 	strb.w	r3, [r9, #-1]
 8005b88:	f1a2 0902 	sub.w	r9, r2, #2
 8005b8c:	ab4e      	add	r3, sp, #312	; 0x138
 8005b8e:	eba3 0309 	sub.w	r3, r3, r9
 8005b92:	9e04      	ldr	r6, [sp, #16]
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	2300      	movs	r3, #0
 8005b98:	46bb      	mov	fp, r7
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8005ba0:	461d      	mov	r5, r3
 8005ba2:	f7ff b94d 	b.w	8004e40 <_svfprintf_r+0x658>
 8005ba6:	bf00      	nop
 8005ba8:	08009db0 	.word	0x08009db0
 8005bac:	08009da0 	.word	0x08009da0

08005bb0 <register_fini>:
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <register_fini+0xc>)
 8005bb2:	b113      	cbz	r3, 8005bba <register_fini+0xa>
 8005bb4:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <register_fini+0x10>)
 8005bb6:	f000 b805 	b.w	8005bc4 <atexit>
 8005bba:	4770      	bx	lr
 8005bbc:	00000000 	.word	0x00000000
 8005bc0:	08006895 	.word	0x08006895

08005bc4 <atexit>:
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 be02 	b.w	80077d4 <__register_exitproc>

08005bd0 <quorem>:
 8005bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	6903      	ldr	r3, [r0, #16]
 8005bd6:	690c      	ldr	r4, [r1, #16]
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	4607      	mov	r7, r0
 8005bdc:	f2c0 8081 	blt.w	8005ce2 <quorem+0x112>
 8005be0:	3c01      	subs	r4, #1
 8005be2:	f101 0814 	add.w	r8, r1, #20
 8005be6:	f100 0514 	add.w	r5, r0, #20
 8005bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c04:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c08:	d331      	bcc.n	8005c6e <quorem+0x9e>
 8005c0a:	f04f 0e00 	mov.w	lr, #0
 8005c0e:	4640      	mov	r0, r8
 8005c10:	46ac      	mov	ip, r5
 8005c12:	46f2      	mov	sl, lr
 8005c14:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c18:	b293      	uxth	r3, r2
 8005c1a:	fb06 e303 	mla	r3, r6, r3, lr
 8005c1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	ebaa 0303 	sub.w	r3, sl, r3
 8005c28:	f8dc a000 	ldr.w	sl, [ip]
 8005c2c:	0c12      	lsrs	r2, r2, #16
 8005c2e:	fa13 f38a 	uxtah	r3, r3, sl
 8005c32:	fb06 e202 	mla	r2, r6, r2, lr
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	9b00      	ldr	r3, [sp, #0]
 8005c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c3e:	b292      	uxth	r2, r2
 8005c40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c48:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c4c:	4581      	cmp	r9, r0
 8005c4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c52:	f84c 3b04 	str.w	r3, [ip], #4
 8005c56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c5a:	d2db      	bcs.n	8005c14 <quorem+0x44>
 8005c5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c60:	b92b      	cbnz	r3, 8005c6e <quorem+0x9e>
 8005c62:	9b01      	ldr	r3, [sp, #4]
 8005c64:	3b04      	subs	r3, #4
 8005c66:	429d      	cmp	r5, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	d32e      	bcc.n	8005cca <quorem+0xfa>
 8005c6c:	613c      	str	r4, [r7, #16]
 8005c6e:	4638      	mov	r0, r7
 8005c70:	f001 fbca 	bl	8007408 <__mcmp>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	db24      	blt.n	8005cc2 <quorem+0xf2>
 8005c78:	3601      	adds	r6, #1
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f04f 0c00 	mov.w	ip, #0
 8005c80:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c84:	f8d0 e000 	ldr.w	lr, [r0]
 8005c88:	b293      	uxth	r3, r2
 8005c8a:	ebac 0303 	sub.w	r3, ip, r3
 8005c8e:	0c12      	lsrs	r2, r2, #16
 8005c90:	fa13 f38e 	uxtah	r3, r3, lr
 8005c94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ca2:	45c1      	cmp	r9, r8
 8005ca4:	f840 3b04 	str.w	r3, [r0], #4
 8005ca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cac:	d2e8      	bcs.n	8005c80 <quorem+0xb0>
 8005cae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cb6:	b922      	cbnz	r2, 8005cc2 <quorem+0xf2>
 8005cb8:	3b04      	subs	r3, #4
 8005cba:	429d      	cmp	r5, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	d30a      	bcc.n	8005cd6 <quorem+0x106>
 8005cc0:	613c      	str	r4, [r7, #16]
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	b003      	add	sp, #12
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	3b04      	subs	r3, #4
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	d1cc      	bne.n	8005c6c <quorem+0x9c>
 8005cd2:	3c01      	subs	r4, #1
 8005cd4:	e7c7      	b.n	8005c66 <quorem+0x96>
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	3b04      	subs	r3, #4
 8005cda:	2a00      	cmp	r2, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <quorem+0xf0>
 8005cde:	3c01      	subs	r4, #1
 8005ce0:	e7eb      	b.n	8005cba <quorem+0xea>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	e7ee      	b.n	8005cc4 <quorem+0xf4>
	...

08005ce8 <_dtoa_r>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	ed2d 8b04 	vpush	{d8-d9}
 8005cf0:	b093      	sub	sp, #76	; 0x4c
 8005cf2:	ec57 6b10 	vmov	r6, r7, d0
 8005cf6:	9106      	str	r1, [sp, #24]
 8005cf8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005cfa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8005cfe:	ee10 aa10 	vmov	sl, s0
 8005d02:	4604      	mov	r4, r0
 8005d04:	930c      	str	r3, [sp, #48]	; 0x30
 8005d06:	46bb      	mov	fp, r7
 8005d08:	b141      	cbz	r1, 8005d1c <_dtoa_r+0x34>
 8005d0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d0c:	604a      	str	r2, [r1, #4]
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4093      	lsls	r3, r2
 8005d12:	608b      	str	r3, [r1, #8]
 8005d14:	f001 f969 	bl	8006fea <_Bfree>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6423      	str	r3, [r4, #64]	; 0x40
 8005d1c:	1e3b      	subs	r3, r7, #0
 8005d1e:	bfaa      	itet	ge
 8005d20:	2300      	movge	r3, #0
 8005d22:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d26:	602b      	strge	r3, [r5, #0]
 8005d28:	4ba3      	ldr	r3, [pc, #652]	; (8005fb8 <_dtoa_r+0x2d0>)
 8005d2a:	bfbc      	itt	lt
 8005d2c:	2201      	movlt	r2, #1
 8005d2e:	602a      	strlt	r2, [r5, #0]
 8005d30:	ea33 030b 	bics.w	r3, r3, fp
 8005d34:	d11b      	bne.n	8005d6e <_dtoa_r+0x86>
 8005d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d38:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d42:	4333      	orrs	r3, r6
 8005d44:	f000 8590 	beq.w	8006868 <_dtoa_r+0xb80>
 8005d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d4a:	b90b      	cbnz	r3, 8005d50 <_dtoa_r+0x68>
 8005d4c:	4b9b      	ldr	r3, [pc, #620]	; (8005fbc <_dtoa_r+0x2d4>)
 8005d4e:	e022      	b.n	8005d96 <_dtoa_r+0xae>
 8005d50:	4b9a      	ldr	r3, [pc, #616]	; (8005fbc <_dtoa_r+0x2d4>)
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	3303      	adds	r3, #3
 8005d56:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	9801      	ldr	r0, [sp, #4]
 8005d5c:	b013      	add	sp, #76	; 0x4c
 8005d5e:	ecbd 8b04 	vpop	{d8-d9}
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	4b96      	ldr	r3, [pc, #600]	; (8005fc0 <_dtoa_r+0x2d8>)
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	e7f3      	b.n	8005d56 <_dtoa_r+0x6e>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	4650      	mov	r0, sl
 8005d74:	4659      	mov	r1, fp
 8005d76:	f7fa fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d7a:	ec4b ab19 	vmov	d9, sl, fp
 8005d7e:	4680      	mov	r8, r0
 8005d80:	b158      	cbz	r0, 8005d9a <_dtoa_r+0xb2>
 8005d82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d84:	2301      	movs	r3, #1
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8569 	beq.w	8006862 <_dtoa_r+0xb7a>
 8005d90:	488c      	ldr	r0, [pc, #560]	; (8005fc4 <_dtoa_r+0x2dc>)
 8005d92:	6018      	str	r0, [r3, #0]
 8005d94:	1e43      	subs	r3, r0, #1
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	e7df      	b.n	8005d5a <_dtoa_r+0x72>
 8005d9a:	ec4b ab10 	vmov	d0, sl, fp
 8005d9e:	aa10      	add	r2, sp, #64	; 0x40
 8005da0:	a911      	add	r1, sp, #68	; 0x44
 8005da2:	4620      	mov	r0, r4
 8005da4:	f001 fbd6 	bl	8007554 <__d2b>
 8005da8:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005dac:	ee08 0a10 	vmov	s16, r0
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	f000 8082 	beq.w	8005eba <_dtoa_r+0x1d2>
 8005db6:	ee19 3a90 	vmov	r3, s19
 8005dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005dc2:	4656      	mov	r6, sl
 8005dc4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005dc8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dcc:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005dd0:	4b7d      	ldr	r3, [pc, #500]	; (8005fc8 <_dtoa_r+0x2e0>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fa56 	bl	8000288 <__aeabi_dsub>
 8005ddc:	a370      	add	r3, pc, #448	; (adr r3, 8005fa0 <_dtoa_r+0x2b8>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa fc09 	bl	80005f8 <__aeabi_dmul>
 8005de6:	a370      	add	r3, pc, #448	; (adr r3, 8005fa8 <_dtoa_r+0x2c0>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f7fa fa4e 	bl	800028c <__adddf3>
 8005df0:	4606      	mov	r6, r0
 8005df2:	4628      	mov	r0, r5
 8005df4:	460f      	mov	r7, r1
 8005df6:	f7fa fb95 	bl	8000524 <__aeabi_i2d>
 8005dfa:	a36d      	add	r3, pc, #436	; (adr r3, 8005fb0 <_dtoa_r+0x2c8>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa fbfa 	bl	80005f8 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa fa3e 	bl	800028c <__adddf3>
 8005e10:	4606      	mov	r6, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	f7fa fea0 	bl	8000b58 <__aeabi_d2iz>
 8005e18:	2200      	movs	r2, #0
 8005e1a:	9000      	str	r0, [sp, #0]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4630      	mov	r0, r6
 8005e20:	4639      	mov	r1, r7
 8005e22:	f7fa fe5b 	bl	8000adc <__aeabi_dcmplt>
 8005e26:	b150      	cbz	r0, 8005e3e <_dtoa_r+0x156>
 8005e28:	9800      	ldr	r0, [sp, #0]
 8005e2a:	f7fa fb7b 	bl	8000524 <__aeabi_i2d>
 8005e2e:	4632      	mov	r2, r6
 8005e30:	463b      	mov	r3, r7
 8005e32:	f7fa fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e36:	b910      	cbnz	r0, 8005e3e <_dtoa_r+0x156>
 8005e38:	9b00      	ldr	r3, [sp, #0]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	9b00      	ldr	r3, [sp, #0]
 8005e40:	2b16      	cmp	r3, #22
 8005e42:	d858      	bhi.n	8005ef6 <_dtoa_r+0x20e>
 8005e44:	9a00      	ldr	r2, [sp, #0]
 8005e46:	4b61      	ldr	r3, [pc, #388]	; (8005fcc <_dtoa_r+0x2e4>)
 8005e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	ec51 0b19 	vmov	r0, r1, d9
 8005e54:	f7fa fe42 	bl	8000adc <__aeabi_dcmplt>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d04e      	beq.n	8005efa <_dtoa_r+0x212>
 8005e5c:	9b00      	ldr	r3, [sp, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e68:	1b5d      	subs	r5, r3, r5
 8005e6a:	1e6b      	subs	r3, r5, #1
 8005e6c:	9305      	str	r3, [sp, #20]
 8005e6e:	bf45      	ittet	mi
 8005e70:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e74:	9304      	strmi	r3, [sp, #16]
 8005e76:	2300      	movpl	r3, #0
 8005e78:	2300      	movmi	r3, #0
 8005e7a:	bf4c      	ite	mi
 8005e7c:	9305      	strmi	r3, [sp, #20]
 8005e7e:	9304      	strpl	r3, [sp, #16]
 8005e80:	9b00      	ldr	r3, [sp, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	db3b      	blt.n	8005efe <_dtoa_r+0x216>
 8005e86:	9b05      	ldr	r3, [sp, #20]
 8005e88:	9a00      	ldr	r2, [sp, #0]
 8005e8a:	920a      	str	r2, [sp, #40]	; 0x28
 8005e8c:	4413      	add	r3, r2
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	2300      	movs	r3, #0
 8005e92:	9307      	str	r3, [sp, #28]
 8005e94:	9b06      	ldr	r3, [sp, #24]
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d869      	bhi.n	8005f6e <_dtoa_r+0x286>
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	bfc4      	itt	gt
 8005e9e:	3b04      	subgt	r3, #4
 8005ea0:	9306      	strgt	r3, [sp, #24]
 8005ea2:	9b06      	ldr	r3, [sp, #24]
 8005ea4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ea8:	bfcc      	ite	gt
 8005eaa:	2500      	movgt	r5, #0
 8005eac:	2501      	movle	r5, #1
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d868      	bhi.n	8005f84 <_dtoa_r+0x29c>
 8005eb2:	e8df f003 	tbb	[pc, r3]
 8005eb6:	3a2d      	.short	0x3a2d
 8005eb8:	5a38      	.short	0x5a38
 8005eba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ebe:	441d      	add	r5, r3
 8005ec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	bfc1      	itttt	gt
 8005ec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ecc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ed0:	fa0b f303 	lslgt.w	r3, fp, r3
 8005ed4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ed8:	bfda      	itte	le
 8005eda:	f1c3 0320 	rsble	r3, r3, #32
 8005ede:	fa06 f003 	lslle.w	r0, r6, r3
 8005ee2:	4318      	orrgt	r0, r3
 8005ee4:	f7fa fb0e 	bl	8000504 <__aeabi_ui2d>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4606      	mov	r6, r0
 8005eec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ef0:	3d01      	subs	r5, #1
 8005ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ef4:	e76c      	b.n	8005dd0 <_dtoa_r+0xe8>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e7b4      	b.n	8005e64 <_dtoa_r+0x17c>
 8005efa:	900b      	str	r0, [sp, #44]	; 0x2c
 8005efc:	e7b3      	b.n	8005e66 <_dtoa_r+0x17e>
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	9a00      	ldr	r2, [sp, #0]
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	4253      	negs	r3, r2
 8005f08:	9307      	str	r3, [sp, #28]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f0e:	e7c1      	b.n	8005e94 <_dtoa_r+0x1ac>
 8005f10:	2300      	movs	r3, #0
 8005f12:	9308      	str	r3, [sp, #32]
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dc37      	bgt.n	8005f8a <_dtoa_r+0x2a2>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f20:	461a      	mov	r2, r3
 8005f22:	9209      	str	r2, [sp, #36]	; 0x24
 8005f24:	e00c      	b.n	8005f40 <_dtoa_r+0x258>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7f3      	b.n	8005f12 <_dtoa_r+0x22a>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2e:	9308      	str	r3, [sp, #32]
 8005f30:	9b00      	ldr	r3, [sp, #0]
 8005f32:	4413      	add	r3, r2
 8005f34:	9302      	str	r3, [sp, #8]
 8005f36:	3301      	adds	r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	bfb8      	it	lt
 8005f3e:	2301      	movlt	r3, #1
 8005f40:	2200      	movs	r2, #0
 8005f42:	6462      	str	r2, [r4, #68]	; 0x44
 8005f44:	2204      	movs	r2, #4
 8005f46:	f102 0014 	add.w	r0, r2, #20
 8005f4a:	4298      	cmp	r0, r3
 8005f4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005f4e:	d920      	bls.n	8005f92 <_dtoa_r+0x2aa>
 8005f50:	4620      	mov	r0, r4
 8005f52:	f001 f825 	bl	8006fa0 <_Balloc>
 8005f56:	9001      	str	r0, [sp, #4]
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d13d      	bne.n	8005fd8 <_dtoa_r+0x2f0>
 8005f5c:	4b1c      	ldr	r3, [pc, #112]	; (8005fd0 <_dtoa_r+0x2e8>)
 8005f5e:	4602      	mov	r2, r0
 8005f60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f64:	481b      	ldr	r0, [pc, #108]	; (8005fd4 <_dtoa_r+0x2ec>)
 8005f66:	f001 fc77 	bl	8007858 <__assert_func>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e7de      	b.n	8005f2c <_dtoa_r+0x244>
 8005f6e:	2501      	movs	r5, #1
 8005f70:	2300      	movs	r3, #0
 8005f72:	9306      	str	r3, [sp, #24]
 8005f74:	9508      	str	r5, [sp, #32]
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2312      	movs	r3, #18
 8005f82:	e7ce      	b.n	8005f22 <_dtoa_r+0x23a>
 8005f84:	2301      	movs	r3, #1
 8005f86:	9308      	str	r3, [sp, #32]
 8005f88:	e7f5      	b.n	8005f76 <_dtoa_r+0x28e>
 8005f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f90:	e7d6      	b.n	8005f40 <_dtoa_r+0x258>
 8005f92:	3101      	adds	r1, #1
 8005f94:	6461      	str	r1, [r4, #68]	; 0x44
 8005f96:	0052      	lsls	r2, r2, #1
 8005f98:	e7d5      	b.n	8005f46 <_dtoa_r+0x25e>
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w
 8005fa0:	636f4361 	.word	0x636f4361
 8005fa4:	3fd287a7 	.word	0x3fd287a7
 8005fa8:	8b60c8b3 	.word	0x8b60c8b3
 8005fac:	3fc68a28 	.word	0x3fc68a28
 8005fb0:	509f79fb 	.word	0x509f79fb
 8005fb4:	3fd34413 	.word	0x3fd34413
 8005fb8:	7ff00000 	.word	0x7ff00000
 8005fbc:	08009dc0 	.word	0x08009dc0
 8005fc0:	08009dc4 	.word	0x08009dc4
 8005fc4:	08009d9f 	.word	0x08009d9f
 8005fc8:	3ff80000 	.word	0x3ff80000
 8005fcc:	08009ec0 	.word	0x08009ec0
 8005fd0:	08009dcd 	.word	0x08009dcd
 8005fd4:	08009dde 	.word	0x08009dde
 8005fd8:	9b01      	ldr	r3, [sp, #4]
 8005fda:	6423      	str	r3, [r4, #64]	; 0x40
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	2b0e      	cmp	r3, #14
 8005fe0:	f200 809d 	bhi.w	800611e <_dtoa_r+0x436>
 8005fe4:	2d00      	cmp	r5, #0
 8005fe6:	f000 809a 	beq.w	800611e <_dtoa_r+0x436>
 8005fea:	9b00      	ldr	r3, [sp, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dd32      	ble.n	8006056 <_dtoa_r+0x36e>
 8005ff0:	4ab7      	ldr	r2, [pc, #732]	; (80062d0 <_dtoa_r+0x5e8>)
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ffa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ffe:	9b00      	ldr	r3, [sp, #0]
 8006000:	05d8      	lsls	r0, r3, #23
 8006002:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006006:	d516      	bpl.n	8006036 <_dtoa_r+0x34e>
 8006008:	4bb2      	ldr	r3, [pc, #712]	; (80062d4 <_dtoa_r+0x5ec>)
 800600a:	ec51 0b19 	vmov	r0, r1, d9
 800600e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006012:	f7fa fc1b 	bl	800084c <__aeabi_ddiv>
 8006016:	f007 070f 	and.w	r7, r7, #15
 800601a:	4682      	mov	sl, r0
 800601c:	468b      	mov	fp, r1
 800601e:	2503      	movs	r5, #3
 8006020:	4eac      	ldr	r6, [pc, #688]	; (80062d4 <_dtoa_r+0x5ec>)
 8006022:	b957      	cbnz	r7, 800603a <_dtoa_r+0x352>
 8006024:	4642      	mov	r2, r8
 8006026:	464b      	mov	r3, r9
 8006028:	4650      	mov	r0, sl
 800602a:	4659      	mov	r1, fp
 800602c:	f7fa fc0e 	bl	800084c <__aeabi_ddiv>
 8006030:	4682      	mov	sl, r0
 8006032:	468b      	mov	fp, r1
 8006034:	e028      	b.n	8006088 <_dtoa_r+0x3a0>
 8006036:	2502      	movs	r5, #2
 8006038:	e7f2      	b.n	8006020 <_dtoa_r+0x338>
 800603a:	07f9      	lsls	r1, r7, #31
 800603c:	d508      	bpl.n	8006050 <_dtoa_r+0x368>
 800603e:	4640      	mov	r0, r8
 8006040:	4649      	mov	r1, r9
 8006042:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006046:	f7fa fad7 	bl	80005f8 <__aeabi_dmul>
 800604a:	3501      	adds	r5, #1
 800604c:	4680      	mov	r8, r0
 800604e:	4689      	mov	r9, r1
 8006050:	107f      	asrs	r7, r7, #1
 8006052:	3608      	adds	r6, #8
 8006054:	e7e5      	b.n	8006022 <_dtoa_r+0x33a>
 8006056:	f000 809b 	beq.w	8006190 <_dtoa_r+0x4a8>
 800605a:	9b00      	ldr	r3, [sp, #0]
 800605c:	4f9d      	ldr	r7, [pc, #628]	; (80062d4 <_dtoa_r+0x5ec>)
 800605e:	425e      	negs	r6, r3
 8006060:	4b9b      	ldr	r3, [pc, #620]	; (80062d0 <_dtoa_r+0x5e8>)
 8006062:	f006 020f 	and.w	r2, r6, #15
 8006066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	ec51 0b19 	vmov	r0, r1, d9
 8006072:	f7fa fac1 	bl	80005f8 <__aeabi_dmul>
 8006076:	1136      	asrs	r6, r6, #4
 8006078:	4682      	mov	sl, r0
 800607a:	468b      	mov	fp, r1
 800607c:	2300      	movs	r3, #0
 800607e:	2502      	movs	r5, #2
 8006080:	2e00      	cmp	r6, #0
 8006082:	d17a      	bne.n	800617a <_dtoa_r+0x492>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1d3      	bne.n	8006030 <_dtoa_r+0x348>
 8006088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8082 	beq.w	8006194 <_dtoa_r+0x4ac>
 8006090:	4b91      	ldr	r3, [pc, #580]	; (80062d8 <_dtoa_r+0x5f0>)
 8006092:	2200      	movs	r2, #0
 8006094:	4650      	mov	r0, sl
 8006096:	4659      	mov	r1, fp
 8006098:	f7fa fd20 	bl	8000adc <__aeabi_dcmplt>
 800609c:	2800      	cmp	r0, #0
 800609e:	d079      	beq.n	8006194 <_dtoa_r+0x4ac>
 80060a0:	9b03      	ldr	r3, [sp, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d076      	beq.n	8006194 <_dtoa_r+0x4ac>
 80060a6:	9b02      	ldr	r3, [sp, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dd36      	ble.n	800611a <_dtoa_r+0x432>
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	4650      	mov	r0, sl
 80060b0:	4659      	mov	r1, fp
 80060b2:	1e5f      	subs	r7, r3, #1
 80060b4:	2200      	movs	r2, #0
 80060b6:	4b89      	ldr	r3, [pc, #548]	; (80062dc <_dtoa_r+0x5f4>)
 80060b8:	f7fa fa9e 	bl	80005f8 <__aeabi_dmul>
 80060bc:	9e02      	ldr	r6, [sp, #8]
 80060be:	4682      	mov	sl, r0
 80060c0:	468b      	mov	fp, r1
 80060c2:	3501      	adds	r5, #1
 80060c4:	4628      	mov	r0, r5
 80060c6:	f7fa fa2d 	bl	8000524 <__aeabi_i2d>
 80060ca:	4652      	mov	r2, sl
 80060cc:	465b      	mov	r3, fp
 80060ce:	f7fa fa93 	bl	80005f8 <__aeabi_dmul>
 80060d2:	4b83      	ldr	r3, [pc, #524]	; (80062e0 <_dtoa_r+0x5f8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	f7fa f8d9 	bl	800028c <__adddf3>
 80060da:	46d0      	mov	r8, sl
 80060dc:	46d9      	mov	r9, fp
 80060de:	4682      	mov	sl, r0
 80060e0:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	d158      	bne.n	800619a <_dtoa_r+0x4b2>
 80060e8:	4b7e      	ldr	r3, [pc, #504]	; (80062e4 <_dtoa_r+0x5fc>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	4640      	mov	r0, r8
 80060ee:	4649      	mov	r1, r9
 80060f0:	f7fa f8ca 	bl	8000288 <__aeabi_dsub>
 80060f4:	4652      	mov	r2, sl
 80060f6:	465b      	mov	r3, fp
 80060f8:	4680      	mov	r8, r0
 80060fa:	4689      	mov	r9, r1
 80060fc:	f7fa fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 8006100:	2800      	cmp	r0, #0
 8006102:	f040 8296 	bne.w	8006632 <_dtoa_r+0x94a>
 8006106:	4652      	mov	r2, sl
 8006108:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800610c:	4640      	mov	r0, r8
 800610e:	4649      	mov	r1, r9
 8006110:	f7fa fce4 	bl	8000adc <__aeabi_dcmplt>
 8006114:	2800      	cmp	r0, #0
 8006116:	f040 828a 	bne.w	800662e <_dtoa_r+0x946>
 800611a:	ec5b ab19 	vmov	sl, fp, d9
 800611e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006120:	2b00      	cmp	r3, #0
 8006122:	f2c0 8149 	blt.w	80063b8 <_dtoa_r+0x6d0>
 8006126:	9a00      	ldr	r2, [sp, #0]
 8006128:	2a0e      	cmp	r2, #14
 800612a:	f300 8145 	bgt.w	80063b8 <_dtoa_r+0x6d0>
 800612e:	4b68      	ldr	r3, [pc, #416]	; (80062d0 <_dtoa_r+0x5e8>)
 8006130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	f280 80d6 	bge.w	80062ec <_dtoa_r+0x604>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f300 80d2 	bgt.w	80062ec <_dtoa_r+0x604>
 8006148:	f040 8270 	bne.w	800662c <_dtoa_r+0x944>
 800614c:	4b65      	ldr	r3, [pc, #404]	; (80062e4 <_dtoa_r+0x5fc>)
 800614e:	2200      	movs	r2, #0
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	4652      	mov	r2, sl
 800615a:	465b      	mov	r3, fp
 800615c:	f7fa fcd2 	bl	8000b04 <__aeabi_dcmpge>
 8006160:	9e03      	ldr	r6, [sp, #12]
 8006162:	4637      	mov	r7, r6
 8006164:	2800      	cmp	r0, #0
 8006166:	f040 8246 	bne.w	80065f6 <_dtoa_r+0x90e>
 800616a:	9d01      	ldr	r5, [sp, #4]
 800616c:	2331      	movs	r3, #49	; 0x31
 800616e:	f805 3b01 	strb.w	r3, [r5], #1
 8006172:	9b00      	ldr	r3, [sp, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	e241      	b.n	80065fe <_dtoa_r+0x916>
 800617a:	07f2      	lsls	r2, r6, #31
 800617c:	d505      	bpl.n	800618a <_dtoa_r+0x4a2>
 800617e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006182:	f7fa fa39 	bl	80005f8 <__aeabi_dmul>
 8006186:	3501      	adds	r5, #1
 8006188:	2301      	movs	r3, #1
 800618a:	1076      	asrs	r6, r6, #1
 800618c:	3708      	adds	r7, #8
 800618e:	e777      	b.n	8006080 <_dtoa_r+0x398>
 8006190:	2502      	movs	r5, #2
 8006192:	e779      	b.n	8006088 <_dtoa_r+0x3a0>
 8006194:	9f00      	ldr	r7, [sp, #0]
 8006196:	9e03      	ldr	r6, [sp, #12]
 8006198:	e794      	b.n	80060c4 <_dtoa_r+0x3dc>
 800619a:	9901      	ldr	r1, [sp, #4]
 800619c:	4b4c      	ldr	r3, [pc, #304]	; (80062d0 <_dtoa_r+0x5e8>)
 800619e:	4431      	add	r1, r6
 80061a0:	910d      	str	r1, [sp, #52]	; 0x34
 80061a2:	9908      	ldr	r1, [sp, #32]
 80061a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d043      	beq.n	8006238 <_dtoa_r+0x550>
 80061b0:	494d      	ldr	r1, [pc, #308]	; (80062e8 <_dtoa_r+0x600>)
 80061b2:	2000      	movs	r0, #0
 80061b4:	f7fa fb4a 	bl	800084c <__aeabi_ddiv>
 80061b8:	4652      	mov	r2, sl
 80061ba:	465b      	mov	r3, fp
 80061bc:	f7fa f864 	bl	8000288 <__aeabi_dsub>
 80061c0:	9d01      	ldr	r5, [sp, #4]
 80061c2:	4682      	mov	sl, r0
 80061c4:	468b      	mov	fp, r1
 80061c6:	4649      	mov	r1, r9
 80061c8:	4640      	mov	r0, r8
 80061ca:	f7fa fcc5 	bl	8000b58 <__aeabi_d2iz>
 80061ce:	4606      	mov	r6, r0
 80061d0:	f7fa f9a8 	bl	8000524 <__aeabi_i2d>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4640      	mov	r0, r8
 80061da:	4649      	mov	r1, r9
 80061dc:	f7fa f854 	bl	8000288 <__aeabi_dsub>
 80061e0:	3630      	adds	r6, #48	; 0x30
 80061e2:	f805 6b01 	strb.w	r6, [r5], #1
 80061e6:	4652      	mov	r2, sl
 80061e8:	465b      	mov	r3, fp
 80061ea:	4680      	mov	r8, r0
 80061ec:	4689      	mov	r9, r1
 80061ee:	f7fa fc75 	bl	8000adc <__aeabi_dcmplt>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d163      	bne.n	80062be <_dtoa_r+0x5d6>
 80061f6:	4642      	mov	r2, r8
 80061f8:	464b      	mov	r3, r9
 80061fa:	4937      	ldr	r1, [pc, #220]	; (80062d8 <_dtoa_r+0x5f0>)
 80061fc:	2000      	movs	r0, #0
 80061fe:	f7fa f843 	bl	8000288 <__aeabi_dsub>
 8006202:	4652      	mov	r2, sl
 8006204:	465b      	mov	r3, fp
 8006206:	f7fa fc69 	bl	8000adc <__aeabi_dcmplt>
 800620a:	2800      	cmp	r0, #0
 800620c:	f040 80b6 	bne.w	800637c <_dtoa_r+0x694>
 8006210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006212:	429d      	cmp	r5, r3
 8006214:	d081      	beq.n	800611a <_dtoa_r+0x432>
 8006216:	4b31      	ldr	r3, [pc, #196]	; (80062dc <_dtoa_r+0x5f4>)
 8006218:	2200      	movs	r2, #0
 800621a:	4650      	mov	r0, sl
 800621c:	4659      	mov	r1, fp
 800621e:	f7fa f9eb 	bl	80005f8 <__aeabi_dmul>
 8006222:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <_dtoa_r+0x5f4>)
 8006224:	4682      	mov	sl, r0
 8006226:	468b      	mov	fp, r1
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	2200      	movs	r2, #0
 800622e:	f7fa f9e3 	bl	80005f8 <__aeabi_dmul>
 8006232:	4680      	mov	r8, r0
 8006234:	4689      	mov	r9, r1
 8006236:	e7c6      	b.n	80061c6 <_dtoa_r+0x4de>
 8006238:	4650      	mov	r0, sl
 800623a:	4659      	mov	r1, fp
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006242:	9d01      	ldr	r5, [sp, #4]
 8006244:	930f      	str	r3, [sp, #60]	; 0x3c
 8006246:	4682      	mov	sl, r0
 8006248:	468b      	mov	fp, r1
 800624a:	4649      	mov	r1, r9
 800624c:	4640      	mov	r0, r8
 800624e:	f7fa fc83 	bl	8000b58 <__aeabi_d2iz>
 8006252:	4606      	mov	r6, r0
 8006254:	f7fa f966 	bl	8000524 <__aeabi_i2d>
 8006258:	3630      	adds	r6, #48	; 0x30
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4640      	mov	r0, r8
 8006260:	4649      	mov	r1, r9
 8006262:	f7fa f811 	bl	8000288 <__aeabi_dsub>
 8006266:	f805 6b01 	strb.w	r6, [r5], #1
 800626a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800626c:	429d      	cmp	r5, r3
 800626e:	4680      	mov	r8, r0
 8006270:	4689      	mov	r9, r1
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	d124      	bne.n	80062c2 <_dtoa_r+0x5da>
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <_dtoa_r+0x600>)
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	f7fa f805 	bl	800028c <__adddf3>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4640      	mov	r0, r8
 8006288:	4649      	mov	r1, r9
 800628a:	f7fa fc45 	bl	8000b18 <__aeabi_dcmpgt>
 800628e:	2800      	cmp	r0, #0
 8006290:	d174      	bne.n	800637c <_dtoa_r+0x694>
 8006292:	4652      	mov	r2, sl
 8006294:	465b      	mov	r3, fp
 8006296:	4914      	ldr	r1, [pc, #80]	; (80062e8 <_dtoa_r+0x600>)
 8006298:	2000      	movs	r0, #0
 800629a:	f7f9 fff5 	bl	8000288 <__aeabi_dsub>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7fa fc19 	bl	8000adc <__aeabi_dcmplt>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	f43f af35 	beq.w	800611a <_dtoa_r+0x432>
 80062b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062b2:	1e6b      	subs	r3, r5, #1
 80062b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062ba:	2b30      	cmp	r3, #48	; 0x30
 80062bc:	d0f8      	beq.n	80062b0 <_dtoa_r+0x5c8>
 80062be:	9700      	str	r7, [sp, #0]
 80062c0:	e04a      	b.n	8006358 <_dtoa_r+0x670>
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <_dtoa_r+0x5f4>)
 80062c4:	f7fa f998 	bl	80005f8 <__aeabi_dmul>
 80062c8:	4680      	mov	r8, r0
 80062ca:	4689      	mov	r9, r1
 80062cc:	e7bd      	b.n	800624a <_dtoa_r+0x562>
 80062ce:	bf00      	nop
 80062d0:	08009ec0 	.word	0x08009ec0
 80062d4:	08009e98 	.word	0x08009e98
 80062d8:	3ff00000 	.word	0x3ff00000
 80062dc:	40240000 	.word	0x40240000
 80062e0:	401c0000 	.word	0x401c0000
 80062e4:	40140000 	.word	0x40140000
 80062e8:	3fe00000 	.word	0x3fe00000
 80062ec:	9d01      	ldr	r5, [sp, #4]
 80062ee:	4656      	mov	r6, sl
 80062f0:	465f      	mov	r7, fp
 80062f2:	4642      	mov	r2, r8
 80062f4:	464b      	mov	r3, r9
 80062f6:	4630      	mov	r0, r6
 80062f8:	4639      	mov	r1, r7
 80062fa:	f7fa faa7 	bl	800084c <__aeabi_ddiv>
 80062fe:	f7fa fc2b 	bl	8000b58 <__aeabi_d2iz>
 8006302:	4682      	mov	sl, r0
 8006304:	f7fa f90e 	bl	8000524 <__aeabi_i2d>
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	f7fa f974 	bl	80005f8 <__aeabi_dmul>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4630      	mov	r0, r6
 8006316:	4639      	mov	r1, r7
 8006318:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800631c:	f7f9 ffb4 	bl	8000288 <__aeabi_dsub>
 8006320:	f805 6b01 	strb.w	r6, [r5], #1
 8006324:	9e01      	ldr	r6, [sp, #4]
 8006326:	9f03      	ldr	r7, [sp, #12]
 8006328:	1bae      	subs	r6, r5, r6
 800632a:	42b7      	cmp	r7, r6
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	d135      	bne.n	800639e <_dtoa_r+0x6b6>
 8006332:	f7f9 ffab 	bl	800028c <__adddf3>
 8006336:	4642      	mov	r2, r8
 8006338:	464b      	mov	r3, r9
 800633a:	4606      	mov	r6, r0
 800633c:	460f      	mov	r7, r1
 800633e:	f7fa fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8006342:	b9d0      	cbnz	r0, 800637a <_dtoa_r+0x692>
 8006344:	4642      	mov	r2, r8
 8006346:	464b      	mov	r3, r9
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7fa fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006350:	b110      	cbz	r0, 8006358 <_dtoa_r+0x670>
 8006352:	f01a 0f01 	tst.w	sl, #1
 8006356:	d110      	bne.n	800637a <_dtoa_r+0x692>
 8006358:	4620      	mov	r0, r4
 800635a:	ee18 1a10 	vmov	r1, s16
 800635e:	f000 fe44 	bl	8006fea <_Bfree>
 8006362:	2300      	movs	r3, #0
 8006364:	9800      	ldr	r0, [sp, #0]
 8006366:	702b      	strb	r3, [r5, #0]
 8006368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800636a:	3001      	adds	r0, #1
 800636c:	6018      	str	r0, [r3, #0]
 800636e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006370:	2b00      	cmp	r3, #0
 8006372:	f43f acf2 	beq.w	8005d5a <_dtoa_r+0x72>
 8006376:	601d      	str	r5, [r3, #0]
 8006378:	e4ef      	b.n	8005d5a <_dtoa_r+0x72>
 800637a:	9f00      	ldr	r7, [sp, #0]
 800637c:	462b      	mov	r3, r5
 800637e:	461d      	mov	r5, r3
 8006380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006384:	2a39      	cmp	r2, #57	; 0x39
 8006386:	d106      	bne.n	8006396 <_dtoa_r+0x6ae>
 8006388:	9a01      	ldr	r2, [sp, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	d1f7      	bne.n	800637e <_dtoa_r+0x696>
 800638e:	9901      	ldr	r1, [sp, #4]
 8006390:	2230      	movs	r2, #48	; 0x30
 8006392:	3701      	adds	r7, #1
 8006394:	700a      	strb	r2, [r1, #0]
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	3201      	adds	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e78f      	b.n	80062be <_dtoa_r+0x5d6>
 800639e:	4ba6      	ldr	r3, [pc, #664]	; (8006638 <_dtoa_r+0x950>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	f7fa f929 	bl	80005f8 <__aeabi_dmul>
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4606      	mov	r6, r0
 80063ac:	460f      	mov	r7, r1
 80063ae:	f7fa fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d09d      	beq.n	80062f2 <_dtoa_r+0x60a>
 80063b6:	e7cf      	b.n	8006358 <_dtoa_r+0x670>
 80063b8:	9a08      	ldr	r2, [sp, #32]
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	f000 80d7 	beq.w	800656e <_dtoa_r+0x886>
 80063c0:	9a06      	ldr	r2, [sp, #24]
 80063c2:	2a01      	cmp	r2, #1
 80063c4:	f300 80ba 	bgt.w	800653c <_dtoa_r+0x854>
 80063c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ca:	2a00      	cmp	r2, #0
 80063cc:	f000 80b2 	beq.w	8006534 <_dtoa_r+0x84c>
 80063d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063d4:	9e07      	ldr	r6, [sp, #28]
 80063d6:	9d04      	ldr	r5, [sp, #16]
 80063d8:	9a04      	ldr	r2, [sp, #16]
 80063da:	441a      	add	r2, r3
 80063dc:	9204      	str	r2, [sp, #16]
 80063de:	9a05      	ldr	r2, [sp, #20]
 80063e0:	2101      	movs	r1, #1
 80063e2:	441a      	add	r2, r3
 80063e4:	4620      	mov	r0, r4
 80063e6:	9205      	str	r2, [sp, #20]
 80063e8:	f000 fe9e 	bl	8007128 <__i2b>
 80063ec:	4607      	mov	r7, r0
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	dd0c      	ble.n	800640c <_dtoa_r+0x724>
 80063f2:	9b05      	ldr	r3, [sp, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	dd09      	ble.n	800640c <_dtoa_r+0x724>
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	9a04      	ldr	r2, [sp, #16]
 80063fc:	bfa8      	it	ge
 80063fe:	462b      	movge	r3, r5
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	9204      	str	r2, [sp, #16]
 8006404:	9a05      	ldr	r2, [sp, #20]
 8006406:	1aed      	subs	r5, r5, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	9305      	str	r3, [sp, #20]
 800640c:	9b07      	ldr	r3, [sp, #28]
 800640e:	b31b      	cbz	r3, 8006458 <_dtoa_r+0x770>
 8006410:	9b08      	ldr	r3, [sp, #32]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 80af 	beq.w	8006576 <_dtoa_r+0x88e>
 8006418:	2e00      	cmp	r6, #0
 800641a:	dd13      	ble.n	8006444 <_dtoa_r+0x75c>
 800641c:	4639      	mov	r1, r7
 800641e:	4632      	mov	r2, r6
 8006420:	4620      	mov	r0, r4
 8006422:	f000 ff41 	bl	80072a8 <__pow5mult>
 8006426:	ee18 2a10 	vmov	r2, s16
 800642a:	4601      	mov	r1, r0
 800642c:	4607      	mov	r7, r0
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fe90 	bl	8007154 <__multiply>
 8006434:	ee18 1a10 	vmov	r1, s16
 8006438:	4680      	mov	r8, r0
 800643a:	4620      	mov	r0, r4
 800643c:	f000 fdd5 	bl	8006fea <_Bfree>
 8006440:	ee08 8a10 	vmov	s16, r8
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	1b9a      	subs	r2, r3, r6
 8006448:	d006      	beq.n	8006458 <_dtoa_r+0x770>
 800644a:	ee18 1a10 	vmov	r1, s16
 800644e:	4620      	mov	r0, r4
 8006450:	f000 ff2a 	bl	80072a8 <__pow5mult>
 8006454:	ee08 0a10 	vmov	s16, r0
 8006458:	2101      	movs	r1, #1
 800645a:	4620      	mov	r0, r4
 800645c:	f000 fe64 	bl	8007128 <__i2b>
 8006460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006462:	2b00      	cmp	r3, #0
 8006464:	4606      	mov	r6, r0
 8006466:	f340 8088 	ble.w	800657a <_dtoa_r+0x892>
 800646a:	461a      	mov	r2, r3
 800646c:	4601      	mov	r1, r0
 800646e:	4620      	mov	r0, r4
 8006470:	f000 ff1a 	bl	80072a8 <__pow5mult>
 8006474:	9b06      	ldr	r3, [sp, #24]
 8006476:	2b01      	cmp	r3, #1
 8006478:	4606      	mov	r6, r0
 800647a:	f340 8081 	ble.w	8006580 <_dtoa_r+0x898>
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	6933      	ldr	r3, [r6, #16]
 8006484:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006488:	6918      	ldr	r0, [r3, #16]
 800648a:	f000 fdfd 	bl	8007088 <__hi0bits>
 800648e:	f1c0 0020 	rsb	r0, r0, #32
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	4418      	add	r0, r3
 8006496:	f010 001f 	ands.w	r0, r0, #31
 800649a:	f000 8092 	beq.w	80065c2 <_dtoa_r+0x8da>
 800649e:	f1c0 0320 	rsb	r3, r0, #32
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	f340 808a 	ble.w	80065bc <_dtoa_r+0x8d4>
 80064a8:	f1c0 001c 	rsb	r0, r0, #28
 80064ac:	9b04      	ldr	r3, [sp, #16]
 80064ae:	4403      	add	r3, r0
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	9b05      	ldr	r3, [sp, #20]
 80064b4:	4403      	add	r3, r0
 80064b6:	4405      	add	r5, r0
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	9b04      	ldr	r3, [sp, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dd07      	ble.n	80064d0 <_dtoa_r+0x7e8>
 80064c0:	ee18 1a10 	vmov	r1, s16
 80064c4:	461a      	mov	r2, r3
 80064c6:	4620      	mov	r0, r4
 80064c8:	f000 ff2e 	bl	8007328 <__lshift>
 80064cc:	ee08 0a10 	vmov	s16, r0
 80064d0:	9b05      	ldr	r3, [sp, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	dd05      	ble.n	80064e2 <_dtoa_r+0x7fa>
 80064d6:	4631      	mov	r1, r6
 80064d8:	461a      	mov	r2, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 ff24 	bl	8007328 <__lshift>
 80064e0:	4606      	mov	r6, r0
 80064e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d06e      	beq.n	80065c6 <_dtoa_r+0x8de>
 80064e8:	ee18 0a10 	vmov	r0, s16
 80064ec:	4631      	mov	r1, r6
 80064ee:	f000 ff8b 	bl	8007408 <__mcmp>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	da67      	bge.n	80065c6 <_dtoa_r+0x8de>
 80064f6:	9b00      	ldr	r3, [sp, #0]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	ee18 1a10 	vmov	r1, s16
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	220a      	movs	r2, #10
 8006502:	2300      	movs	r3, #0
 8006504:	4620      	mov	r0, r4
 8006506:	f000 fd79 	bl	8006ffc <__multadd>
 800650a:	9b08      	ldr	r3, [sp, #32]
 800650c:	ee08 0a10 	vmov	s16, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 81b0 	beq.w	8006876 <_dtoa_r+0xb8e>
 8006516:	2300      	movs	r3, #0
 8006518:	4639      	mov	r1, r7
 800651a:	220a      	movs	r2, #10
 800651c:	4620      	mov	r0, r4
 800651e:	f000 fd6d 	bl	8006ffc <__multadd>
 8006522:	9b02      	ldr	r3, [sp, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	4607      	mov	r7, r0
 8006528:	f300 808e 	bgt.w	8006648 <_dtoa_r+0x960>
 800652c:	9b06      	ldr	r3, [sp, #24]
 800652e:	2b02      	cmp	r3, #2
 8006530:	dc51      	bgt.n	80065d6 <_dtoa_r+0x8ee>
 8006532:	e089      	b.n	8006648 <_dtoa_r+0x960>
 8006534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800653a:	e74b      	b.n	80063d4 <_dtoa_r+0x6ec>
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	1e5e      	subs	r6, r3, #1
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	42b3      	cmp	r3, r6
 8006544:	bfbf      	itttt	lt
 8006546:	9b07      	ldrlt	r3, [sp, #28]
 8006548:	9607      	strlt	r6, [sp, #28]
 800654a:	1af2      	sublt	r2, r6, r3
 800654c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800654e:	bfb6      	itet	lt
 8006550:	189b      	addlt	r3, r3, r2
 8006552:	1b9e      	subge	r6, r3, r6
 8006554:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	bfb8      	it	lt
 800655a:	2600      	movlt	r6, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfb7      	itett	lt
 8006560:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006564:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006568:	1a9d      	sublt	r5, r3, r2
 800656a:	2300      	movlt	r3, #0
 800656c:	e734      	b.n	80063d8 <_dtoa_r+0x6f0>
 800656e:	9e07      	ldr	r6, [sp, #28]
 8006570:	9d04      	ldr	r5, [sp, #16]
 8006572:	9f08      	ldr	r7, [sp, #32]
 8006574:	e73b      	b.n	80063ee <_dtoa_r+0x706>
 8006576:	9a07      	ldr	r2, [sp, #28]
 8006578:	e767      	b.n	800644a <_dtoa_r+0x762>
 800657a:	9b06      	ldr	r3, [sp, #24]
 800657c:	2b01      	cmp	r3, #1
 800657e:	dc18      	bgt.n	80065b2 <_dtoa_r+0x8ca>
 8006580:	f1ba 0f00 	cmp.w	sl, #0
 8006584:	d115      	bne.n	80065b2 <_dtoa_r+0x8ca>
 8006586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800658a:	b993      	cbnz	r3, 80065b2 <_dtoa_r+0x8ca>
 800658c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006590:	0d1b      	lsrs	r3, r3, #20
 8006592:	051b      	lsls	r3, r3, #20
 8006594:	b183      	cbz	r3, 80065b8 <_dtoa_r+0x8d0>
 8006596:	9b04      	ldr	r3, [sp, #16]
 8006598:	3301      	adds	r3, #1
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	9b05      	ldr	r3, [sp, #20]
 800659e:	3301      	adds	r3, #1
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f04f 0801 	mov.w	r8, #1
 80065a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f af6a 	bne.w	8006482 <_dtoa_r+0x79a>
 80065ae:	2001      	movs	r0, #1
 80065b0:	e76f      	b.n	8006492 <_dtoa_r+0x7aa>
 80065b2:	f04f 0800 	mov.w	r8, #0
 80065b6:	e7f6      	b.n	80065a6 <_dtoa_r+0x8be>
 80065b8:	4698      	mov	r8, r3
 80065ba:	e7f4      	b.n	80065a6 <_dtoa_r+0x8be>
 80065bc:	f43f af7d 	beq.w	80064ba <_dtoa_r+0x7d2>
 80065c0:	4618      	mov	r0, r3
 80065c2:	301c      	adds	r0, #28
 80065c4:	e772      	b.n	80064ac <_dtoa_r+0x7c4>
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	dc37      	bgt.n	800663c <_dtoa_r+0x954>
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	dd34      	ble.n	800663c <_dtoa_r+0x954>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	9302      	str	r3, [sp, #8]
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	b96b      	cbnz	r3, 80065f6 <_dtoa_r+0x90e>
 80065da:	4631      	mov	r1, r6
 80065dc:	2205      	movs	r2, #5
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fd0c 	bl	8006ffc <__multadd>
 80065e4:	4601      	mov	r1, r0
 80065e6:	4606      	mov	r6, r0
 80065e8:	ee18 0a10 	vmov	r0, s16
 80065ec:	f000 ff0c 	bl	8007408 <__mcmp>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	f73f adba 	bgt.w	800616a <_dtoa_r+0x482>
 80065f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f8:	9d01      	ldr	r5, [sp, #4]
 80065fa:	43db      	mvns	r3, r3
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	f04f 0800 	mov.w	r8, #0
 8006602:	4631      	mov	r1, r6
 8006604:	4620      	mov	r0, r4
 8006606:	f000 fcf0 	bl	8006fea <_Bfree>
 800660a:	2f00      	cmp	r7, #0
 800660c:	f43f aea4 	beq.w	8006358 <_dtoa_r+0x670>
 8006610:	f1b8 0f00 	cmp.w	r8, #0
 8006614:	d005      	beq.n	8006622 <_dtoa_r+0x93a>
 8006616:	45b8      	cmp	r8, r7
 8006618:	d003      	beq.n	8006622 <_dtoa_r+0x93a>
 800661a:	4641      	mov	r1, r8
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fce4 	bl	8006fea <_Bfree>
 8006622:	4639      	mov	r1, r7
 8006624:	4620      	mov	r0, r4
 8006626:	f000 fce0 	bl	8006fea <_Bfree>
 800662a:	e695      	b.n	8006358 <_dtoa_r+0x670>
 800662c:	2600      	movs	r6, #0
 800662e:	4637      	mov	r7, r6
 8006630:	e7e1      	b.n	80065f6 <_dtoa_r+0x90e>
 8006632:	9700      	str	r7, [sp, #0]
 8006634:	4637      	mov	r7, r6
 8006636:	e598      	b.n	800616a <_dtoa_r+0x482>
 8006638:	40240000 	.word	0x40240000
 800663c:	9b08      	ldr	r3, [sp, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80c9 	beq.w	80067d6 <_dtoa_r+0xaee>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	9302      	str	r3, [sp, #8]
 8006648:	2d00      	cmp	r5, #0
 800664a:	dd05      	ble.n	8006658 <_dtoa_r+0x970>
 800664c:	4639      	mov	r1, r7
 800664e:	462a      	mov	r2, r5
 8006650:	4620      	mov	r0, r4
 8006652:	f000 fe69 	bl	8007328 <__lshift>
 8006656:	4607      	mov	r7, r0
 8006658:	f1b8 0f00 	cmp.w	r8, #0
 800665c:	d05a      	beq.n	8006714 <_dtoa_r+0xa2c>
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fc9d 	bl	8006fa0 <_Balloc>
 8006666:	4605      	mov	r5, r0
 8006668:	b920      	cbnz	r0, 8006674 <_dtoa_r+0x98c>
 800666a:	4b87      	ldr	r3, [pc, #540]	; (8006888 <_dtoa_r+0xba0>)
 800666c:	4602      	mov	r2, r0
 800666e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006672:	e477      	b.n	8005f64 <_dtoa_r+0x27c>
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	3202      	adds	r2, #2
 8006678:	0092      	lsls	r2, r2, #2
 800667a:	f107 010c 	add.w	r1, r7, #12
 800667e:	300c      	adds	r0, #12
 8006680:	f000 fc74 	bl	8006f6c <memcpy>
 8006684:	2201      	movs	r2, #1
 8006686:	4629      	mov	r1, r5
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fe4d 	bl	8007328 <__lshift>
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	f103 0901 	add.w	r9, r3, #1
 8006694:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006698:	4413      	add	r3, r2
 800669a:	9305      	str	r3, [sp, #20]
 800669c:	f00a 0301 	and.w	r3, sl, #1
 80066a0:	46b8      	mov	r8, r7
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	4607      	mov	r7, r0
 80066a6:	4631      	mov	r1, r6
 80066a8:	ee18 0a10 	vmov	r0, s16
 80066ac:	f7ff fa90 	bl	8005bd0 <quorem>
 80066b0:	4641      	mov	r1, r8
 80066b2:	9002      	str	r0, [sp, #8]
 80066b4:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066b8:	ee18 0a10 	vmov	r0, s16
 80066bc:	f000 fea4 	bl	8007408 <__mcmp>
 80066c0:	463a      	mov	r2, r7
 80066c2:	9003      	str	r0, [sp, #12]
 80066c4:	4631      	mov	r1, r6
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 feba 	bl	8007440 <__mdiff>
 80066cc:	68c2      	ldr	r2, [r0, #12]
 80066ce:	f109 3bff 	add.w	fp, r9, #4294967295
 80066d2:	4605      	mov	r5, r0
 80066d4:	bb02      	cbnz	r2, 8006718 <_dtoa_r+0xa30>
 80066d6:	4601      	mov	r1, r0
 80066d8:	ee18 0a10 	vmov	r0, s16
 80066dc:	f000 fe94 	bl	8007408 <__mcmp>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4629      	mov	r1, r5
 80066e4:	4620      	mov	r0, r4
 80066e6:	9207      	str	r2, [sp, #28]
 80066e8:	f000 fc7f 	bl	8006fea <_Bfree>
 80066ec:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80066f0:	ea43 0102 	orr.w	r1, r3, r2
 80066f4:	9b04      	ldr	r3, [sp, #16]
 80066f6:	430b      	orrs	r3, r1
 80066f8:	464d      	mov	r5, r9
 80066fa:	d10f      	bne.n	800671c <_dtoa_r+0xa34>
 80066fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006700:	d02a      	beq.n	8006758 <_dtoa_r+0xa70>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	dd02      	ble.n	800670e <_dtoa_r+0xa26>
 8006708:	9b02      	ldr	r3, [sp, #8]
 800670a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800670e:	f88b a000 	strb.w	sl, [fp]
 8006712:	e776      	b.n	8006602 <_dtoa_r+0x91a>
 8006714:	4638      	mov	r0, r7
 8006716:	e7ba      	b.n	800668e <_dtoa_r+0x9a6>
 8006718:	2201      	movs	r2, #1
 800671a:	e7e2      	b.n	80066e2 <_dtoa_r+0x9fa>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	db04      	blt.n	800672c <_dtoa_r+0xa44>
 8006722:	9906      	ldr	r1, [sp, #24]
 8006724:	430b      	orrs	r3, r1
 8006726:	9904      	ldr	r1, [sp, #16]
 8006728:	430b      	orrs	r3, r1
 800672a:	d122      	bne.n	8006772 <_dtoa_r+0xa8a>
 800672c:	2a00      	cmp	r2, #0
 800672e:	ddee      	ble.n	800670e <_dtoa_r+0xa26>
 8006730:	ee18 1a10 	vmov	r1, s16
 8006734:	2201      	movs	r2, #1
 8006736:	4620      	mov	r0, r4
 8006738:	f000 fdf6 	bl	8007328 <__lshift>
 800673c:	4631      	mov	r1, r6
 800673e:	ee08 0a10 	vmov	s16, r0
 8006742:	f000 fe61 	bl	8007408 <__mcmp>
 8006746:	2800      	cmp	r0, #0
 8006748:	dc03      	bgt.n	8006752 <_dtoa_r+0xa6a>
 800674a:	d1e0      	bne.n	800670e <_dtoa_r+0xa26>
 800674c:	f01a 0f01 	tst.w	sl, #1
 8006750:	d0dd      	beq.n	800670e <_dtoa_r+0xa26>
 8006752:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006756:	d1d7      	bne.n	8006708 <_dtoa_r+0xa20>
 8006758:	2339      	movs	r3, #57	; 0x39
 800675a:	f88b 3000 	strb.w	r3, [fp]
 800675e:	462b      	mov	r3, r5
 8006760:	461d      	mov	r5, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006768:	2a39      	cmp	r2, #57	; 0x39
 800676a:	d071      	beq.n	8006850 <_dtoa_r+0xb68>
 800676c:	3201      	adds	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	e747      	b.n	8006602 <_dtoa_r+0x91a>
 8006772:	2a00      	cmp	r2, #0
 8006774:	dd07      	ble.n	8006786 <_dtoa_r+0xa9e>
 8006776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800677a:	d0ed      	beq.n	8006758 <_dtoa_r+0xa70>
 800677c:	f10a 0301 	add.w	r3, sl, #1
 8006780:	f88b 3000 	strb.w	r3, [fp]
 8006784:	e73d      	b.n	8006602 <_dtoa_r+0x91a>
 8006786:	9b05      	ldr	r3, [sp, #20]
 8006788:	f809 ac01 	strb.w	sl, [r9, #-1]
 800678c:	4599      	cmp	r9, r3
 800678e:	d047      	beq.n	8006820 <_dtoa_r+0xb38>
 8006790:	ee18 1a10 	vmov	r1, s16
 8006794:	2300      	movs	r3, #0
 8006796:	220a      	movs	r2, #10
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fc2f 	bl	8006ffc <__multadd>
 800679e:	45b8      	cmp	r8, r7
 80067a0:	ee08 0a10 	vmov	s16, r0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	f04f 020a 	mov.w	r2, #10
 80067ac:	4641      	mov	r1, r8
 80067ae:	4620      	mov	r0, r4
 80067b0:	d106      	bne.n	80067c0 <_dtoa_r+0xad8>
 80067b2:	f000 fc23 	bl	8006ffc <__multadd>
 80067b6:	4680      	mov	r8, r0
 80067b8:	4607      	mov	r7, r0
 80067ba:	f109 0901 	add.w	r9, r9, #1
 80067be:	e772      	b.n	80066a6 <_dtoa_r+0x9be>
 80067c0:	f000 fc1c 	bl	8006ffc <__multadd>
 80067c4:	4639      	mov	r1, r7
 80067c6:	4680      	mov	r8, r0
 80067c8:	2300      	movs	r3, #0
 80067ca:	220a      	movs	r2, #10
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fc15 	bl	8006ffc <__multadd>
 80067d2:	4607      	mov	r7, r0
 80067d4:	e7f1      	b.n	80067ba <_dtoa_r+0xad2>
 80067d6:	9b03      	ldr	r3, [sp, #12]
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	9d01      	ldr	r5, [sp, #4]
 80067dc:	ee18 0a10 	vmov	r0, s16
 80067e0:	4631      	mov	r1, r6
 80067e2:	f7ff f9f5 	bl	8005bd0 <quorem>
 80067e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067ea:	9b01      	ldr	r3, [sp, #4]
 80067ec:	f805 ab01 	strb.w	sl, [r5], #1
 80067f0:	1aea      	subs	r2, r5, r3
 80067f2:	9b02      	ldr	r3, [sp, #8]
 80067f4:	4293      	cmp	r3, r2
 80067f6:	dd09      	ble.n	800680c <_dtoa_r+0xb24>
 80067f8:	ee18 1a10 	vmov	r1, s16
 80067fc:	2300      	movs	r3, #0
 80067fe:	220a      	movs	r2, #10
 8006800:	4620      	mov	r0, r4
 8006802:	f000 fbfb 	bl	8006ffc <__multadd>
 8006806:	ee08 0a10 	vmov	s16, r0
 800680a:	e7e7      	b.n	80067dc <_dtoa_r+0xaf4>
 800680c:	9b02      	ldr	r3, [sp, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	bfc8      	it	gt
 8006812:	461d      	movgt	r5, r3
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	bfd8      	it	le
 8006818:	2501      	movle	r5, #1
 800681a:	441d      	add	r5, r3
 800681c:	f04f 0800 	mov.w	r8, #0
 8006820:	ee18 1a10 	vmov	r1, s16
 8006824:	2201      	movs	r2, #1
 8006826:	4620      	mov	r0, r4
 8006828:	f000 fd7e 	bl	8007328 <__lshift>
 800682c:	4631      	mov	r1, r6
 800682e:	ee08 0a10 	vmov	s16, r0
 8006832:	f000 fde9 	bl	8007408 <__mcmp>
 8006836:	2800      	cmp	r0, #0
 8006838:	dc91      	bgt.n	800675e <_dtoa_r+0xa76>
 800683a:	d102      	bne.n	8006842 <_dtoa_r+0xb5a>
 800683c:	f01a 0f01 	tst.w	sl, #1
 8006840:	d18d      	bne.n	800675e <_dtoa_r+0xa76>
 8006842:	462b      	mov	r3, r5
 8006844:	461d      	mov	r5, r3
 8006846:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800684a:	2a30      	cmp	r2, #48	; 0x30
 800684c:	d0fa      	beq.n	8006844 <_dtoa_r+0xb5c>
 800684e:	e6d8      	b.n	8006602 <_dtoa_r+0x91a>
 8006850:	9a01      	ldr	r2, [sp, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d184      	bne.n	8006760 <_dtoa_r+0xa78>
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	2331      	movs	r3, #49	; 0x31
 800685e:	7013      	strb	r3, [r2, #0]
 8006860:	e6cf      	b.n	8006602 <_dtoa_r+0x91a>
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <_dtoa_r+0xba4>)
 8006864:	f7ff ba97 	b.w	8005d96 <_dtoa_r+0xae>
 8006868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800686a:	2b00      	cmp	r3, #0
 800686c:	f47f aa7b 	bne.w	8005d66 <_dtoa_r+0x7e>
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <_dtoa_r+0xba8>)
 8006872:	f7ff ba90 	b.w	8005d96 <_dtoa_r+0xae>
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dcae      	bgt.n	80067da <_dtoa_r+0xaf2>
 800687c:	9b06      	ldr	r3, [sp, #24]
 800687e:	2b02      	cmp	r3, #2
 8006880:	f73f aea9 	bgt.w	80065d6 <_dtoa_r+0x8ee>
 8006884:	e7a9      	b.n	80067da <_dtoa_r+0xaf2>
 8006886:	bf00      	nop
 8006888:	08009dcd 	.word	0x08009dcd
 800688c:	08009d9e 	.word	0x08009d9e
 8006890:	08009dc4 	.word	0x08009dc4

08006894 <__libc_fini_array>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d07      	ldr	r5, [pc, #28]	; (80068b4 <__libc_fini_array+0x20>)
 8006898:	4c07      	ldr	r4, [pc, #28]	; (80068b8 <__libc_fini_array+0x24>)
 800689a:	1b64      	subs	r4, r4, r5
 800689c:	10a4      	asrs	r4, r4, #2
 800689e:	b91c      	cbnz	r4, 80068a8 <__libc_fini_array+0x14>
 80068a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a4:	f003 ba3c 	b.w	8009d20 <_fini>
 80068a8:	3c01      	subs	r4, #1
 80068aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80068ae:	4798      	blx	r3
 80068b0:	e7f5      	b.n	800689e <__libc_fini_array+0xa>
 80068b2:	bf00      	nop
 80068b4:	0800a4dc 	.word	0x0800a4dc
 80068b8:	0800a4e0 	.word	0x0800a4e0

080068bc <_malloc_trim_r>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	4606      	mov	r6, r0
 80068c2:	2008      	movs	r0, #8
 80068c4:	460c      	mov	r4, r1
 80068c6:	f000 ff77 	bl	80077b8 <sysconf>
 80068ca:	4f23      	ldr	r7, [pc, #140]	; (8006958 <_malloc_trim_r+0x9c>)
 80068cc:	4680      	mov	r8, r0
 80068ce:	4630      	mov	r0, r6
 80068d0:	f000 fb5a 	bl	8006f88 <__malloc_lock>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	685d      	ldr	r5, [r3, #4]
 80068d8:	f025 0503 	bic.w	r5, r5, #3
 80068dc:	1b2c      	subs	r4, r5, r4
 80068de:	3c11      	subs	r4, #17
 80068e0:	4444      	add	r4, r8
 80068e2:	fbb4 f4f8 	udiv	r4, r4, r8
 80068e6:	3c01      	subs	r4, #1
 80068e8:	fb08 f404 	mul.w	r4, r8, r4
 80068ec:	45a0      	cmp	r8, r4
 80068ee:	dd05      	ble.n	80068fc <_malloc_trim_r+0x40>
 80068f0:	4630      	mov	r0, r6
 80068f2:	f000 fb4f 	bl	8006f94 <__malloc_unlock>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068fc:	2100      	movs	r1, #0
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 febc 	bl	800767c <_sbrk_r>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	442b      	add	r3, r5
 8006908:	4298      	cmp	r0, r3
 800690a:	d1f1      	bne.n	80068f0 <_malloc_trim_r+0x34>
 800690c:	4261      	negs	r1, r4
 800690e:	4630      	mov	r0, r6
 8006910:	f000 feb4 	bl	800767c <_sbrk_r>
 8006914:	3001      	adds	r0, #1
 8006916:	d110      	bne.n	800693a <_malloc_trim_r+0x7e>
 8006918:	2100      	movs	r1, #0
 800691a:	4630      	mov	r0, r6
 800691c:	f000 feae 	bl	800767c <_sbrk_r>
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	1a83      	subs	r3, r0, r2
 8006924:	2b0f      	cmp	r3, #15
 8006926:	dde3      	ble.n	80068f0 <_malloc_trim_r+0x34>
 8006928:	490c      	ldr	r1, [pc, #48]	; (800695c <_malloc_trim_r+0xa0>)
 800692a:	6809      	ldr	r1, [r1, #0]
 800692c:	1a40      	subs	r0, r0, r1
 800692e:	490c      	ldr	r1, [pc, #48]	; (8006960 <_malloc_trim_r+0xa4>)
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	6008      	str	r0, [r1, #0]
 8006936:	6053      	str	r3, [r2, #4]
 8006938:	e7da      	b.n	80068f0 <_malloc_trim_r+0x34>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4a08      	ldr	r2, [pc, #32]	; (8006960 <_malloc_trim_r+0xa4>)
 800693e:	1b2d      	subs	r5, r5, r4
 8006940:	f045 0501 	orr.w	r5, r5, #1
 8006944:	605d      	str	r5, [r3, #4]
 8006946:	6813      	ldr	r3, [r2, #0]
 8006948:	4630      	mov	r0, r6
 800694a:	1b1b      	subs	r3, r3, r4
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	f000 fb21 	bl	8006f94 <__malloc_unlock>
 8006952:	2001      	movs	r0, #1
 8006954:	e7d0      	b.n	80068f8 <_malloc_trim_r+0x3c>
 8006956:	bf00      	nop
 8006958:	2000049c 	.word	0x2000049c
 800695c:	200008a4 	.word	0x200008a4
 8006960:	20000ec8 	.word	0x20000ec8

08006964 <_free_r>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	4605      	mov	r5, r0
 8006968:	460f      	mov	r7, r1
 800696a:	2900      	cmp	r1, #0
 800696c:	f000 80b1 	beq.w	8006ad2 <_free_r+0x16e>
 8006970:	f000 fb0a 	bl	8006f88 <__malloc_lock>
 8006974:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006978:	4856      	ldr	r0, [pc, #344]	; (8006ad4 <_free_r+0x170>)
 800697a:	f022 0401 	bic.w	r4, r2, #1
 800697e:	f1a7 0308 	sub.w	r3, r7, #8
 8006982:	eb03 0c04 	add.w	ip, r3, r4
 8006986:	6881      	ldr	r1, [r0, #8]
 8006988:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800698c:	4561      	cmp	r1, ip
 800698e:	f026 0603 	bic.w	r6, r6, #3
 8006992:	f002 0201 	and.w	r2, r2, #1
 8006996:	d11b      	bne.n	80069d0 <_free_r+0x6c>
 8006998:	4434      	add	r4, r6
 800699a:	b93a      	cbnz	r2, 80069ac <_free_r+0x48>
 800699c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	4414      	add	r4, r2
 80069a4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80069a8:	60ca      	str	r2, [r1, #12]
 80069aa:	6091      	str	r1, [r2, #8]
 80069ac:	f044 0201 	orr.w	r2, r4, #1
 80069b0:	605a      	str	r2, [r3, #4]
 80069b2:	6083      	str	r3, [r0, #8]
 80069b4:	4b48      	ldr	r3, [pc, #288]	; (8006ad8 <_free_r+0x174>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	d804      	bhi.n	80069c6 <_free_r+0x62>
 80069bc:	4b47      	ldr	r3, [pc, #284]	; (8006adc <_free_r+0x178>)
 80069be:	4628      	mov	r0, r5
 80069c0:	6819      	ldr	r1, [r3, #0]
 80069c2:	f7ff ff7b 	bl	80068bc <_malloc_trim_r>
 80069c6:	4628      	mov	r0, r5
 80069c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069cc:	f000 bae2 	b.w	8006f94 <__malloc_unlock>
 80069d0:	f8cc 6004 	str.w	r6, [ip, #4]
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	d138      	bne.n	8006a4a <_free_r+0xe6>
 80069d8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80069dc:	1a5b      	subs	r3, r3, r1
 80069de:	440c      	add	r4, r1
 80069e0:	6899      	ldr	r1, [r3, #8]
 80069e2:	f100 0708 	add.w	r7, r0, #8
 80069e6:	42b9      	cmp	r1, r7
 80069e8:	d031      	beq.n	8006a4e <_free_r+0xea>
 80069ea:	68df      	ldr	r7, [r3, #12]
 80069ec:	60cf      	str	r7, [r1, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	eb0c 0106 	add.w	r1, ip, r6
 80069f4:	6849      	ldr	r1, [r1, #4]
 80069f6:	07c9      	lsls	r1, r1, #31
 80069f8:	d40b      	bmi.n	8006a12 <_free_r+0xae>
 80069fa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80069fe:	4434      	add	r4, r6
 8006a00:	bb3a      	cbnz	r2, 8006a52 <_free_r+0xee>
 8006a02:	4e37      	ldr	r6, [pc, #220]	; (8006ae0 <_free_r+0x17c>)
 8006a04:	42b1      	cmp	r1, r6
 8006a06:	d124      	bne.n	8006a52 <_free_r+0xee>
 8006a08:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a0c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f044 0101 	orr.w	r1, r4, #1
 8006a16:	6059      	str	r1, [r3, #4]
 8006a18:	511c      	str	r4, [r3, r4]
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	d1d3      	bne.n	80069c6 <_free_r+0x62>
 8006a1e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8006a22:	d21b      	bcs.n	8006a5c <_free_r+0xf8>
 8006a24:	0961      	lsrs	r1, r4, #5
 8006a26:	08e2      	lsrs	r2, r4, #3
 8006a28:	2401      	movs	r4, #1
 8006a2a:	408c      	lsls	r4, r1
 8006a2c:	6841      	ldr	r1, [r0, #4]
 8006a2e:	3201      	adds	r2, #1
 8006a30:	430c      	orrs	r4, r1
 8006a32:	6044      	str	r4, [r0, #4]
 8006a34:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006a38:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8006a3c:	3908      	subs	r1, #8
 8006a3e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8006a42:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8006a46:	60e3      	str	r3, [r4, #12]
 8006a48:	e7bd      	b.n	80069c6 <_free_r+0x62>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	e7d0      	b.n	80069f0 <_free_r+0x8c>
 8006a4e:	2201      	movs	r2, #1
 8006a50:	e7ce      	b.n	80069f0 <_free_r+0x8c>
 8006a52:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8006a56:	60ce      	str	r6, [r1, #12]
 8006a58:	60b1      	str	r1, [r6, #8]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0xae>
 8006a5c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8006a60:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8006a64:	d214      	bcs.n	8006a90 <_free_r+0x12c>
 8006a66:	09a2      	lsrs	r2, r4, #6
 8006a68:	3238      	adds	r2, #56	; 0x38
 8006a6a:	1c51      	adds	r1, r2, #1
 8006a6c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8006a70:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8006a74:	428e      	cmp	r6, r1
 8006a76:	d125      	bne.n	8006ac4 <_free_r+0x160>
 8006a78:	2401      	movs	r4, #1
 8006a7a:	1092      	asrs	r2, r2, #2
 8006a7c:	fa04 f202 	lsl.w	r2, r4, r2
 8006a80:	6844      	ldr	r4, [r0, #4]
 8006a82:	4322      	orrs	r2, r4
 8006a84:	6042      	str	r2, [r0, #4]
 8006a86:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8006a8a:	60b3      	str	r3, [r6, #8]
 8006a8c:	60cb      	str	r3, [r1, #12]
 8006a8e:	e79a      	b.n	80069c6 <_free_r+0x62>
 8006a90:	2a14      	cmp	r2, #20
 8006a92:	d801      	bhi.n	8006a98 <_free_r+0x134>
 8006a94:	325b      	adds	r2, #91	; 0x5b
 8006a96:	e7e8      	b.n	8006a6a <_free_r+0x106>
 8006a98:	2a54      	cmp	r2, #84	; 0x54
 8006a9a:	d802      	bhi.n	8006aa2 <_free_r+0x13e>
 8006a9c:	0b22      	lsrs	r2, r4, #12
 8006a9e:	326e      	adds	r2, #110	; 0x6e
 8006aa0:	e7e3      	b.n	8006a6a <_free_r+0x106>
 8006aa2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006aa6:	d802      	bhi.n	8006aae <_free_r+0x14a>
 8006aa8:	0be2      	lsrs	r2, r4, #15
 8006aaa:	3277      	adds	r2, #119	; 0x77
 8006aac:	e7dd      	b.n	8006a6a <_free_r+0x106>
 8006aae:	f240 5154 	movw	r1, #1364	; 0x554
 8006ab2:	428a      	cmp	r2, r1
 8006ab4:	bf9a      	itte	ls
 8006ab6:	0ca2      	lsrls	r2, r4, #18
 8006ab8:	327c      	addls	r2, #124	; 0x7c
 8006aba:	227e      	movhi	r2, #126	; 0x7e
 8006abc:	e7d5      	b.n	8006a6a <_free_r+0x106>
 8006abe:	6889      	ldr	r1, [r1, #8]
 8006ac0:	428e      	cmp	r6, r1
 8006ac2:	d004      	beq.n	8006ace <_free_r+0x16a>
 8006ac4:	684a      	ldr	r2, [r1, #4]
 8006ac6:	f022 0203 	bic.w	r2, r2, #3
 8006aca:	42a2      	cmp	r2, r4
 8006acc:	d8f7      	bhi.n	8006abe <_free_r+0x15a>
 8006ace:	68ce      	ldr	r6, [r1, #12]
 8006ad0:	e7d9      	b.n	8006a86 <_free_r+0x122>
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	2000049c 	.word	0x2000049c
 8006ad8:	200008a8 	.word	0x200008a8
 8006adc:	20000ef8 	.word	0x20000ef8
 8006ae0:	200004a4 	.word	0x200004a4

08006ae4 <_localeconv_r>:
 8006ae4:	4800      	ldr	r0, [pc, #0]	; (8006ae8 <_localeconv_r+0x4>)
 8006ae6:	4770      	bx	lr
 8006ae8:	2000099c 	.word	0x2000099c

08006aec <__retarget_lock_init_recursive>:
 8006aec:	4770      	bx	lr

08006aee <__retarget_lock_close_recursive>:
 8006aee:	4770      	bx	lr

08006af0 <__retarget_lock_acquire_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__retarget_lock_release_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <_malloc_r>:
 8006af4:	f101 030b 	add.w	r3, r1, #11
 8006af8:	2b16      	cmp	r3, #22
 8006afa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afe:	4605      	mov	r5, r0
 8006b00:	d906      	bls.n	8006b10 <_malloc_r+0x1c>
 8006b02:	f033 0707 	bics.w	r7, r3, #7
 8006b06:	d504      	bpl.n	8006b12 <_malloc_r+0x1e>
 8006b08:	230c      	movs	r3, #12
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	2400      	movs	r4, #0
 8006b0e:	e1a5      	b.n	8006e5c <_malloc_r+0x368>
 8006b10:	2710      	movs	r7, #16
 8006b12:	42b9      	cmp	r1, r7
 8006b14:	d8f8      	bhi.n	8006b08 <_malloc_r+0x14>
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fa36 	bl	8006f88 <__malloc_lock>
 8006b1c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8006b20:	4eb0      	ldr	r6, [pc, #704]	; (8006de4 <_malloc_r+0x2f0>)
 8006b22:	d237      	bcs.n	8006b94 <_malloc_r+0xa0>
 8006b24:	f107 0208 	add.w	r2, r7, #8
 8006b28:	4432      	add	r2, r6
 8006b2a:	f1a2 0108 	sub.w	r1, r2, #8
 8006b2e:	6854      	ldr	r4, [r2, #4]
 8006b30:	428c      	cmp	r4, r1
 8006b32:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8006b36:	d102      	bne.n	8006b3e <_malloc_r+0x4a>
 8006b38:	68d4      	ldr	r4, [r2, #12]
 8006b3a:	42a2      	cmp	r2, r4
 8006b3c:	d010      	beq.n	8006b60 <_malloc_r+0x6c>
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006b44:	f023 0303 	bic.w	r3, r3, #3
 8006b48:	60ca      	str	r2, [r1, #12]
 8006b4a:	4423      	add	r3, r4
 8006b4c:	6091      	str	r1, [r2, #8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	f042 0201 	orr.w	r2, r2, #1
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 fa1c 	bl	8006f94 <__malloc_unlock>
 8006b5c:	3408      	adds	r4, #8
 8006b5e:	e17d      	b.n	8006e5c <_malloc_r+0x368>
 8006b60:	3302      	adds	r3, #2
 8006b62:	6934      	ldr	r4, [r6, #16]
 8006b64:	49a0      	ldr	r1, [pc, #640]	; (8006de8 <_malloc_r+0x2f4>)
 8006b66:	428c      	cmp	r4, r1
 8006b68:	d077      	beq.n	8006c5a <_malloc_r+0x166>
 8006b6a:	6862      	ldr	r2, [r4, #4]
 8006b6c:	f022 0c03 	bic.w	ip, r2, #3
 8006b70:	ebac 0007 	sub.w	r0, ip, r7
 8006b74:	280f      	cmp	r0, #15
 8006b76:	dd48      	ble.n	8006c0a <_malloc_r+0x116>
 8006b78:	19e2      	adds	r2, r4, r7
 8006b7a:	f040 0301 	orr.w	r3, r0, #1
 8006b7e:	f047 0701 	orr.w	r7, r7, #1
 8006b82:	6067      	str	r7, [r4, #4]
 8006b84:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006b88:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006b8c:	6053      	str	r3, [r2, #4]
 8006b8e:	f844 000c 	str.w	r0, [r4, ip]
 8006b92:	e7e0      	b.n	8006b56 <_malloc_r+0x62>
 8006b94:	0a7b      	lsrs	r3, r7, #9
 8006b96:	d02a      	beq.n	8006bee <_malloc_r+0xfa>
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d812      	bhi.n	8006bc2 <_malloc_r+0xce>
 8006b9c:	09bb      	lsrs	r3, r7, #6
 8006b9e:	3338      	adds	r3, #56	; 0x38
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8006ba6:	f1a2 0c08 	sub.w	ip, r2, #8
 8006baa:	6854      	ldr	r4, [r2, #4]
 8006bac:	4564      	cmp	r4, ip
 8006bae:	d006      	beq.n	8006bbe <_malloc_r+0xca>
 8006bb0:	6862      	ldr	r2, [r4, #4]
 8006bb2:	f022 0203 	bic.w	r2, r2, #3
 8006bb6:	1bd0      	subs	r0, r2, r7
 8006bb8:	280f      	cmp	r0, #15
 8006bba:	dd1c      	ble.n	8006bf6 <_malloc_r+0x102>
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	e7cf      	b.n	8006b62 <_malloc_r+0x6e>
 8006bc2:	2b14      	cmp	r3, #20
 8006bc4:	d801      	bhi.n	8006bca <_malloc_r+0xd6>
 8006bc6:	335b      	adds	r3, #91	; 0x5b
 8006bc8:	e7ea      	b.n	8006ba0 <_malloc_r+0xac>
 8006bca:	2b54      	cmp	r3, #84	; 0x54
 8006bcc:	d802      	bhi.n	8006bd4 <_malloc_r+0xe0>
 8006bce:	0b3b      	lsrs	r3, r7, #12
 8006bd0:	336e      	adds	r3, #110	; 0x6e
 8006bd2:	e7e5      	b.n	8006ba0 <_malloc_r+0xac>
 8006bd4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006bd8:	d802      	bhi.n	8006be0 <_malloc_r+0xec>
 8006bda:	0bfb      	lsrs	r3, r7, #15
 8006bdc:	3377      	adds	r3, #119	; 0x77
 8006bde:	e7df      	b.n	8006ba0 <_malloc_r+0xac>
 8006be0:	f240 5254 	movw	r2, #1364	; 0x554
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d804      	bhi.n	8006bf2 <_malloc_r+0xfe>
 8006be8:	0cbb      	lsrs	r3, r7, #18
 8006bea:	337c      	adds	r3, #124	; 0x7c
 8006bec:	e7d8      	b.n	8006ba0 <_malloc_r+0xac>
 8006bee:	233f      	movs	r3, #63	; 0x3f
 8006bf0:	e7d6      	b.n	8006ba0 <_malloc_r+0xac>
 8006bf2:	237e      	movs	r3, #126	; 0x7e
 8006bf4:	e7d4      	b.n	8006ba0 <_malloc_r+0xac>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	68e1      	ldr	r1, [r4, #12]
 8006bfa:	db04      	blt.n	8006c06 <_malloc_r+0x112>
 8006bfc:	68a3      	ldr	r3, [r4, #8]
 8006bfe:	60d9      	str	r1, [r3, #12]
 8006c00:	608b      	str	r3, [r1, #8]
 8006c02:	18a3      	adds	r3, r4, r2
 8006c04:	e7a3      	b.n	8006b4e <_malloc_r+0x5a>
 8006c06:	460c      	mov	r4, r1
 8006c08:	e7d0      	b.n	8006bac <_malloc_r+0xb8>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8006c10:	db07      	blt.n	8006c22 <_malloc_r+0x12e>
 8006c12:	44a4      	add	ip, r4
 8006c14:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	f8cc 3004 	str.w	r3, [ip, #4]
 8006c20:	e799      	b.n	8006b56 <_malloc_r+0x62>
 8006c22:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006c26:	6870      	ldr	r0, [r6, #4]
 8006c28:	f080 8096 	bcs.w	8006d58 <_malloc_r+0x264>
 8006c2c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8006c30:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8006c34:	f04f 0c01 	mov.w	ip, #1
 8006c38:	3201      	adds	r2, #1
 8006c3a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006c3e:	ea4c 0000 	orr.w	r0, ip, r0
 8006c42:	6070      	str	r0, [r6, #4]
 8006c44:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8006c48:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8006c4c:	3808      	subs	r0, #8
 8006c4e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8006c52:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8006c56:	f8cc 400c 	str.w	r4, [ip, #12]
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	109a      	asrs	r2, r3, #2
 8006c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c62:	6870      	ldr	r0, [r6, #4]
 8006c64:	4290      	cmp	r0, r2
 8006c66:	d326      	bcc.n	8006cb6 <_malloc_r+0x1c2>
 8006c68:	4210      	tst	r0, r2
 8006c6a:	d106      	bne.n	8006c7a <_malloc_r+0x186>
 8006c6c:	f023 0303 	bic.w	r3, r3, #3
 8006c70:	0052      	lsls	r2, r2, #1
 8006c72:	4210      	tst	r0, r2
 8006c74:	f103 0304 	add.w	r3, r3, #4
 8006c78:	d0fa      	beq.n	8006c70 <_malloc_r+0x17c>
 8006c7a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8006c7e:	46c1      	mov	r9, r8
 8006c80:	469e      	mov	lr, r3
 8006c82:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8006c86:	454c      	cmp	r4, r9
 8006c88:	f040 80ba 	bne.w	8006e00 <_malloc_r+0x30c>
 8006c8c:	f10e 0e01 	add.w	lr, lr, #1
 8006c90:	f01e 0f03 	tst.w	lr, #3
 8006c94:	f109 0908 	add.w	r9, r9, #8
 8006c98:	d1f3      	bne.n	8006c82 <_malloc_r+0x18e>
 8006c9a:	0798      	lsls	r0, r3, #30
 8006c9c:	f040 80e4 	bne.w	8006e68 <_malloc_r+0x374>
 8006ca0:	6873      	ldr	r3, [r6, #4]
 8006ca2:	ea23 0302 	bic.w	r3, r3, r2
 8006ca6:	6073      	str	r3, [r6, #4]
 8006ca8:	6870      	ldr	r0, [r6, #4]
 8006caa:	0052      	lsls	r2, r2, #1
 8006cac:	4290      	cmp	r0, r2
 8006cae:	d302      	bcc.n	8006cb6 <_malloc_r+0x1c2>
 8006cb0:	2a00      	cmp	r2, #0
 8006cb2:	f040 80e6 	bne.w	8006e82 <_malloc_r+0x38e>
 8006cb6:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006cba:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006cbe:	f023 0903 	bic.w	r9, r3, #3
 8006cc2:	45b9      	cmp	r9, r7
 8006cc4:	d304      	bcc.n	8006cd0 <_malloc_r+0x1dc>
 8006cc6:	eba9 0207 	sub.w	r2, r9, r7
 8006cca:	2a0f      	cmp	r2, #15
 8006ccc:	f300 8142 	bgt.w	8006f54 <_malloc_r+0x460>
 8006cd0:	4b46      	ldr	r3, [pc, #280]	; (8006dec <_malloc_r+0x2f8>)
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	3110      	adds	r1, #16
 8006cd6:	4439      	add	r1, r7
 8006cd8:	2008      	movs	r0, #8
 8006cda:	9101      	str	r1, [sp, #4]
 8006cdc:	f000 fd6c 	bl	80077b8 <sysconf>
 8006ce0:	4a43      	ldr	r2, [pc, #268]	; (8006df0 <_malloc_r+0x2fc>)
 8006ce2:	9901      	ldr	r1, [sp, #4]
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	bf1f      	itttt	ne
 8006cea:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006cee:	1809      	addne	r1, r1, r0
 8006cf0:	4243      	negne	r3, r0
 8006cf2:	4019      	andne	r1, r3
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	9101      	str	r1, [sp, #4]
 8006cfa:	f000 fcbf 	bl	800767c <_sbrk_r>
 8006cfe:	1c42      	adds	r2, r0, #1
 8006d00:	eb0a 0b09 	add.w	fp, sl, r9
 8006d04:	4604      	mov	r4, r0
 8006d06:	f000 80f8 	beq.w	8006efa <_malloc_r+0x406>
 8006d0a:	4583      	cmp	fp, r0
 8006d0c:	9901      	ldr	r1, [sp, #4]
 8006d0e:	4a38      	ldr	r2, [pc, #224]	; (8006df0 <_malloc_r+0x2fc>)
 8006d10:	d902      	bls.n	8006d18 <_malloc_r+0x224>
 8006d12:	45b2      	cmp	sl, r6
 8006d14:	f040 80f1 	bne.w	8006efa <_malloc_r+0x406>
 8006d18:	4b36      	ldr	r3, [pc, #216]	; (8006df4 <_malloc_r+0x300>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	45a3      	cmp	fp, r4
 8006d1e:	eb00 0e01 	add.w	lr, r0, r1
 8006d22:	f8c3 e000 	str.w	lr, [r3]
 8006d26:	f108 3cff 	add.w	ip, r8, #4294967295
 8006d2a:	f040 80ac 	bne.w	8006e86 <_malloc_r+0x392>
 8006d2e:	ea1b 0f0c 	tst.w	fp, ip
 8006d32:	f040 80a8 	bne.w	8006e86 <_malloc_r+0x392>
 8006d36:	68b2      	ldr	r2, [r6, #8]
 8006d38:	4449      	add	r1, r9
 8006d3a:	f041 0101 	orr.w	r1, r1, #1
 8006d3e:	6051      	str	r1, [r2, #4]
 8006d40:	4a2d      	ldr	r2, [pc, #180]	; (8006df8 <_malloc_r+0x304>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6811      	ldr	r1, [r2, #0]
 8006d46:	428b      	cmp	r3, r1
 8006d48:	bf88      	it	hi
 8006d4a:	6013      	strhi	r3, [r2, #0]
 8006d4c:	4a2b      	ldr	r2, [pc, #172]	; (8006dfc <_malloc_r+0x308>)
 8006d4e:	6811      	ldr	r1, [r2, #0]
 8006d50:	428b      	cmp	r3, r1
 8006d52:	bf88      	it	hi
 8006d54:	6013      	strhi	r3, [r2, #0]
 8006d56:	e0d0      	b.n	8006efa <_malloc_r+0x406>
 8006d58:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8006d5c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8006d60:	d218      	bcs.n	8006d94 <_malloc_r+0x2a0>
 8006d62:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8006d66:	3238      	adds	r2, #56	; 0x38
 8006d68:	f102 0e01 	add.w	lr, r2, #1
 8006d6c:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8006d70:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8006d74:	45f0      	cmp	r8, lr
 8006d76:	d12b      	bne.n	8006dd0 <_malloc_r+0x2dc>
 8006d78:	1092      	asrs	r2, r2, #2
 8006d7a:	f04f 0c01 	mov.w	ip, #1
 8006d7e:	fa0c f202 	lsl.w	r2, ip, r2
 8006d82:	4310      	orrs	r0, r2
 8006d84:	6070      	str	r0, [r6, #4]
 8006d86:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006d8a:	f8c8 4008 	str.w	r4, [r8, #8]
 8006d8e:	f8ce 400c 	str.w	r4, [lr, #12]
 8006d92:	e762      	b.n	8006c5a <_malloc_r+0x166>
 8006d94:	2a14      	cmp	r2, #20
 8006d96:	d801      	bhi.n	8006d9c <_malloc_r+0x2a8>
 8006d98:	325b      	adds	r2, #91	; 0x5b
 8006d9a:	e7e5      	b.n	8006d68 <_malloc_r+0x274>
 8006d9c:	2a54      	cmp	r2, #84	; 0x54
 8006d9e:	d803      	bhi.n	8006da8 <_malloc_r+0x2b4>
 8006da0:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8006da4:	326e      	adds	r2, #110	; 0x6e
 8006da6:	e7df      	b.n	8006d68 <_malloc_r+0x274>
 8006da8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006dac:	d803      	bhi.n	8006db6 <_malloc_r+0x2c2>
 8006dae:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8006db2:	3277      	adds	r2, #119	; 0x77
 8006db4:	e7d8      	b.n	8006d68 <_malloc_r+0x274>
 8006db6:	f240 5e54 	movw	lr, #1364	; 0x554
 8006dba:	4572      	cmp	r2, lr
 8006dbc:	bf9a      	itte	ls
 8006dbe:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8006dc2:	327c      	addls	r2, #124	; 0x7c
 8006dc4:	227e      	movhi	r2, #126	; 0x7e
 8006dc6:	e7cf      	b.n	8006d68 <_malloc_r+0x274>
 8006dc8:	f8de e008 	ldr.w	lr, [lr, #8]
 8006dcc:	45f0      	cmp	r8, lr
 8006dce:	d005      	beq.n	8006ddc <_malloc_r+0x2e8>
 8006dd0:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006dd4:	f022 0203 	bic.w	r2, r2, #3
 8006dd8:	4562      	cmp	r2, ip
 8006dda:	d8f5      	bhi.n	8006dc8 <_malloc_r+0x2d4>
 8006ddc:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006de0:	e7d1      	b.n	8006d86 <_malloc_r+0x292>
 8006de2:	bf00      	nop
 8006de4:	2000049c 	.word	0x2000049c
 8006de8:	200004a4 	.word	0x200004a4
 8006dec:	20000ef8 	.word	0x20000ef8
 8006df0:	200008a4 	.word	0x200008a4
 8006df4:	20000ec8 	.word	0x20000ec8
 8006df8:	20000ef0 	.word	0x20000ef0
 8006dfc:	20000ef4 	.word	0x20000ef4
 8006e00:	6860      	ldr	r0, [r4, #4]
 8006e02:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006e06:	f020 0003 	bic.w	r0, r0, #3
 8006e0a:	eba0 0a07 	sub.w	sl, r0, r7
 8006e0e:	f1ba 0f0f 	cmp.w	sl, #15
 8006e12:	dd12      	ble.n	8006e3a <_malloc_r+0x346>
 8006e14:	68a3      	ldr	r3, [r4, #8]
 8006e16:	19e2      	adds	r2, r4, r7
 8006e18:	f047 0701 	orr.w	r7, r7, #1
 8006e1c:	6067      	str	r7, [r4, #4]
 8006e1e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006e22:	f8cc 3008 	str.w	r3, [ip, #8]
 8006e26:	f04a 0301 	orr.w	r3, sl, #1
 8006e2a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006e2e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006e32:	6053      	str	r3, [r2, #4]
 8006e34:	f844 a000 	str.w	sl, [r4, r0]
 8006e38:	e68d      	b.n	8006b56 <_malloc_r+0x62>
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	db11      	blt.n	8006e64 <_malloc_r+0x370>
 8006e40:	4420      	add	r0, r4
 8006e42:	6843      	ldr	r3, [r0, #4]
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	6043      	str	r3, [r0, #4]
 8006e4a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006e54:	f8cc 3008 	str.w	r3, [ip, #8]
 8006e58:	f000 f89c 	bl	8006f94 <__malloc_unlock>
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	b003      	add	sp, #12
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	4664      	mov	r4, ip
 8006e66:	e70e      	b.n	8006c86 <_malloc_r+0x192>
 8006e68:	f858 0908 	ldr.w	r0, [r8], #-8
 8006e6c:	4540      	cmp	r0, r8
 8006e6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e72:	f43f af12 	beq.w	8006c9a <_malloc_r+0x1a6>
 8006e76:	e717      	b.n	8006ca8 <_malloc_r+0x1b4>
 8006e78:	3304      	adds	r3, #4
 8006e7a:	0052      	lsls	r2, r2, #1
 8006e7c:	4210      	tst	r0, r2
 8006e7e:	d0fb      	beq.n	8006e78 <_malloc_r+0x384>
 8006e80:	e6fb      	b.n	8006c7a <_malloc_r+0x186>
 8006e82:	4673      	mov	r3, lr
 8006e84:	e7fa      	b.n	8006e7c <_malloc_r+0x388>
 8006e86:	6810      	ldr	r0, [r2, #0]
 8006e88:	3001      	adds	r0, #1
 8006e8a:	bf1b      	ittet	ne
 8006e8c:	eba4 0b0b 	subne.w	fp, r4, fp
 8006e90:	eb0b 020e 	addne.w	r2, fp, lr
 8006e94:	6014      	streq	r4, [r2, #0]
 8006e96:	601a      	strne	r2, [r3, #0]
 8006e98:	f014 0b07 	ands.w	fp, r4, #7
 8006e9c:	bf1a      	itte	ne
 8006e9e:	f1cb 0008 	rsbne	r0, fp, #8
 8006ea2:	1824      	addne	r4, r4, r0
 8006ea4:	4658      	moveq	r0, fp
 8006ea6:	1862      	adds	r2, r4, r1
 8006ea8:	ea02 010c 	and.w	r1, r2, ip
 8006eac:	4480      	add	r8, r0
 8006eae:	eba8 0801 	sub.w	r8, r8, r1
 8006eb2:	ea08 080c 	and.w	r8, r8, ip
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	4628      	mov	r0, r5
 8006eba:	9201      	str	r2, [sp, #4]
 8006ebc:	f000 fbde 	bl	800767c <_sbrk_r>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	9a01      	ldr	r2, [sp, #4]
 8006ec4:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <_malloc_r+0x474>)
 8006ec6:	d107      	bne.n	8006ed8 <_malloc_r+0x3e4>
 8006ec8:	f1bb 0f00 	cmp.w	fp, #0
 8006ecc:	d023      	beq.n	8006f16 <_malloc_r+0x422>
 8006ece:	f1ab 0008 	sub.w	r0, fp, #8
 8006ed2:	4410      	add	r0, r2
 8006ed4:	f04f 0800 	mov.w	r8, #0
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	60b4      	str	r4, [r6, #8]
 8006edc:	1b00      	subs	r0, r0, r4
 8006ede:	4440      	add	r0, r8
 8006ee0:	4442      	add	r2, r8
 8006ee2:	f040 0001 	orr.w	r0, r0, #1
 8006ee6:	45b2      	cmp	sl, r6
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	6060      	str	r0, [r4, #4]
 8006eec:	f43f af28 	beq.w	8006d40 <_malloc_r+0x24c>
 8006ef0:	f1b9 0f0f 	cmp.w	r9, #15
 8006ef4:	d812      	bhi.n	8006f1c <_malloc_r+0x428>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	6063      	str	r3, [r4, #4]
 8006efa:	68b3      	ldr	r3, [r6, #8]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	42bb      	cmp	r3, r7
 8006f04:	eba3 0207 	sub.w	r2, r3, r7
 8006f08:	d301      	bcc.n	8006f0e <_malloc_r+0x41a>
 8006f0a:	2a0f      	cmp	r2, #15
 8006f0c:	dc22      	bgt.n	8006f54 <_malloc_r+0x460>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 f840 	bl	8006f94 <__malloc_unlock>
 8006f14:	e5fa      	b.n	8006b0c <_malloc_r+0x18>
 8006f16:	4610      	mov	r0, r2
 8006f18:	46d8      	mov	r8, fp
 8006f1a:	e7dd      	b.n	8006ed8 <_malloc_r+0x3e4>
 8006f1c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006f20:	f1a9 090c 	sub.w	r9, r9, #12
 8006f24:	f029 0907 	bic.w	r9, r9, #7
 8006f28:	f002 0201 	and.w	r2, r2, #1
 8006f2c:	ea42 0209 	orr.w	r2, r2, r9
 8006f30:	f8ca 2004 	str.w	r2, [sl, #4]
 8006f34:	2105      	movs	r1, #5
 8006f36:	eb0a 0209 	add.w	r2, sl, r9
 8006f3a:	f1b9 0f0f 	cmp.w	r9, #15
 8006f3e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8006f42:	f67f aefd 	bls.w	8006d40 <_malloc_r+0x24c>
 8006f46:	f10a 0108 	add.w	r1, sl, #8
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f7ff fd0a 	bl	8006964 <_free_r>
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <_malloc_r+0x474>)
 8006f52:	e6f5      	b.n	8006d40 <_malloc_r+0x24c>
 8006f54:	68b4      	ldr	r4, [r6, #8]
 8006f56:	f047 0301 	orr.w	r3, r7, #1
 8006f5a:	4427      	add	r7, r4
 8006f5c:	f042 0201 	orr.w	r2, r2, #1
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	60b7      	str	r7, [r6, #8]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	e5f6      	b.n	8006b56 <_malloc_r+0x62>
 8006f68:	20000ec8 	.word	0x20000ec8

08006f6c <memcpy>:
 8006f6c:	440a      	add	r2, r1
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f74:	d100      	bne.n	8006f78 <memcpy+0xc>
 8006f76:	4770      	bx	lr
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f82:	4291      	cmp	r1, r2
 8006f84:	d1f9      	bne.n	8006f7a <memcpy+0xe>
 8006f86:	bd10      	pop	{r4, pc}

08006f88 <__malloc_lock>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__malloc_lock+0x8>)
 8006f8a:	f7ff bdb1 	b.w	8006af0 <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20000ec5 	.word	0x20000ec5

08006f94 <__malloc_unlock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_unlock+0x8>)
 8006f96:	f7ff bdac 	b.w	8006af2 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20000ec5 	.word	0x20000ec5

08006fa0 <_Balloc>:
 8006fa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	b17b      	cbz	r3, 8006fca <_Balloc+0x2a>
 8006faa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006fac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006fb0:	b9a0      	cbnz	r0, 8006fdc <_Balloc+0x3c>
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	fa01 f604 	lsl.w	r6, r1, r4
 8006fb8:	1d72      	adds	r2, r6, #5
 8006fba:	0092      	lsls	r2, r2, #2
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f000 fc69 	bl	8007894 <_calloc_r>
 8006fc2:	b148      	cbz	r0, 8006fd8 <_Balloc+0x38>
 8006fc4:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8006fc8:	e00b      	b.n	8006fe2 <_Balloc+0x42>
 8006fca:	2221      	movs	r2, #33	; 0x21
 8006fcc:	2104      	movs	r1, #4
 8006fce:	f000 fc61 	bl	8007894 <_calloc_r>
 8006fd2:	64e8      	str	r0, [r5, #76]	; 0x4c
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d1e8      	bne.n	8006faa <_Balloc+0xa>
 8006fd8:	2000      	movs	r0, #0
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	6802      	ldr	r2, [r0, #0]
 8006fde:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fe8:	e7f7      	b.n	8006fda <_Balloc+0x3a>

08006fea <_Bfree>:
 8006fea:	b131      	cbz	r1, 8006ffa <_Bfree+0x10>
 8006fec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006fee:	684a      	ldr	r2, [r1, #4]
 8006ff0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ff4:	6008      	str	r0, [r1, #0]
 8006ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006ffa:	4770      	bx	lr

08006ffc <__multadd>:
 8006ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	690d      	ldr	r5, [r1, #16]
 8007002:	4607      	mov	r7, r0
 8007004:	460c      	mov	r4, r1
 8007006:	461e      	mov	r6, r3
 8007008:	f101 0c14 	add.w	ip, r1, #20
 800700c:	2000      	movs	r0, #0
 800700e:	f8dc 3000 	ldr.w	r3, [ip]
 8007012:	b299      	uxth	r1, r3
 8007014:	fb02 6101 	mla	r1, r2, r1, r6
 8007018:	0c1e      	lsrs	r6, r3, #16
 800701a:	0c0b      	lsrs	r3, r1, #16
 800701c:	fb02 3306 	mla	r3, r2, r6, r3
 8007020:	b289      	uxth	r1, r1
 8007022:	3001      	adds	r0, #1
 8007024:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007028:	4285      	cmp	r5, r0
 800702a:	f84c 1b04 	str.w	r1, [ip], #4
 800702e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007032:	dcec      	bgt.n	800700e <__multadd+0x12>
 8007034:	b30e      	cbz	r6, 800707a <__multadd+0x7e>
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	42ab      	cmp	r3, r5
 800703a:	dc19      	bgt.n	8007070 <__multadd+0x74>
 800703c:	6861      	ldr	r1, [r4, #4]
 800703e:	4638      	mov	r0, r7
 8007040:	3101      	adds	r1, #1
 8007042:	f7ff ffad 	bl	8006fa0 <_Balloc>
 8007046:	4680      	mov	r8, r0
 8007048:	b928      	cbnz	r0, 8007056 <__multadd+0x5a>
 800704a:	4602      	mov	r2, r0
 800704c:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <__multadd+0x84>)
 800704e:	480d      	ldr	r0, [pc, #52]	; (8007084 <__multadd+0x88>)
 8007050:	21b5      	movs	r1, #181	; 0xb5
 8007052:	f000 fc01 	bl	8007858 <__assert_func>
 8007056:	6922      	ldr	r2, [r4, #16]
 8007058:	3202      	adds	r2, #2
 800705a:	f104 010c 	add.w	r1, r4, #12
 800705e:	0092      	lsls	r2, r2, #2
 8007060:	300c      	adds	r0, #12
 8007062:	f7ff ff83 	bl	8006f6c <memcpy>
 8007066:	4621      	mov	r1, r4
 8007068:	4638      	mov	r0, r7
 800706a:	f7ff ffbe 	bl	8006fea <_Bfree>
 800706e:	4644      	mov	r4, r8
 8007070:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007074:	3501      	adds	r5, #1
 8007076:	615e      	str	r6, [r3, #20]
 8007078:	6125      	str	r5, [r4, #16]
 800707a:	4620      	mov	r0, r4
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	08009dcd 	.word	0x08009dcd
 8007084:	08009e39 	.word	0x08009e39

08007088 <__hi0bits>:
 8007088:	0c03      	lsrs	r3, r0, #16
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	b9d3      	cbnz	r3, 80070c4 <__hi0bits+0x3c>
 800708e:	0400      	lsls	r0, r0, #16
 8007090:	2310      	movs	r3, #16
 8007092:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007096:	bf04      	itt	eq
 8007098:	0200      	lsleq	r0, r0, #8
 800709a:	3308      	addeq	r3, #8
 800709c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070a0:	bf04      	itt	eq
 80070a2:	0100      	lsleq	r0, r0, #4
 80070a4:	3304      	addeq	r3, #4
 80070a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070aa:	bf04      	itt	eq
 80070ac:	0080      	lsleq	r0, r0, #2
 80070ae:	3302      	addeq	r3, #2
 80070b0:	2800      	cmp	r0, #0
 80070b2:	db05      	blt.n	80070c0 <__hi0bits+0x38>
 80070b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070b8:	f103 0301 	add.w	r3, r3, #1
 80070bc:	bf08      	it	eq
 80070be:	2320      	moveq	r3, #32
 80070c0:	4618      	mov	r0, r3
 80070c2:	4770      	bx	lr
 80070c4:	2300      	movs	r3, #0
 80070c6:	e7e4      	b.n	8007092 <__hi0bits+0xa>

080070c8 <__lo0bits>:
 80070c8:	6803      	ldr	r3, [r0, #0]
 80070ca:	f013 0207 	ands.w	r2, r3, #7
 80070ce:	4601      	mov	r1, r0
 80070d0:	d00b      	beq.n	80070ea <__lo0bits+0x22>
 80070d2:	07da      	lsls	r2, r3, #31
 80070d4:	d423      	bmi.n	800711e <__lo0bits+0x56>
 80070d6:	0798      	lsls	r0, r3, #30
 80070d8:	bf49      	itett	mi
 80070da:	085b      	lsrmi	r3, r3, #1
 80070dc:	089b      	lsrpl	r3, r3, #2
 80070de:	2001      	movmi	r0, #1
 80070e0:	600b      	strmi	r3, [r1, #0]
 80070e2:	bf5c      	itt	pl
 80070e4:	600b      	strpl	r3, [r1, #0]
 80070e6:	2002      	movpl	r0, #2
 80070e8:	4770      	bx	lr
 80070ea:	b298      	uxth	r0, r3
 80070ec:	b9a8      	cbnz	r0, 800711a <__lo0bits+0x52>
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	2010      	movs	r0, #16
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	b90a      	cbnz	r2, 80070fa <__lo0bits+0x32>
 80070f6:	3008      	adds	r0, #8
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	071a      	lsls	r2, r3, #28
 80070fc:	bf04      	itt	eq
 80070fe:	091b      	lsreq	r3, r3, #4
 8007100:	3004      	addeq	r0, #4
 8007102:	079a      	lsls	r2, r3, #30
 8007104:	bf04      	itt	eq
 8007106:	089b      	lsreq	r3, r3, #2
 8007108:	3002      	addeq	r0, #2
 800710a:	07da      	lsls	r2, r3, #31
 800710c:	d403      	bmi.n	8007116 <__lo0bits+0x4e>
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	f100 0001 	add.w	r0, r0, #1
 8007114:	d005      	beq.n	8007122 <__lo0bits+0x5a>
 8007116:	600b      	str	r3, [r1, #0]
 8007118:	4770      	bx	lr
 800711a:	4610      	mov	r0, r2
 800711c:	e7e9      	b.n	80070f2 <__lo0bits+0x2a>
 800711e:	2000      	movs	r0, #0
 8007120:	4770      	bx	lr
 8007122:	2020      	movs	r0, #32
 8007124:	4770      	bx	lr
	...

08007128 <__i2b>:
 8007128:	b510      	push	{r4, lr}
 800712a:	460c      	mov	r4, r1
 800712c:	2101      	movs	r1, #1
 800712e:	f7ff ff37 	bl	8006fa0 <_Balloc>
 8007132:	4602      	mov	r2, r0
 8007134:	b928      	cbnz	r0, 8007142 <__i2b+0x1a>
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <__i2b+0x24>)
 8007138:	4805      	ldr	r0, [pc, #20]	; (8007150 <__i2b+0x28>)
 800713a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800713e:	f000 fb8b 	bl	8007858 <__assert_func>
 8007142:	2301      	movs	r3, #1
 8007144:	6144      	str	r4, [r0, #20]
 8007146:	6103      	str	r3, [r0, #16]
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	08009dcd 	.word	0x08009dcd
 8007150:	08009e39 	.word	0x08009e39

08007154 <__multiply>:
 8007154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	4691      	mov	r9, r2
 800715a:	690a      	ldr	r2, [r1, #16]
 800715c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007160:	429a      	cmp	r2, r3
 8007162:	bfb8      	it	lt
 8007164:	460b      	movlt	r3, r1
 8007166:	460c      	mov	r4, r1
 8007168:	bfbc      	itt	lt
 800716a:	464c      	movlt	r4, r9
 800716c:	4699      	movlt	r9, r3
 800716e:	6927      	ldr	r7, [r4, #16]
 8007170:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	6861      	ldr	r1, [r4, #4]
 8007178:	eb07 060a 	add.w	r6, r7, sl
 800717c:	42b3      	cmp	r3, r6
 800717e:	b085      	sub	sp, #20
 8007180:	bfb8      	it	lt
 8007182:	3101      	addlt	r1, #1
 8007184:	f7ff ff0c 	bl	8006fa0 <_Balloc>
 8007188:	b930      	cbnz	r0, 8007198 <__multiply+0x44>
 800718a:	4602      	mov	r2, r0
 800718c:	4b44      	ldr	r3, [pc, #272]	; (80072a0 <__multiply+0x14c>)
 800718e:	4845      	ldr	r0, [pc, #276]	; (80072a4 <__multiply+0x150>)
 8007190:	f240 115d 	movw	r1, #349	; 0x15d
 8007194:	f000 fb60 	bl	8007858 <__assert_func>
 8007198:	f100 0514 	add.w	r5, r0, #20
 800719c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071a0:	462b      	mov	r3, r5
 80071a2:	2200      	movs	r2, #0
 80071a4:	4543      	cmp	r3, r8
 80071a6:	d321      	bcc.n	80071ec <__multiply+0x98>
 80071a8:	f104 0314 	add.w	r3, r4, #20
 80071ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071b0:	f109 0314 	add.w	r3, r9, #20
 80071b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071b8:	9202      	str	r2, [sp, #8]
 80071ba:	1b3a      	subs	r2, r7, r4
 80071bc:	3a15      	subs	r2, #21
 80071be:	f022 0203 	bic.w	r2, r2, #3
 80071c2:	3204      	adds	r2, #4
 80071c4:	f104 0115 	add.w	r1, r4, #21
 80071c8:	428f      	cmp	r7, r1
 80071ca:	bf38      	it	cc
 80071cc:	2204      	movcc	r2, #4
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	9a02      	ldr	r2, [sp, #8]
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d80c      	bhi.n	80071f2 <__multiply+0x9e>
 80071d8:	2e00      	cmp	r6, #0
 80071da:	dd03      	ble.n	80071e4 <__multiply+0x90>
 80071dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d05a      	beq.n	800729a <__multiply+0x146>
 80071e4:	6106      	str	r6, [r0, #16]
 80071e6:	b005      	add	sp, #20
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	f843 2b04 	str.w	r2, [r3], #4
 80071f0:	e7d8      	b.n	80071a4 <__multiply+0x50>
 80071f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80071f6:	f1ba 0f00 	cmp.w	sl, #0
 80071fa:	d024      	beq.n	8007246 <__multiply+0xf2>
 80071fc:	f104 0e14 	add.w	lr, r4, #20
 8007200:	46a9      	mov	r9, r5
 8007202:	f04f 0c00 	mov.w	ip, #0
 8007206:	f85e 2b04 	ldr.w	r2, [lr], #4
 800720a:	f8d9 1000 	ldr.w	r1, [r9]
 800720e:	fa1f fb82 	uxth.w	fp, r2
 8007212:	b289      	uxth	r1, r1
 8007214:	fb0a 110b 	mla	r1, sl, fp, r1
 8007218:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800721c:	f8d9 2000 	ldr.w	r2, [r9]
 8007220:	4461      	add	r1, ip
 8007222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007226:	fb0a c20b 	mla	r2, sl, fp, ip
 800722a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800722e:	b289      	uxth	r1, r1
 8007230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007234:	4577      	cmp	r7, lr
 8007236:	f849 1b04 	str.w	r1, [r9], #4
 800723a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800723e:	d8e2      	bhi.n	8007206 <__multiply+0xb2>
 8007240:	9a01      	ldr	r2, [sp, #4]
 8007242:	f845 c002 	str.w	ip, [r5, r2]
 8007246:	9a03      	ldr	r2, [sp, #12]
 8007248:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800724c:	3304      	adds	r3, #4
 800724e:	f1b9 0f00 	cmp.w	r9, #0
 8007252:	d020      	beq.n	8007296 <__multiply+0x142>
 8007254:	6829      	ldr	r1, [r5, #0]
 8007256:	f104 0c14 	add.w	ip, r4, #20
 800725a:	46ae      	mov	lr, r5
 800725c:	f04f 0a00 	mov.w	sl, #0
 8007260:	f8bc b000 	ldrh.w	fp, [ip]
 8007264:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007268:	fb09 220b 	mla	r2, r9, fp, r2
 800726c:	4492      	add	sl, r2
 800726e:	b289      	uxth	r1, r1
 8007270:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007274:	f84e 1b04 	str.w	r1, [lr], #4
 8007278:	f85c 2b04 	ldr.w	r2, [ip], #4
 800727c:	f8be 1000 	ldrh.w	r1, [lr]
 8007280:	0c12      	lsrs	r2, r2, #16
 8007282:	fb09 1102 	mla	r1, r9, r2, r1
 8007286:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800728a:	4567      	cmp	r7, ip
 800728c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007290:	d8e6      	bhi.n	8007260 <__multiply+0x10c>
 8007292:	9a01      	ldr	r2, [sp, #4]
 8007294:	50a9      	str	r1, [r5, r2]
 8007296:	3504      	adds	r5, #4
 8007298:	e79a      	b.n	80071d0 <__multiply+0x7c>
 800729a:	3e01      	subs	r6, #1
 800729c:	e79c      	b.n	80071d8 <__multiply+0x84>
 800729e:	bf00      	nop
 80072a0:	08009dcd 	.word	0x08009dcd
 80072a4:	08009e39 	.word	0x08009e39

080072a8 <__pow5mult>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	4615      	mov	r5, r2
 80072ae:	f012 0203 	ands.w	r2, r2, #3
 80072b2:	4606      	mov	r6, r0
 80072b4:	460f      	mov	r7, r1
 80072b6:	d007      	beq.n	80072c8 <__pow5mult+0x20>
 80072b8:	4c1a      	ldr	r4, [pc, #104]	; (8007324 <__pow5mult+0x7c>)
 80072ba:	3a01      	subs	r2, #1
 80072bc:	2300      	movs	r3, #0
 80072be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072c2:	f7ff fe9b 	bl	8006ffc <__multadd>
 80072c6:	4607      	mov	r7, r0
 80072c8:	10ad      	asrs	r5, r5, #2
 80072ca:	d027      	beq.n	800731c <__pow5mult+0x74>
 80072cc:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80072ce:	b944      	cbnz	r4, 80072e2 <__pow5mult+0x3a>
 80072d0:	f240 2171 	movw	r1, #625	; 0x271
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff ff27 	bl	8007128 <__i2b>
 80072da:	2300      	movs	r3, #0
 80072dc:	64b0      	str	r0, [r6, #72]	; 0x48
 80072de:	4604      	mov	r4, r0
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	f04f 0900 	mov.w	r9, #0
 80072e6:	07eb      	lsls	r3, r5, #31
 80072e8:	d50a      	bpl.n	8007300 <__pow5mult+0x58>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4622      	mov	r2, r4
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff ff30 	bl	8007154 <__multiply>
 80072f4:	4639      	mov	r1, r7
 80072f6:	4680      	mov	r8, r0
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff fe76 	bl	8006fea <_Bfree>
 80072fe:	4647      	mov	r7, r8
 8007300:	106d      	asrs	r5, r5, #1
 8007302:	d00b      	beq.n	800731c <__pow5mult+0x74>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	b938      	cbnz	r0, 8007318 <__pow5mult+0x70>
 8007308:	4622      	mov	r2, r4
 800730a:	4621      	mov	r1, r4
 800730c:	4630      	mov	r0, r6
 800730e:	f7ff ff21 	bl	8007154 <__multiply>
 8007312:	6020      	str	r0, [r4, #0]
 8007314:	f8c0 9000 	str.w	r9, [r0]
 8007318:	4604      	mov	r4, r0
 800731a:	e7e4      	b.n	80072e6 <__pow5mult+0x3e>
 800731c:	4638      	mov	r0, r7
 800731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007322:	bf00      	nop
 8007324:	08009f88 	.word	0x08009f88

08007328 <__lshift>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	6849      	ldr	r1, [r1, #4]
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	4607      	mov	r7, r0
 800733a:	4691      	mov	r9, r2
 800733c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007340:	f108 0601 	add.w	r6, r8, #1
 8007344:	42b3      	cmp	r3, r6
 8007346:	db0b      	blt.n	8007360 <__lshift+0x38>
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff fe29 	bl	8006fa0 <_Balloc>
 800734e:	4605      	mov	r5, r0
 8007350:	b948      	cbnz	r0, 8007366 <__lshift+0x3e>
 8007352:	4602      	mov	r2, r0
 8007354:	4b2a      	ldr	r3, [pc, #168]	; (8007400 <__lshift+0xd8>)
 8007356:	482b      	ldr	r0, [pc, #172]	; (8007404 <__lshift+0xdc>)
 8007358:	f240 11d9 	movw	r1, #473	; 0x1d9
 800735c:	f000 fa7c 	bl	8007858 <__assert_func>
 8007360:	3101      	adds	r1, #1
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	e7ee      	b.n	8007344 <__lshift+0x1c>
 8007366:	2300      	movs	r3, #0
 8007368:	f100 0114 	add.w	r1, r0, #20
 800736c:	f100 0210 	add.w	r2, r0, #16
 8007370:	4618      	mov	r0, r3
 8007372:	4553      	cmp	r3, sl
 8007374:	db37      	blt.n	80073e6 <__lshift+0xbe>
 8007376:	6920      	ldr	r0, [r4, #16]
 8007378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800737c:	f104 0314 	add.w	r3, r4, #20
 8007380:	f019 091f 	ands.w	r9, r9, #31
 8007384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007388:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800738c:	d02f      	beq.n	80073ee <__lshift+0xc6>
 800738e:	f1c9 0e20 	rsb	lr, r9, #32
 8007392:	468a      	mov	sl, r1
 8007394:	f04f 0c00 	mov.w	ip, #0
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	fa02 f209 	lsl.w	r2, r2, r9
 800739e:	ea42 020c 	orr.w	r2, r2, ip
 80073a2:	f84a 2b04 	str.w	r2, [sl], #4
 80073a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073aa:	4298      	cmp	r0, r3
 80073ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073b0:	d8f2      	bhi.n	8007398 <__lshift+0x70>
 80073b2:	1b03      	subs	r3, r0, r4
 80073b4:	3b15      	subs	r3, #21
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	3304      	adds	r3, #4
 80073bc:	f104 0215 	add.w	r2, r4, #21
 80073c0:	4290      	cmp	r0, r2
 80073c2:	bf38      	it	cc
 80073c4:	2304      	movcc	r3, #4
 80073c6:	f841 c003 	str.w	ip, [r1, r3]
 80073ca:	f1bc 0f00 	cmp.w	ip, #0
 80073ce:	d001      	beq.n	80073d4 <__lshift+0xac>
 80073d0:	f108 0602 	add.w	r6, r8, #2
 80073d4:	3e01      	subs	r6, #1
 80073d6:	4638      	mov	r0, r7
 80073d8:	612e      	str	r6, [r5, #16]
 80073da:	4621      	mov	r1, r4
 80073dc:	f7ff fe05 	bl	8006fea <_Bfree>
 80073e0:	4628      	mov	r0, r5
 80073e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ea:	3301      	adds	r3, #1
 80073ec:	e7c1      	b.n	8007372 <__lshift+0x4a>
 80073ee:	3904      	subs	r1, #4
 80073f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80073f8:	4298      	cmp	r0, r3
 80073fa:	d8f9      	bhi.n	80073f0 <__lshift+0xc8>
 80073fc:	e7ea      	b.n	80073d4 <__lshift+0xac>
 80073fe:	bf00      	nop
 8007400:	08009dcd 	.word	0x08009dcd
 8007404:	08009e39 	.word	0x08009e39

08007408 <__mcmp>:
 8007408:	b530      	push	{r4, r5, lr}
 800740a:	6902      	ldr	r2, [r0, #16]
 800740c:	690c      	ldr	r4, [r1, #16]
 800740e:	1b12      	subs	r2, r2, r4
 8007410:	d10e      	bne.n	8007430 <__mcmp+0x28>
 8007412:	f100 0314 	add.w	r3, r0, #20
 8007416:	3114      	adds	r1, #20
 8007418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800741c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007428:	42a5      	cmp	r5, r4
 800742a:	d003      	beq.n	8007434 <__mcmp+0x2c>
 800742c:	d305      	bcc.n	800743a <__mcmp+0x32>
 800742e:	2201      	movs	r2, #1
 8007430:	4610      	mov	r0, r2
 8007432:	bd30      	pop	{r4, r5, pc}
 8007434:	4283      	cmp	r3, r0
 8007436:	d3f3      	bcc.n	8007420 <__mcmp+0x18>
 8007438:	e7fa      	b.n	8007430 <__mcmp+0x28>
 800743a:	f04f 32ff 	mov.w	r2, #4294967295
 800743e:	e7f7      	b.n	8007430 <__mcmp+0x28>

08007440 <__mdiff>:
 8007440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	460c      	mov	r4, r1
 8007446:	4606      	mov	r6, r0
 8007448:	4611      	mov	r1, r2
 800744a:	4620      	mov	r0, r4
 800744c:	4690      	mov	r8, r2
 800744e:	f7ff ffdb 	bl	8007408 <__mcmp>
 8007452:	1e05      	subs	r5, r0, #0
 8007454:	d110      	bne.n	8007478 <__mdiff+0x38>
 8007456:	4629      	mov	r1, r5
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff fda1 	bl	8006fa0 <_Balloc>
 800745e:	b930      	cbnz	r0, 800746e <__mdiff+0x2e>
 8007460:	4b3a      	ldr	r3, [pc, #232]	; (800754c <__mdiff+0x10c>)
 8007462:	4602      	mov	r2, r0
 8007464:	f240 2132 	movw	r1, #562	; 0x232
 8007468:	4839      	ldr	r0, [pc, #228]	; (8007550 <__mdiff+0x110>)
 800746a:	f000 f9f5 	bl	8007858 <__assert_func>
 800746e:	2301      	movs	r3, #1
 8007470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	bfa4      	itt	ge
 800747a:	4643      	movge	r3, r8
 800747c:	46a0      	movge	r8, r4
 800747e:	4630      	mov	r0, r6
 8007480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007484:	bfa6      	itte	ge
 8007486:	461c      	movge	r4, r3
 8007488:	2500      	movge	r5, #0
 800748a:	2501      	movlt	r5, #1
 800748c:	f7ff fd88 	bl	8006fa0 <_Balloc>
 8007490:	b920      	cbnz	r0, 800749c <__mdiff+0x5c>
 8007492:	4b2e      	ldr	r3, [pc, #184]	; (800754c <__mdiff+0x10c>)
 8007494:	4602      	mov	r2, r0
 8007496:	f44f 7110 	mov.w	r1, #576	; 0x240
 800749a:	e7e5      	b.n	8007468 <__mdiff+0x28>
 800749c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074a0:	6926      	ldr	r6, [r4, #16]
 80074a2:	60c5      	str	r5, [r0, #12]
 80074a4:	f104 0914 	add.w	r9, r4, #20
 80074a8:	f108 0514 	add.w	r5, r8, #20
 80074ac:	f100 0e14 	add.w	lr, r0, #20
 80074b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074b8:	f108 0210 	add.w	r2, r8, #16
 80074bc:	46f2      	mov	sl, lr
 80074be:	2100      	movs	r1, #0
 80074c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80074c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074c8:	fa1f f883 	uxth.w	r8, r3
 80074cc:	fa11 f18b 	uxtah	r1, r1, fp
 80074d0:	0c1b      	lsrs	r3, r3, #16
 80074d2:	eba1 0808 	sub.w	r8, r1, r8
 80074d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074de:	fa1f f888 	uxth.w	r8, r8
 80074e2:	1419      	asrs	r1, r3, #16
 80074e4:	454e      	cmp	r6, r9
 80074e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074ea:	f84a 3b04 	str.w	r3, [sl], #4
 80074ee:	d8e7      	bhi.n	80074c0 <__mdiff+0x80>
 80074f0:	1b33      	subs	r3, r6, r4
 80074f2:	3b15      	subs	r3, #21
 80074f4:	f023 0303 	bic.w	r3, r3, #3
 80074f8:	3304      	adds	r3, #4
 80074fa:	3415      	adds	r4, #21
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	bf38      	it	cc
 8007500:	2304      	movcc	r3, #4
 8007502:	441d      	add	r5, r3
 8007504:	4473      	add	r3, lr
 8007506:	469e      	mov	lr, r3
 8007508:	462e      	mov	r6, r5
 800750a:	4566      	cmp	r6, ip
 800750c:	d30e      	bcc.n	800752c <__mdiff+0xec>
 800750e:	f10c 0203 	add.w	r2, ip, #3
 8007512:	1b52      	subs	r2, r2, r5
 8007514:	f022 0203 	bic.w	r2, r2, #3
 8007518:	3d03      	subs	r5, #3
 800751a:	45ac      	cmp	ip, r5
 800751c:	bf38      	it	cc
 800751e:	2200      	movcc	r2, #0
 8007520:	441a      	add	r2, r3
 8007522:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007526:	b17b      	cbz	r3, 8007548 <__mdiff+0x108>
 8007528:	6107      	str	r7, [r0, #16]
 800752a:	e7a3      	b.n	8007474 <__mdiff+0x34>
 800752c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007530:	fa11 f288 	uxtah	r2, r1, r8
 8007534:	1414      	asrs	r4, r2, #16
 8007536:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800753a:	b292      	uxth	r2, r2
 800753c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007540:	f84e 2b04 	str.w	r2, [lr], #4
 8007544:	1421      	asrs	r1, r4, #16
 8007546:	e7e0      	b.n	800750a <__mdiff+0xca>
 8007548:	3f01      	subs	r7, #1
 800754a:	e7ea      	b.n	8007522 <__mdiff+0xe2>
 800754c:	08009dcd 	.word	0x08009dcd
 8007550:	08009e39 	.word	0x08009e39

08007554 <__d2b>:
 8007554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4689      	mov	r9, r1
 800755a:	2101      	movs	r1, #1
 800755c:	ec57 6b10 	vmov	r6, r7, d0
 8007560:	4690      	mov	r8, r2
 8007562:	f7ff fd1d 	bl	8006fa0 <_Balloc>
 8007566:	4604      	mov	r4, r0
 8007568:	b930      	cbnz	r0, 8007578 <__d2b+0x24>
 800756a:	4602      	mov	r2, r0
 800756c:	4b25      	ldr	r3, [pc, #148]	; (8007604 <__d2b+0xb0>)
 800756e:	4826      	ldr	r0, [pc, #152]	; (8007608 <__d2b+0xb4>)
 8007570:	f240 310a 	movw	r1, #778	; 0x30a
 8007574:	f000 f970 	bl	8007858 <__assert_func>
 8007578:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800757c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007580:	bb35      	cbnz	r5, 80075d0 <__d2b+0x7c>
 8007582:	2e00      	cmp	r6, #0
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	d028      	beq.n	80075da <__d2b+0x86>
 8007588:	4668      	mov	r0, sp
 800758a:	9600      	str	r6, [sp, #0]
 800758c:	f7ff fd9c 	bl	80070c8 <__lo0bits>
 8007590:	9900      	ldr	r1, [sp, #0]
 8007592:	b300      	cbz	r0, 80075d6 <__d2b+0x82>
 8007594:	9a01      	ldr	r2, [sp, #4]
 8007596:	f1c0 0320 	rsb	r3, r0, #32
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	430b      	orrs	r3, r1
 80075a0:	40c2      	lsrs	r2, r0
 80075a2:	6163      	str	r3, [r4, #20]
 80075a4:	9201      	str	r2, [sp, #4]
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	61a3      	str	r3, [r4, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bf14      	ite	ne
 80075ae:	2202      	movne	r2, #2
 80075b0:	2201      	moveq	r2, #1
 80075b2:	6122      	str	r2, [r4, #16]
 80075b4:	b1d5      	cbz	r5, 80075ec <__d2b+0x98>
 80075b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075ba:	4405      	add	r5, r0
 80075bc:	f8c9 5000 	str.w	r5, [r9]
 80075c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075c4:	f8c8 0000 	str.w	r0, [r8]
 80075c8:	4620      	mov	r0, r4
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075d4:	e7d5      	b.n	8007582 <__d2b+0x2e>
 80075d6:	6161      	str	r1, [r4, #20]
 80075d8:	e7e5      	b.n	80075a6 <__d2b+0x52>
 80075da:	a801      	add	r0, sp, #4
 80075dc:	f7ff fd74 	bl	80070c8 <__lo0bits>
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	6163      	str	r3, [r4, #20]
 80075e4:	2201      	movs	r2, #1
 80075e6:	6122      	str	r2, [r4, #16]
 80075e8:	3020      	adds	r0, #32
 80075ea:	e7e3      	b.n	80075b4 <__d2b+0x60>
 80075ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075f4:	f8c9 0000 	str.w	r0, [r9]
 80075f8:	6918      	ldr	r0, [r3, #16]
 80075fa:	f7ff fd45 	bl	8007088 <__hi0bits>
 80075fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007602:	e7df      	b.n	80075c4 <__d2b+0x70>
 8007604:	08009dcd 	.word	0x08009dcd
 8007608:	08009e39 	.word	0x08009e39

0800760c <frexp>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	2100      	movs	r1, #0
 8007610:	ec55 4b10 	vmov	r4, r5, d0
 8007614:	6001      	str	r1, [r0, #0]
 8007616:	4916      	ldr	r1, [pc, #88]	; (8007670 <frexp+0x64>)
 8007618:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800761c:	428a      	cmp	r2, r1
 800761e:	4606      	mov	r6, r0
 8007620:	462b      	mov	r3, r5
 8007622:	dc22      	bgt.n	800766a <frexp+0x5e>
 8007624:	ee10 1a10 	vmov	r1, s0
 8007628:	4311      	orrs	r1, r2
 800762a:	d01e      	beq.n	800766a <frexp+0x5e>
 800762c:	4911      	ldr	r1, [pc, #68]	; (8007674 <frexp+0x68>)
 800762e:	4029      	ands	r1, r5
 8007630:	b969      	cbnz	r1, 800764e <frexp+0x42>
 8007632:	4b11      	ldr	r3, [pc, #68]	; (8007678 <frexp+0x6c>)
 8007634:	2200      	movs	r2, #0
 8007636:	ee10 0a10 	vmov	r0, s0
 800763a:	4629      	mov	r1, r5
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	460b      	mov	r3, r1
 8007642:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007646:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800764a:	4604      	mov	r4, r0
 800764c:	6031      	str	r1, [r6, #0]
 800764e:	6831      	ldr	r1, [r6, #0]
 8007650:	1512      	asrs	r2, r2, #20
 8007652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007656:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800765a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800765e:	440a      	add	r2, r1
 8007660:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8007664:	6032      	str	r2, [r6, #0]
 8007666:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800766a:	ec45 4b10 	vmov	d0, r4, r5
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	7fefffff 	.word	0x7fefffff
 8007674:	7ff00000 	.word	0x7ff00000
 8007678:	43500000 	.word	0x43500000

0800767c <_sbrk_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d06      	ldr	r5, [pc, #24]	; (8007698 <_sbrk_r+0x1c>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7fa fb24 	bl	8001cd4 <_sbrk>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_sbrk_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_sbrk_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	20000efc 	.word	0x20000efc

0800769c <strncpy>:
 800769c:	b510      	push	{r4, lr}
 800769e:	3901      	subs	r1, #1
 80076a0:	4603      	mov	r3, r0
 80076a2:	b132      	cbz	r2, 80076b2 <strncpy+0x16>
 80076a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076a8:	f803 4b01 	strb.w	r4, [r3], #1
 80076ac:	3a01      	subs	r2, #1
 80076ae:	2c00      	cmp	r4, #0
 80076b0:	d1f7      	bne.n	80076a2 <strncpy+0x6>
 80076b2:	441a      	add	r2, r3
 80076b4:	2100      	movs	r1, #0
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d100      	bne.n	80076bc <strncpy+0x20>
 80076ba:	bd10      	pop	{r4, pc}
 80076bc:	f803 1b01 	strb.w	r1, [r3], #1
 80076c0:	e7f9      	b.n	80076b6 <strncpy+0x1a>

080076c2 <__ssprint_r>:
 80076c2:	6893      	ldr	r3, [r2, #8]
 80076c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c8:	4680      	mov	r8, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	4617      	mov	r7, r2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d061      	beq.n	8007796 <__ssprint_r+0xd4>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8d2 a000 	ldr.w	sl, [r2]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	469b      	mov	fp, r3
 80076dc:	f1bb 0f00 	cmp.w	fp, #0
 80076e0:	d02b      	beq.n	800773a <__ssprint_r+0x78>
 80076e2:	68a6      	ldr	r6, [r4, #8]
 80076e4:	455e      	cmp	r6, fp
 80076e6:	d844      	bhi.n	8007772 <__ssprint_r+0xb0>
 80076e8:	89a2      	ldrh	r2, [r4, #12]
 80076ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076ee:	d03e      	beq.n	800776e <__ssprint_r+0xac>
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	6921      	ldr	r1, [r4, #16]
 80076f4:	6965      	ldr	r5, [r4, #20]
 80076f6:	eba0 0901 	sub.w	r9, r0, r1
 80076fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007702:	f109 0001 	add.w	r0, r9, #1
 8007706:	106d      	asrs	r5, r5, #1
 8007708:	4458      	add	r0, fp
 800770a:	4285      	cmp	r5, r0
 800770c:	bf38      	it	cc
 800770e:	4605      	movcc	r5, r0
 8007710:	0553      	lsls	r3, r2, #21
 8007712:	d545      	bpl.n	80077a0 <__ssprint_r+0xde>
 8007714:	4629      	mov	r1, r5
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff f9ec 	bl	8006af4 <_malloc_r>
 800771c:	4606      	mov	r6, r0
 800771e:	b9a0      	cbnz	r0, 800774a <__ssprint_r+0x88>
 8007720:	230c      	movs	r3, #12
 8007722:	f8c8 3000 	str.w	r3, [r8]
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	2300      	movs	r3, #0
 8007730:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	e02f      	b.n	800779a <__ssprint_r+0xd8>
 800773a:	f8da 3000 	ldr.w	r3, [sl]
 800773e:	f8da b004 	ldr.w	fp, [sl, #4]
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	f10a 0a08 	add.w	sl, sl, #8
 8007748:	e7c8      	b.n	80076dc <__ssprint_r+0x1a>
 800774a:	464a      	mov	r2, r9
 800774c:	6921      	ldr	r1, [r4, #16]
 800774e:	f7ff fc0d 	bl	8006f6c <memcpy>
 8007752:	89a2      	ldrh	r2, [r4, #12]
 8007754:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800775c:	81a2      	strh	r2, [r4, #12]
 800775e:	6126      	str	r6, [r4, #16]
 8007760:	6165      	str	r5, [r4, #20]
 8007762:	444e      	add	r6, r9
 8007764:	eba5 0509 	sub.w	r5, r5, r9
 8007768:	6026      	str	r6, [r4, #0]
 800776a:	60a5      	str	r5, [r4, #8]
 800776c:	465e      	mov	r6, fp
 800776e:	455e      	cmp	r6, fp
 8007770:	d900      	bls.n	8007774 <__ssprint_r+0xb2>
 8007772:	465e      	mov	r6, fp
 8007774:	4632      	mov	r2, r6
 8007776:	9901      	ldr	r1, [sp, #4]
 8007778:	6820      	ldr	r0, [r4, #0]
 800777a:	f000 f8eb 	bl	8007954 <memmove>
 800777e:	68a2      	ldr	r2, [r4, #8]
 8007780:	1b92      	subs	r2, r2, r6
 8007782:	60a2      	str	r2, [r4, #8]
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	4432      	add	r2, r6
 8007788:	6022      	str	r2, [r4, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	eba2 030b 	sub.w	r3, r2, fp
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1d1      	bne.n	800773a <__ssprint_r+0x78>
 8007796:	2000      	movs	r0, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	b003      	add	sp, #12
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	462a      	mov	r2, r5
 80077a2:	4640      	mov	r0, r8
 80077a4:	f000 f8f0 	bl	8007988 <_realloc_r>
 80077a8:	4606      	mov	r6, r0
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1d7      	bne.n	800775e <__ssprint_r+0x9c>
 80077ae:	6921      	ldr	r1, [r4, #16]
 80077b0:	4640      	mov	r0, r8
 80077b2:	f7ff f8d7 	bl	8006964 <_free_r>
 80077b6:	e7b3      	b.n	8007720 <__ssprint_r+0x5e>

080077b8 <sysconf>:
 80077b8:	2808      	cmp	r0, #8
 80077ba:	b508      	push	{r3, lr}
 80077bc:	d006      	beq.n	80077cc <sysconf+0x14>
 80077be:	f7fc ffc1 	bl	8004744 <__errno>
 80077c2:	2316      	movs	r3, #22
 80077c4:	6003      	str	r3, [r0, #0]
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ca:	bd08      	pop	{r3, pc}
 80077cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80077d0:	e7fb      	b.n	80077ca <sysconf+0x12>
	...

080077d4 <__register_exitproc>:
 80077d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	f8df a078 	ldr.w	sl, [pc, #120]	; 8007854 <__register_exitproc+0x80>
 80077dc:	4606      	mov	r6, r0
 80077de:	f8da 0000 	ldr.w	r0, [sl]
 80077e2:	4698      	mov	r8, r3
 80077e4:	460f      	mov	r7, r1
 80077e6:	4691      	mov	r9, r2
 80077e8:	f7ff f982 	bl	8006af0 <__retarget_lock_acquire_recursive>
 80077ec:	4b18      	ldr	r3, [pc, #96]	; (8007850 <__register_exitproc+0x7c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80077f4:	b91c      	cbnz	r4, 80077fe <__register_exitproc+0x2a>
 80077f6:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80077fa:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80077fe:	6865      	ldr	r5, [r4, #4]
 8007800:	f8da 0000 	ldr.w	r0, [sl]
 8007804:	2d1f      	cmp	r5, #31
 8007806:	dd05      	ble.n	8007814 <__register_exitproc+0x40>
 8007808:	f7ff f973 	bl	8006af2 <__retarget_lock_release_recursive>
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007814:	b19e      	cbz	r6, 800783e <__register_exitproc+0x6a>
 8007816:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800781a:	2201      	movs	r2, #1
 800781c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8007820:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8007824:	40aa      	lsls	r2, r5
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800782c:	2e02      	cmp	r6, #2
 800782e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8007832:	bf02      	ittt	eq
 8007834:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8007838:	4313      	orreq	r3, r2
 800783a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800783e:	1c6b      	adds	r3, r5, #1
 8007840:	3502      	adds	r5, #2
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8007848:	f7ff f953 	bl	8006af2 <__retarget_lock_release_recursive>
 800784c:	2000      	movs	r0, #0
 800784e:	e7df      	b.n	8007810 <__register_exitproc+0x3c>
 8007850:	08009d68 	.word	0x08009d68
 8007854:	20000498 	.word	0x20000498

08007858 <__assert_func>:
 8007858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800785a:	4614      	mov	r4, r2
 800785c:	461a      	mov	r2, r3
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <__assert_func+0x2c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4605      	mov	r5, r0
 8007864:	68d8      	ldr	r0, [r3, #12]
 8007866:	b14c      	cbz	r4, 800787c <__assert_func+0x24>
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <__assert_func+0x30>)
 800786a:	9100      	str	r1, [sp, #0]
 800786c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007870:	4906      	ldr	r1, [pc, #24]	; (800788c <__assert_func+0x34>)
 8007872:	462b      	mov	r3, r5
 8007874:	f000 f844 	bl	8007900 <fiprintf>
 8007878:	f000 ff98 	bl	80087ac <abort>
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <__assert_func+0x38>)
 800787e:	461c      	mov	r4, r3
 8007880:	e7f3      	b.n	800786a <__assert_func+0x12>
 8007882:	bf00      	nop
 8007884:	2000006c 	.word	0x2000006c
 8007888:	08009f94 	.word	0x08009f94
 800788c:	08009fa1 	.word	0x08009fa1
 8007890:	08009fcf 	.word	0x08009fcf

08007894 <_calloc_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	fba1 1502 	umull	r1, r5, r1, r2
 800789a:	b92d      	cbnz	r5, 80078a8 <_calloc_r+0x14>
 800789c:	f7ff f92a 	bl	8006af4 <_malloc_r>
 80078a0:	4604      	mov	r4, r0
 80078a2:	b938      	cbnz	r0, 80078b4 <_calloc_r+0x20>
 80078a4:	4620      	mov	r0, r4
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	f7fc ff4c 	bl	8004744 <__errno>
 80078ac:	230c      	movs	r3, #12
 80078ae:	6003      	str	r3, [r0, #0]
 80078b0:	2400      	movs	r4, #0
 80078b2:	e7f7      	b.n	80078a4 <_calloc_r+0x10>
 80078b4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80078b8:	f022 0203 	bic.w	r2, r2, #3
 80078bc:	3a04      	subs	r2, #4
 80078be:	2a24      	cmp	r2, #36	; 0x24
 80078c0:	d819      	bhi.n	80078f6 <_calloc_r+0x62>
 80078c2:	2a13      	cmp	r2, #19
 80078c4:	d915      	bls.n	80078f2 <_calloc_r+0x5e>
 80078c6:	2a1b      	cmp	r2, #27
 80078c8:	e9c0 5500 	strd	r5, r5, [r0]
 80078cc:	d806      	bhi.n	80078dc <_calloc_r+0x48>
 80078ce:	f100 0308 	add.w	r3, r0, #8
 80078d2:	2200      	movs	r2, #0
 80078d4:	e9c3 2200 	strd	r2, r2, [r3]
 80078d8:	609a      	str	r2, [r3, #8]
 80078da:	e7e3      	b.n	80078a4 <_calloc_r+0x10>
 80078dc:	2a24      	cmp	r2, #36	; 0x24
 80078de:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80078e2:	bf11      	iteee	ne
 80078e4:	f100 0310 	addne.w	r3, r0, #16
 80078e8:	6105      	streq	r5, [r0, #16]
 80078ea:	f100 0318 	addeq.w	r3, r0, #24
 80078ee:	6145      	streq	r5, [r0, #20]
 80078f0:	e7ef      	b.n	80078d2 <_calloc_r+0x3e>
 80078f2:	4603      	mov	r3, r0
 80078f4:	e7ed      	b.n	80078d2 <_calloc_r+0x3e>
 80078f6:	4629      	mov	r1, r5
 80078f8:	f7fc ff4e 	bl	8004798 <memset>
 80078fc:	e7d2      	b.n	80078a4 <_calloc_r+0x10>
	...

08007900 <fiprintf>:
 8007900:	b40e      	push	{r1, r2, r3}
 8007902:	b503      	push	{r0, r1, lr}
 8007904:	4601      	mov	r1, r0
 8007906:	ab03      	add	r3, sp, #12
 8007908:	4805      	ldr	r0, [pc, #20]	; (8007920 <fiprintf+0x20>)
 800790a:	f853 2b04 	ldr.w	r2, [r3], #4
 800790e:	6800      	ldr	r0, [r0, #0]
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	f000 fa0f 	bl	8007d34 <_vfiprintf_r>
 8007916:	b002      	add	sp, #8
 8007918:	f85d eb04 	ldr.w	lr, [sp], #4
 800791c:	b003      	add	sp, #12
 800791e:	4770      	bx	lr
 8007920:	2000006c 	.word	0x2000006c

08007924 <__locale_mb_cur_max>:
 8007924:	4b01      	ldr	r3, [pc, #4]	; (800792c <__locale_mb_cur_max+0x8>)
 8007926:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800792a:	4770      	bx	lr
 800792c:	200008ac 	.word	0x200008ac

08007930 <__ascii_mbtowc>:
 8007930:	b082      	sub	sp, #8
 8007932:	b901      	cbnz	r1, 8007936 <__ascii_mbtowc+0x6>
 8007934:	a901      	add	r1, sp, #4
 8007936:	b142      	cbz	r2, 800794a <__ascii_mbtowc+0x1a>
 8007938:	b14b      	cbz	r3, 800794e <__ascii_mbtowc+0x1e>
 800793a:	7813      	ldrb	r3, [r2, #0]
 800793c:	600b      	str	r3, [r1, #0]
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	1e10      	subs	r0, r2, #0
 8007942:	bf18      	it	ne
 8007944:	2001      	movne	r0, #1
 8007946:	b002      	add	sp, #8
 8007948:	4770      	bx	lr
 800794a:	4610      	mov	r0, r2
 800794c:	e7fb      	b.n	8007946 <__ascii_mbtowc+0x16>
 800794e:	f06f 0001 	mvn.w	r0, #1
 8007952:	e7f8      	b.n	8007946 <__ascii_mbtowc+0x16>

08007954 <memmove>:
 8007954:	4288      	cmp	r0, r1
 8007956:	b510      	push	{r4, lr}
 8007958:	eb01 0402 	add.w	r4, r1, r2
 800795c:	d902      	bls.n	8007964 <memmove+0x10>
 800795e:	4284      	cmp	r4, r0
 8007960:	4623      	mov	r3, r4
 8007962:	d807      	bhi.n	8007974 <memmove+0x20>
 8007964:	1e43      	subs	r3, r0, #1
 8007966:	42a1      	cmp	r1, r4
 8007968:	d008      	beq.n	800797c <memmove+0x28>
 800796a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800796e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007972:	e7f8      	b.n	8007966 <memmove+0x12>
 8007974:	4402      	add	r2, r0
 8007976:	4601      	mov	r1, r0
 8007978:	428a      	cmp	r2, r1
 800797a:	d100      	bne.n	800797e <memmove+0x2a>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007986:	e7f7      	b.n	8007978 <memmove+0x24>

08007988 <_realloc_r>:
 8007988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	4681      	mov	r9, r0
 800798e:	460c      	mov	r4, r1
 8007990:	b929      	cbnz	r1, 800799e <_realloc_r+0x16>
 8007992:	4611      	mov	r1, r2
 8007994:	b003      	add	sp, #12
 8007996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	f7ff b8ab 	b.w	8006af4 <_malloc_r>
 800799e:	9201      	str	r2, [sp, #4]
 80079a0:	f7ff faf2 	bl	8006f88 <__malloc_lock>
 80079a4:	9a01      	ldr	r2, [sp, #4]
 80079a6:	f102 080b 	add.w	r8, r2, #11
 80079aa:	f1b8 0f16 	cmp.w	r8, #22
 80079ae:	d90b      	bls.n	80079c8 <_realloc_r+0x40>
 80079b0:	f038 0807 	bics.w	r8, r8, #7
 80079b4:	d50a      	bpl.n	80079cc <_realloc_r+0x44>
 80079b6:	230c      	movs	r3, #12
 80079b8:	f8c9 3000 	str.w	r3, [r9]
 80079bc:	f04f 0b00 	mov.w	fp, #0
 80079c0:	4658      	mov	r0, fp
 80079c2:	b003      	add	sp, #12
 80079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c8:	f04f 0810 	mov.w	r8, #16
 80079cc:	4590      	cmp	r8, r2
 80079ce:	d3f2      	bcc.n	80079b6 <_realloc_r+0x2e>
 80079d0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80079d4:	f025 0603 	bic.w	r6, r5, #3
 80079d8:	45b0      	cmp	r8, r6
 80079da:	f1a4 0a08 	sub.w	sl, r4, #8
 80079de:	f340 816e 	ble.w	8007cbe <_realloc_r+0x336>
 80079e2:	499b      	ldr	r1, [pc, #620]	; (8007c50 <_realloc_r+0x2c8>)
 80079e4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80079e8:	eb0a 0306 	add.w	r3, sl, r6
 80079ec:	459c      	cmp	ip, r3
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	d005      	beq.n	80079fe <_realloc_r+0x76>
 80079f2:	f021 0001 	bic.w	r0, r1, #1
 80079f6:	4418      	add	r0, r3
 80079f8:	6840      	ldr	r0, [r0, #4]
 80079fa:	07c7      	lsls	r7, r0, #31
 80079fc:	d427      	bmi.n	8007a4e <_realloc_r+0xc6>
 80079fe:	f021 0103 	bic.w	r1, r1, #3
 8007a02:	459c      	cmp	ip, r3
 8007a04:	eb06 0701 	add.w	r7, r6, r1
 8007a08:	d119      	bne.n	8007a3e <_realloc_r+0xb6>
 8007a0a:	f108 0010 	add.w	r0, r8, #16
 8007a0e:	42b8      	cmp	r0, r7
 8007a10:	dc1f      	bgt.n	8007a52 <_realloc_r+0xca>
 8007a12:	eb0a 0308 	add.w	r3, sl, r8
 8007a16:	4a8e      	ldr	r2, [pc, #568]	; (8007c50 <_realloc_r+0x2c8>)
 8007a18:	eba7 0708 	sub.w	r7, r7, r8
 8007a1c:	f047 0701 	orr.w	r7, r7, #1
 8007a20:	6093      	str	r3, [r2, #8]
 8007a22:	605f      	str	r7, [r3, #4]
 8007a24:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	ea43 0308 	orr.w	r3, r3, r8
 8007a30:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a34:	4648      	mov	r0, r9
 8007a36:	f7ff faad 	bl	8006f94 <__malloc_unlock>
 8007a3a:	46a3      	mov	fp, r4
 8007a3c:	e7c0      	b.n	80079c0 <_realloc_r+0x38>
 8007a3e:	45b8      	cmp	r8, r7
 8007a40:	dc07      	bgt.n	8007a52 <_realloc_r+0xca>
 8007a42:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007a46:	60da      	str	r2, [r3, #12]
 8007a48:	6093      	str	r3, [r2, #8]
 8007a4a:	4655      	mov	r5, sl
 8007a4c:	e07f      	b.n	8007b4e <_realloc_r+0x1c6>
 8007a4e:	2100      	movs	r1, #0
 8007a50:	460b      	mov	r3, r1
 8007a52:	07e8      	lsls	r0, r5, #31
 8007a54:	f100 80e5 	bmi.w	8007c22 <_realloc_r+0x29a>
 8007a58:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007a5c:	ebaa 0505 	sub.w	r5, sl, r5
 8007a60:	6868      	ldr	r0, [r5, #4]
 8007a62:	f020 0003 	bic.w	r0, r0, #3
 8007a66:	eb00 0b06 	add.w	fp, r0, r6
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80a5 	beq.w	8007bba <_realloc_r+0x232>
 8007a70:	459c      	cmp	ip, r3
 8007a72:	eb01 070b 	add.w	r7, r1, fp
 8007a76:	d14a      	bne.n	8007b0e <_realloc_r+0x186>
 8007a78:	f108 0310 	add.w	r3, r8, #16
 8007a7c:	42bb      	cmp	r3, r7
 8007a7e:	f300 809c 	bgt.w	8007bba <_realloc_r+0x232>
 8007a82:	46ab      	mov	fp, r5
 8007a84:	68eb      	ldr	r3, [r5, #12]
 8007a86:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8007a8a:	60d3      	str	r3, [r2, #12]
 8007a8c:	609a      	str	r2, [r3, #8]
 8007a8e:	1f32      	subs	r2, r6, #4
 8007a90:	2a24      	cmp	r2, #36	; 0x24
 8007a92:	d837      	bhi.n	8007b04 <_realloc_r+0x17c>
 8007a94:	2a13      	cmp	r2, #19
 8007a96:	d933      	bls.n	8007b00 <_realloc_r+0x178>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	60ab      	str	r3, [r5, #8]
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	60eb      	str	r3, [r5, #12]
 8007aa0:	2a1b      	cmp	r2, #27
 8007aa2:	d81b      	bhi.n	8007adc <_realloc_r+0x154>
 8007aa4:	3408      	adds	r4, #8
 8007aa6:	f105 0310 	add.w	r3, r5, #16
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	6862      	ldr	r2, [r4, #4]
 8007ab0:	605a      	str	r2, [r3, #4]
 8007ab2:	68a2      	ldr	r2, [r4, #8]
 8007ab4:	609a      	str	r2, [r3, #8]
 8007ab6:	eb05 0308 	add.w	r3, r5, r8
 8007aba:	4a65      	ldr	r2, [pc, #404]	; (8007c50 <_realloc_r+0x2c8>)
 8007abc:	eba7 0708 	sub.w	r7, r7, r8
 8007ac0:	f047 0701 	orr.w	r7, r7, #1
 8007ac4:	6093      	str	r3, [r2, #8]
 8007ac6:	605f      	str	r7, [r3, #4]
 8007ac8:	686b      	ldr	r3, [r5, #4]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	ea43 0308 	orr.w	r3, r3, r8
 8007ad2:	606b      	str	r3, [r5, #4]
 8007ad4:	4648      	mov	r0, r9
 8007ad6:	f7ff fa5d 	bl	8006f94 <__malloc_unlock>
 8007ada:	e771      	b.n	80079c0 <_realloc_r+0x38>
 8007adc:	68a3      	ldr	r3, [r4, #8]
 8007ade:	612b      	str	r3, [r5, #16]
 8007ae0:	68e3      	ldr	r3, [r4, #12]
 8007ae2:	616b      	str	r3, [r5, #20]
 8007ae4:	2a24      	cmp	r2, #36	; 0x24
 8007ae6:	bf01      	itttt	eq
 8007ae8:	6923      	ldreq	r3, [r4, #16]
 8007aea:	61ab      	streq	r3, [r5, #24]
 8007aec:	6962      	ldreq	r2, [r4, #20]
 8007aee:	61ea      	streq	r2, [r5, #28]
 8007af0:	bf19      	ittee	ne
 8007af2:	3410      	addne	r4, #16
 8007af4:	f105 0318 	addne.w	r3, r5, #24
 8007af8:	f105 0320 	addeq.w	r3, r5, #32
 8007afc:	3418      	addeq	r4, #24
 8007afe:	e7d4      	b.n	8007aaa <_realloc_r+0x122>
 8007b00:	465b      	mov	r3, fp
 8007b02:	e7d2      	b.n	8007aaa <_realloc_r+0x122>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4658      	mov	r0, fp
 8007b08:	f7ff ff24 	bl	8007954 <memmove>
 8007b0c:	e7d3      	b.n	8007ab6 <_realloc_r+0x12e>
 8007b0e:	45b8      	cmp	r8, r7
 8007b10:	dc53      	bgt.n	8007bba <_realloc_r+0x232>
 8007b12:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007b16:	4628      	mov	r0, r5
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	6093      	str	r3, [r2, #8]
 8007b1c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007b20:	68eb      	ldr	r3, [r5, #12]
 8007b22:	60d3      	str	r3, [r2, #12]
 8007b24:	609a      	str	r2, [r3, #8]
 8007b26:	1f32      	subs	r2, r6, #4
 8007b28:	2a24      	cmp	r2, #36	; 0x24
 8007b2a:	d842      	bhi.n	8007bb2 <_realloc_r+0x22a>
 8007b2c:	2a13      	cmp	r2, #19
 8007b2e:	d908      	bls.n	8007b42 <_realloc_r+0x1ba>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	60ab      	str	r3, [r5, #8]
 8007b34:	6863      	ldr	r3, [r4, #4]
 8007b36:	60eb      	str	r3, [r5, #12]
 8007b38:	2a1b      	cmp	r2, #27
 8007b3a:	d828      	bhi.n	8007b8e <_realloc_r+0x206>
 8007b3c:	3408      	adds	r4, #8
 8007b3e:	f105 0010 	add.w	r0, r5, #16
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	6003      	str	r3, [r0, #0]
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	6043      	str	r3, [r0, #4]
 8007b4a:	68a3      	ldr	r3, [r4, #8]
 8007b4c:	6083      	str	r3, [r0, #8]
 8007b4e:	686b      	ldr	r3, [r5, #4]
 8007b50:	eba7 0008 	sub.w	r0, r7, r8
 8007b54:	280f      	cmp	r0, #15
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	eb05 0207 	add.w	r2, r5, r7
 8007b5e:	f240 80b0 	bls.w	8007cc2 <_realloc_r+0x33a>
 8007b62:	eb05 0108 	add.w	r1, r5, r8
 8007b66:	ea48 0303 	orr.w	r3, r8, r3
 8007b6a:	f040 0001 	orr.w	r0, r0, #1
 8007b6e:	606b      	str	r3, [r5, #4]
 8007b70:	6048      	str	r0, [r1, #4]
 8007b72:	6853      	ldr	r3, [r2, #4]
 8007b74:	f043 0301 	orr.w	r3, r3, #1
 8007b78:	6053      	str	r3, [r2, #4]
 8007b7a:	3108      	adds	r1, #8
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	f7fe fef1 	bl	8006964 <_free_r>
 8007b82:	4648      	mov	r0, r9
 8007b84:	f7ff fa06 	bl	8006f94 <__malloc_unlock>
 8007b88:	f105 0b08 	add.w	fp, r5, #8
 8007b8c:	e718      	b.n	80079c0 <_realloc_r+0x38>
 8007b8e:	68a3      	ldr	r3, [r4, #8]
 8007b90:	612b      	str	r3, [r5, #16]
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	616b      	str	r3, [r5, #20]
 8007b96:	2a24      	cmp	r2, #36	; 0x24
 8007b98:	bf01      	itttt	eq
 8007b9a:	6923      	ldreq	r3, [r4, #16]
 8007b9c:	61ab      	streq	r3, [r5, #24]
 8007b9e:	6963      	ldreq	r3, [r4, #20]
 8007ba0:	61eb      	streq	r3, [r5, #28]
 8007ba2:	bf19      	ittee	ne
 8007ba4:	3410      	addne	r4, #16
 8007ba6:	f105 0018 	addne.w	r0, r5, #24
 8007baa:	f105 0020 	addeq.w	r0, r5, #32
 8007bae:	3418      	addeq	r4, #24
 8007bb0:	e7c7      	b.n	8007b42 <_realloc_r+0x1ba>
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	f7ff fece 	bl	8007954 <memmove>
 8007bb8:	e7c9      	b.n	8007b4e <_realloc_r+0x1c6>
 8007bba:	45d8      	cmp	r8, fp
 8007bbc:	dc31      	bgt.n	8007c22 <_realloc_r+0x29a>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	68eb      	ldr	r3, [r5, #12]
 8007bc2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007bc6:	60d3      	str	r3, [r2, #12]
 8007bc8:	609a      	str	r2, [r3, #8]
 8007bca:	1f32      	subs	r2, r6, #4
 8007bcc:	2a24      	cmp	r2, #36	; 0x24
 8007bce:	d824      	bhi.n	8007c1a <_realloc_r+0x292>
 8007bd0:	2a13      	cmp	r2, #19
 8007bd2:	d908      	bls.n	8007be6 <_realloc_r+0x25e>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	60ab      	str	r3, [r5, #8]
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	60eb      	str	r3, [r5, #12]
 8007bdc:	2a1b      	cmp	r2, #27
 8007bde:	d80a      	bhi.n	8007bf6 <_realloc_r+0x26e>
 8007be0:	3408      	adds	r4, #8
 8007be2:	f105 0010 	add.w	r0, r5, #16
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	6003      	str	r3, [r0, #0]
 8007bea:	6863      	ldr	r3, [r4, #4]
 8007bec:	6043      	str	r3, [r0, #4]
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	6083      	str	r3, [r0, #8]
 8007bf2:	465f      	mov	r7, fp
 8007bf4:	e7ab      	b.n	8007b4e <_realloc_r+0x1c6>
 8007bf6:	68a3      	ldr	r3, [r4, #8]
 8007bf8:	612b      	str	r3, [r5, #16]
 8007bfa:	68e3      	ldr	r3, [r4, #12]
 8007bfc:	616b      	str	r3, [r5, #20]
 8007bfe:	2a24      	cmp	r2, #36	; 0x24
 8007c00:	bf01      	itttt	eq
 8007c02:	6923      	ldreq	r3, [r4, #16]
 8007c04:	61ab      	streq	r3, [r5, #24]
 8007c06:	6963      	ldreq	r3, [r4, #20]
 8007c08:	61eb      	streq	r3, [r5, #28]
 8007c0a:	bf19      	ittee	ne
 8007c0c:	3410      	addne	r4, #16
 8007c0e:	f105 0018 	addne.w	r0, r5, #24
 8007c12:	f105 0020 	addeq.w	r0, r5, #32
 8007c16:	3418      	addeq	r4, #24
 8007c18:	e7e5      	b.n	8007be6 <_realloc_r+0x25e>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	f7ff fe9a 	bl	8007954 <memmove>
 8007c20:	e7e7      	b.n	8007bf2 <_realloc_r+0x26a>
 8007c22:	4611      	mov	r1, r2
 8007c24:	4648      	mov	r0, r9
 8007c26:	f7fe ff65 	bl	8006af4 <_malloc_r>
 8007c2a:	4683      	mov	fp, r0
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f43f af51 	beq.w	8007ad4 <_realloc_r+0x14c>
 8007c32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	4453      	add	r3, sl
 8007c3c:	f1a0 0208 	sub.w	r2, r0, #8
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d107      	bne.n	8007c54 <_realloc_r+0x2cc>
 8007c44:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8007c48:	f027 0703 	bic.w	r7, r7, #3
 8007c4c:	4437      	add	r7, r6
 8007c4e:	e6fc      	b.n	8007a4a <_realloc_r+0xc2>
 8007c50:	2000049c 	.word	0x2000049c
 8007c54:	1f32      	subs	r2, r6, #4
 8007c56:	2a24      	cmp	r2, #36	; 0x24
 8007c58:	d82d      	bhi.n	8007cb6 <_realloc_r+0x32e>
 8007c5a:	2a13      	cmp	r2, #19
 8007c5c:	d928      	bls.n	8007cb0 <_realloc_r+0x328>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	6003      	str	r3, [r0, #0]
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	6043      	str	r3, [r0, #4]
 8007c66:	2a1b      	cmp	r2, #27
 8007c68:	d80e      	bhi.n	8007c88 <_realloc_r+0x300>
 8007c6a:	f104 0208 	add.w	r2, r4, #8
 8007c6e:	f100 0308 	add.w	r3, r0, #8
 8007c72:	6811      	ldr	r1, [r2, #0]
 8007c74:	6019      	str	r1, [r3, #0]
 8007c76:	6851      	ldr	r1, [r2, #4]
 8007c78:	6059      	str	r1, [r3, #4]
 8007c7a:	6892      	ldr	r2, [r2, #8]
 8007c7c:	609a      	str	r2, [r3, #8]
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4648      	mov	r0, r9
 8007c82:	f7fe fe6f 	bl	8006964 <_free_r>
 8007c86:	e725      	b.n	8007ad4 <_realloc_r+0x14c>
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	6083      	str	r3, [r0, #8]
 8007c8c:	68e3      	ldr	r3, [r4, #12]
 8007c8e:	60c3      	str	r3, [r0, #12]
 8007c90:	2a24      	cmp	r2, #36	; 0x24
 8007c92:	bf01      	itttt	eq
 8007c94:	6923      	ldreq	r3, [r4, #16]
 8007c96:	6103      	streq	r3, [r0, #16]
 8007c98:	6961      	ldreq	r1, [r4, #20]
 8007c9a:	6141      	streq	r1, [r0, #20]
 8007c9c:	bf19      	ittee	ne
 8007c9e:	f104 0210 	addne.w	r2, r4, #16
 8007ca2:	f100 0310 	addne.w	r3, r0, #16
 8007ca6:	f104 0218 	addeq.w	r2, r4, #24
 8007caa:	f100 0318 	addeq.w	r3, r0, #24
 8007cae:	e7e0      	b.n	8007c72 <_realloc_r+0x2ea>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	e7dd      	b.n	8007c72 <_realloc_r+0x2ea>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	f7ff fe4c 	bl	8007954 <memmove>
 8007cbc:	e7df      	b.n	8007c7e <_realloc_r+0x2f6>
 8007cbe:	4637      	mov	r7, r6
 8007cc0:	e6c3      	b.n	8007a4a <_realloc_r+0xc2>
 8007cc2:	431f      	orrs	r7, r3
 8007cc4:	606f      	str	r7, [r5, #4]
 8007cc6:	6853      	ldr	r3, [r2, #4]
 8007cc8:	f043 0301 	orr.w	r3, r3, #1
 8007ccc:	6053      	str	r3, [r2, #4]
 8007cce:	e758      	b.n	8007b82 <_realloc_r+0x1fa>

08007cd0 <__sprint_r>:
 8007cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	6893      	ldr	r3, [r2, #8]
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	460f      	mov	r7, r1
 8007cda:	4614      	mov	r4, r2
 8007cdc:	b91b      	cbnz	r3, 8007ce6 <__sprint_r+0x16>
 8007cde:	6053      	str	r3, [r2, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007ce8:	049d      	lsls	r5, r3, #18
 8007cea:	d520      	bpl.n	8007d2e <__sprint_r+0x5e>
 8007cec:	6815      	ldr	r5, [r2, #0]
 8007cee:	3508      	adds	r5, #8
 8007cf0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8007cf4:	f04f 0900 	mov.w	r9, #0
 8007cf8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8007cfc:	45ca      	cmp	sl, r9
 8007cfe:	dc0b      	bgt.n	8007d18 <__sprint_r+0x48>
 8007d00:	68a3      	ldr	r3, [r4, #8]
 8007d02:	f026 0003 	bic.w	r0, r6, #3
 8007d06:	1a18      	subs	r0, r3, r0
 8007d08:	60a0      	str	r0, [r4, #8]
 8007d0a:	3508      	adds	r5, #8
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d1ef      	bne.n	8007cf0 <__sprint_r+0x20>
 8007d10:	2300      	movs	r3, #0
 8007d12:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8007d16:	e7e4      	b.n	8007ce2 <__sprint_r+0x12>
 8007d18:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8007d1c:	463a      	mov	r2, r7
 8007d1e:	4640      	mov	r0, r8
 8007d20:	f000 feaf 	bl	8008a82 <_fputwc_r>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d0f3      	beq.n	8007d10 <__sprint_r+0x40>
 8007d28:	f109 0901 	add.w	r9, r9, #1
 8007d2c:	e7e6      	b.n	8007cfc <__sprint_r+0x2c>
 8007d2e:	f000 fed3 	bl	8008ad8 <__sfvwrite_r>
 8007d32:	e7ed      	b.n	8007d10 <__sprint_r+0x40>

08007d34 <_vfiprintf_r>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	ed2d 8b02 	vpush	{d8}
 8007d3c:	b0b9      	sub	sp, #228	; 0xe4
 8007d3e:	460f      	mov	r7, r1
 8007d40:	9201      	str	r2, [sp, #4]
 8007d42:	461d      	mov	r5, r3
 8007d44:	461c      	mov	r4, r3
 8007d46:	4681      	mov	r9, r0
 8007d48:	b118      	cbz	r0, 8007d52 <_vfiprintf_r+0x1e>
 8007d4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007d4c:	b90b      	cbnz	r3, 8007d52 <_vfiprintf_r+0x1e>
 8007d4e:	f000 fe2f 	bl	80089b0 <__sinit>
 8007d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d54:	07d8      	lsls	r0, r3, #31
 8007d56:	d405      	bmi.n	8007d64 <_vfiprintf_r+0x30>
 8007d58:	89bb      	ldrh	r3, [r7, #12]
 8007d5a:	0599      	lsls	r1, r3, #22
 8007d5c:	d402      	bmi.n	8007d64 <_vfiprintf_r+0x30>
 8007d5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007d60:	f7fe fec6 	bl	8006af0 <__retarget_lock_acquire_recursive>
 8007d64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007d68:	049a      	lsls	r2, r3, #18
 8007d6a:	d406      	bmi.n	8007d7a <_vfiprintf_r+0x46>
 8007d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d70:	81bb      	strh	r3, [r7, #12]
 8007d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d78:	667b      	str	r3, [r7, #100]	; 0x64
 8007d7a:	89bb      	ldrh	r3, [r7, #12]
 8007d7c:	071e      	lsls	r6, r3, #28
 8007d7e:	d501      	bpl.n	8007d84 <_vfiprintf_r+0x50>
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	b9bb      	cbnz	r3, 8007db4 <_vfiprintf_r+0x80>
 8007d84:	4639      	mov	r1, r7
 8007d86:	4648      	mov	r0, r9
 8007d88:	f000 fcb8 	bl	80086fc <__swsetup_r>
 8007d8c:	b190      	cbz	r0, 8007db4 <_vfiprintf_r+0x80>
 8007d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d90:	07d8      	lsls	r0, r3, #31
 8007d92:	d508      	bpl.n	8007da6 <_vfiprintf_r+0x72>
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	9302      	str	r3, [sp, #8]
 8007d9a:	9802      	ldr	r0, [sp, #8]
 8007d9c:	b039      	add	sp, #228	; 0xe4
 8007d9e:	ecbd 8b02 	vpop	{d8}
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	89bb      	ldrh	r3, [r7, #12]
 8007da8:	0599      	lsls	r1, r3, #22
 8007daa:	d4f3      	bmi.n	8007d94 <_vfiprintf_r+0x60>
 8007dac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007dae:	f7fe fea0 	bl	8006af2 <__retarget_lock_release_recursive>
 8007db2:	e7ef      	b.n	8007d94 <_vfiprintf_r+0x60>
 8007db4:	89bb      	ldrh	r3, [r7, #12]
 8007db6:	f003 021a 	and.w	r2, r3, #26
 8007dba:	2a0a      	cmp	r2, #10
 8007dbc:	d116      	bne.n	8007dec <_vfiprintf_r+0xb8>
 8007dbe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	db12      	blt.n	8007dec <_vfiprintf_r+0xb8>
 8007dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dc8:	07d2      	lsls	r2, r2, #31
 8007dca:	d404      	bmi.n	8007dd6 <_vfiprintf_r+0xa2>
 8007dcc:	059e      	lsls	r6, r3, #22
 8007dce:	d402      	bmi.n	8007dd6 <_vfiprintf_r+0xa2>
 8007dd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007dd2:	f7fe fe8e 	bl	8006af2 <__retarget_lock_release_recursive>
 8007dd6:	9a01      	ldr	r2, [sp, #4]
 8007dd8:	462b      	mov	r3, r5
 8007dda:	4639      	mov	r1, r7
 8007ddc:	4648      	mov	r0, r9
 8007dde:	b039      	add	sp, #228	; 0xe4
 8007de0:	ecbd 8b02 	vpop	{d8}
 8007de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	f000 bc3a 	b.w	8008660 <__sbprintf>
 8007dec:	2300      	movs	r3, #0
 8007dee:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8007df2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007df6:	ae0f      	add	r6, sp, #60	; 0x3c
 8007df8:	ee08 3a10 	vmov	s16, r3
 8007dfc:	960c      	str	r6, [sp, #48]	; 0x30
 8007dfe:	9307      	str	r3, [sp, #28]
 8007e00:	9302      	str	r3, [sp, #8]
 8007e02:	9b01      	ldr	r3, [sp, #4]
 8007e04:	461d      	mov	r5, r3
 8007e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e0a:	b10a      	cbz	r2, 8007e10 <_vfiprintf_r+0xdc>
 8007e0c:	2a25      	cmp	r2, #37	; 0x25
 8007e0e:	d1f9      	bne.n	8007e04 <_vfiprintf_r+0xd0>
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	ebb5 0803 	subs.w	r8, r5, r3
 8007e16:	d00d      	beq.n	8007e34 <_vfiprintf_r+0x100>
 8007e18:	e9c6 3800 	strd	r3, r8, [r6]
 8007e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e1e:	4443      	add	r3, r8
 8007e20:	930e      	str	r3, [sp, #56]	; 0x38
 8007e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e24:	3301      	adds	r3, #1
 8007e26:	2b07      	cmp	r3, #7
 8007e28:	930d      	str	r3, [sp, #52]	; 0x34
 8007e2a:	dc75      	bgt.n	8007f18 <_vfiprintf_r+0x1e4>
 8007e2c:	3608      	adds	r6, #8
 8007e2e:	9b02      	ldr	r3, [sp, #8]
 8007e30:	4443      	add	r3, r8
 8007e32:	9302      	str	r3, [sp, #8]
 8007e34:	782b      	ldrb	r3, [r5, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 83d6 	beq.w	80085e8 <_vfiprintf_r+0x8b4>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e42:	1c6a      	adds	r2, r5, #1
 8007e44:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8007e48:	9100      	str	r1, [sp, #0]
 8007e4a:	9303      	str	r3, [sp, #12]
 8007e4c:	469a      	mov	sl, r3
 8007e4e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007e52:	9201      	str	r2, [sp, #4]
 8007e54:	f1a3 0220 	sub.w	r2, r3, #32
 8007e58:	2a5a      	cmp	r2, #90	; 0x5a
 8007e5a:	f200 831f 	bhi.w	800849c <_vfiprintf_r+0x768>
 8007e5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007e62:	009b      	.short	0x009b
 8007e64:	031d031d 	.word	0x031d031d
 8007e68:	031d00a3 	.word	0x031d00a3
 8007e6c:	031d031d 	.word	0x031d031d
 8007e70:	031d0082 	.word	0x031d0082
 8007e74:	00a6031d 	.word	0x00a6031d
 8007e78:	031d00b0 	.word	0x031d00b0
 8007e7c:	00b200ad 	.word	0x00b200ad
 8007e80:	00cd031d 	.word	0x00cd031d
 8007e84:	00d000d0 	.word	0x00d000d0
 8007e88:	00d000d0 	.word	0x00d000d0
 8007e8c:	00d000d0 	.word	0x00d000d0
 8007e90:	00d000d0 	.word	0x00d000d0
 8007e94:	031d00d0 	.word	0x031d00d0
 8007e98:	031d031d 	.word	0x031d031d
 8007e9c:	031d031d 	.word	0x031d031d
 8007ea0:	031d031d 	.word	0x031d031d
 8007ea4:	031d031d 	.word	0x031d031d
 8007ea8:	010800fa 	.word	0x010800fa
 8007eac:	031d031d 	.word	0x031d031d
 8007eb0:	031d031d 	.word	0x031d031d
 8007eb4:	031d031d 	.word	0x031d031d
 8007eb8:	031d031d 	.word	0x031d031d
 8007ebc:	031d031d 	.word	0x031d031d
 8007ec0:	031d0158 	.word	0x031d0158
 8007ec4:	031d031d 	.word	0x031d031d
 8007ec8:	031d01a1 	.word	0x031d01a1
 8007ecc:	031d027e 	.word	0x031d027e
 8007ed0:	029e031d 	.word	0x029e031d
 8007ed4:	031d031d 	.word	0x031d031d
 8007ed8:	031d031d 	.word	0x031d031d
 8007edc:	031d031d 	.word	0x031d031d
 8007ee0:	031d031d 	.word	0x031d031d
 8007ee4:	031d031d 	.word	0x031d031d
 8007ee8:	010a00fa 	.word	0x010a00fa
 8007eec:	031d031d 	.word	0x031d031d
 8007ef0:	00e0031d 	.word	0x00e0031d
 8007ef4:	00f4010a 	.word	0x00f4010a
 8007ef8:	00ed031d 	.word	0x00ed031d
 8007efc:	0136031d 	.word	0x0136031d
 8007f00:	018f015a 	.word	0x018f015a
 8007f04:	031d00f4 	.word	0x031d00f4
 8007f08:	009901a1 	.word	0x009901a1
 8007f0c:	031d0280 	.word	0x031d0280
 8007f10:	0065031d 	.word	0x0065031d
 8007f14:	0099031d 	.word	0x0099031d
 8007f18:	aa0c      	add	r2, sp, #48	; 0x30
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	f7ff fed7 	bl	8007cd0 <__sprint_r>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 833f 	bne.w	80085a6 <_vfiprintf_r+0x872>
 8007f28:	ae0f      	add	r6, sp, #60	; 0x3c
 8007f2a:	e780      	b.n	8007e2e <_vfiprintf_r+0xfa>
 8007f2c:	4a9c      	ldr	r2, [pc, #624]	; (80081a0 <_vfiprintf_r+0x46c>)
 8007f2e:	9205      	str	r2, [sp, #20]
 8007f30:	f01a 0220 	ands.w	r2, sl, #32
 8007f34:	f000 8235 	beq.w	80083a2 <_vfiprintf_r+0x66e>
 8007f38:	3407      	adds	r4, #7
 8007f3a:	f024 0207 	bic.w	r2, r4, #7
 8007f3e:	4693      	mov	fp, r2
 8007f40:	6855      	ldr	r5, [r2, #4]
 8007f42:	f85b 4b08 	ldr.w	r4, [fp], #8
 8007f46:	f01a 0f01 	tst.w	sl, #1
 8007f4a:	d009      	beq.n	8007f60 <_vfiprintf_r+0x22c>
 8007f4c:	ea54 0205 	orrs.w	r2, r4, r5
 8007f50:	bf1f      	itttt	ne
 8007f52:	2230      	movne	r2, #48	; 0x30
 8007f54:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8007f58:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8007f5c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007f60:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8007f64:	e11a      	b.n	800819c <_vfiprintf_r+0x468>
 8007f66:	4648      	mov	r0, r9
 8007f68:	f7fe fdbc 	bl	8006ae4 <_localeconv_r>
 8007f6c:	6843      	ldr	r3, [r0, #4]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	ee08 3a10 	vmov	s16, r3
 8007f74:	f7f8 f92c 	bl	80001d0 <strlen>
 8007f78:	9007      	str	r0, [sp, #28]
 8007f7a:	4648      	mov	r0, r9
 8007f7c:	f7fe fdb2 	bl	8006ae4 <_localeconv_r>
 8007f80:	6883      	ldr	r3, [r0, #8]
 8007f82:	9306      	str	r3, [sp, #24]
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	b12b      	cbz	r3, 8007f94 <_vfiprintf_r+0x260>
 8007f88:	9b06      	ldr	r3, [sp, #24]
 8007f8a:	b11b      	cbz	r3, 8007f94 <_vfiprintf_r+0x260>
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b10b      	cbz	r3, 8007f94 <_vfiprintf_r+0x260>
 8007f90:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007f94:	9a01      	ldr	r2, [sp, #4]
 8007f96:	e75a      	b.n	8007e4e <_vfiprintf_r+0x11a>
 8007f98:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f9      	bne.n	8007f94 <_vfiprintf_r+0x260>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8007fa6:	e7f5      	b.n	8007f94 <_vfiprintf_r+0x260>
 8007fa8:	f04a 0a01 	orr.w	sl, sl, #1
 8007fac:	e7f2      	b.n	8007f94 <_vfiprintf_r+0x260>
 8007fae:	f854 3b04 	ldr.w	r3, [r4], #4
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	daed      	bge.n	8007f94 <_vfiprintf_r+0x260>
 8007fb8:	425b      	negs	r3, r3
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	f04a 0a04 	orr.w	sl, sl, #4
 8007fc0:	e7e8      	b.n	8007f94 <_vfiprintf_r+0x260>
 8007fc2:	232b      	movs	r3, #43	; 0x2b
 8007fc4:	e7ed      	b.n	8007fa2 <_vfiprintf_r+0x26e>
 8007fc6:	9a01      	ldr	r2, [sp, #4]
 8007fc8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8007fce:	d112      	bne.n	8007ff6 <_vfiprintf_r+0x2c2>
 8007fd0:	f854 0b04 	ldr.w	r0, [r4], #4
 8007fd4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8007fd8:	e9cd 3200 	strd	r3, r2, [sp]
 8007fdc:	e7da      	b.n	8007f94 <_vfiprintf_r+0x260>
 8007fde:	9b00      	ldr	r3, [sp, #0]
 8007fe0:	200a      	movs	r0, #10
 8007fe2:	fb00 1303 	mla	r3, r0, r3, r1
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007fec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007ff0:	2909      	cmp	r1, #9
 8007ff2:	d9f4      	bls.n	8007fde <_vfiprintf_r+0x2aa>
 8007ff4:	e72d      	b.n	8007e52 <_vfiprintf_r+0x11e>
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	9100      	str	r1, [sp, #0]
 8007ffa:	e7f7      	b.n	8007fec <_vfiprintf_r+0x2b8>
 8007ffc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008000:	e7c8      	b.n	8007f94 <_vfiprintf_r+0x260>
 8008002:	2100      	movs	r1, #0
 8008004:	9a01      	ldr	r2, [sp, #4]
 8008006:	9103      	str	r1, [sp, #12]
 8008008:	9903      	ldr	r1, [sp, #12]
 800800a:	3b30      	subs	r3, #48	; 0x30
 800800c:	200a      	movs	r0, #10
 800800e:	fb00 3301 	mla	r3, r0, r1, r3
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008018:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800801c:	2909      	cmp	r1, #9
 800801e:	d9f3      	bls.n	8008008 <_vfiprintf_r+0x2d4>
 8008020:	e717      	b.n	8007e52 <_vfiprintf_r+0x11e>
 8008022:	9b01      	ldr	r3, [sp, #4]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b68      	cmp	r3, #104	; 0x68
 8008028:	bf01      	itttt	eq
 800802a:	9b01      	ldreq	r3, [sp, #4]
 800802c:	3301      	addeq	r3, #1
 800802e:	9301      	streq	r3, [sp, #4]
 8008030:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008034:	bf18      	it	ne
 8008036:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800803a:	e7ab      	b.n	8007f94 <_vfiprintf_r+0x260>
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b6c      	cmp	r3, #108	; 0x6c
 8008042:	d105      	bne.n	8008050 <_vfiprintf_r+0x31c>
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	f04a 0a20 	orr.w	sl, sl, #32
 800804e:	e7a1      	b.n	8007f94 <_vfiprintf_r+0x260>
 8008050:	f04a 0a10 	orr.w	sl, sl, #16
 8008054:	e79e      	b.n	8007f94 <_vfiprintf_r+0x260>
 8008056:	46a3      	mov	fp, r4
 8008058:	2100      	movs	r1, #0
 800805a:	f85b 3b04 	ldr.w	r3, [fp], #4
 800805e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8008062:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8008066:	2301      	movs	r3, #1
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	460d      	mov	r5, r1
 800806c:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8008070:	e0ad      	b.n	80081ce <_vfiprintf_r+0x49a>
 8008072:	f04a 0a10 	orr.w	sl, sl, #16
 8008076:	f01a 0f20 	tst.w	sl, #32
 800807a:	d011      	beq.n	80080a0 <_vfiprintf_r+0x36c>
 800807c:	3407      	adds	r4, #7
 800807e:	f024 0307 	bic.w	r3, r4, #7
 8008082:	469b      	mov	fp, r3
 8008084:	685d      	ldr	r5, [r3, #4]
 8008086:	f85b 4b08 	ldr.w	r4, [fp], #8
 800808a:	2d00      	cmp	r5, #0
 800808c:	da06      	bge.n	800809c <_vfiprintf_r+0x368>
 800808e:	4264      	negs	r4, r4
 8008090:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008094:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008098:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800809c:	2301      	movs	r3, #1
 800809e:	e04a      	b.n	8008136 <_vfiprintf_r+0x402>
 80080a0:	46a3      	mov	fp, r4
 80080a2:	f01a 0f10 	tst.w	sl, #16
 80080a6:	f85b 5b04 	ldr.w	r5, [fp], #4
 80080aa:	d002      	beq.n	80080b2 <_vfiprintf_r+0x37e>
 80080ac:	462c      	mov	r4, r5
 80080ae:	17ed      	asrs	r5, r5, #31
 80080b0:	e7eb      	b.n	800808a <_vfiprintf_r+0x356>
 80080b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80080b6:	d003      	beq.n	80080c0 <_vfiprintf_r+0x38c>
 80080b8:	b22c      	sxth	r4, r5
 80080ba:	f345 35c0 	sbfx	r5, r5, #15, #1
 80080be:	e7e4      	b.n	800808a <_vfiprintf_r+0x356>
 80080c0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80080c4:	d0f2      	beq.n	80080ac <_vfiprintf_r+0x378>
 80080c6:	b26c      	sxtb	r4, r5
 80080c8:	f345 15c0 	sbfx	r5, r5, #7, #1
 80080cc:	e7dd      	b.n	800808a <_vfiprintf_r+0x356>
 80080ce:	f01a 0f20 	tst.w	sl, #32
 80080d2:	f104 0b04 	add.w	fp, r4, #4
 80080d6:	d007      	beq.n	80080e8 <_vfiprintf_r+0x3b4>
 80080d8:	9a02      	ldr	r2, [sp, #8]
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	9902      	ldr	r1, [sp, #8]
 80080de:	17d2      	asrs	r2, r2, #31
 80080e0:	e9c3 1200 	strd	r1, r2, [r3]
 80080e4:	465c      	mov	r4, fp
 80080e6:	e68c      	b.n	8007e02 <_vfiprintf_r+0xce>
 80080e8:	f01a 0f10 	tst.w	sl, #16
 80080ec:	d003      	beq.n	80080f6 <_vfiprintf_r+0x3c2>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	9a02      	ldr	r2, [sp, #8]
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	e7f6      	b.n	80080e4 <_vfiprintf_r+0x3b0>
 80080f6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80080fa:	d003      	beq.n	8008104 <_vfiprintf_r+0x3d0>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	9a02      	ldr	r2, [sp, #8]
 8008100:	801a      	strh	r2, [r3, #0]
 8008102:	e7ef      	b.n	80080e4 <_vfiprintf_r+0x3b0>
 8008104:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008108:	d0f1      	beq.n	80080ee <_vfiprintf_r+0x3ba>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	9a02      	ldr	r2, [sp, #8]
 800810e:	701a      	strb	r2, [r3, #0]
 8008110:	e7e8      	b.n	80080e4 <_vfiprintf_r+0x3b0>
 8008112:	f04a 0a10 	orr.w	sl, sl, #16
 8008116:	f01a 0320 	ands.w	r3, sl, #32
 800811a:	d01f      	beq.n	800815c <_vfiprintf_r+0x428>
 800811c:	3407      	adds	r4, #7
 800811e:	f024 0307 	bic.w	r3, r4, #7
 8008122:	469b      	mov	fp, r3
 8008124:	685d      	ldr	r5, [r3, #4]
 8008126:	f85b 4b08 	ldr.w	r4, [fp], #8
 800812a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800812e:	2300      	movs	r3, #0
 8008130:	2200      	movs	r2, #0
 8008132:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8008136:	9a00      	ldr	r2, [sp, #0]
 8008138:	3201      	adds	r2, #1
 800813a:	f000 8262 	beq.w	8008602 <_vfiprintf_r+0x8ce>
 800813e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8008142:	9204      	str	r2, [sp, #16]
 8008144:	ea54 0205 	orrs.w	r2, r4, r5
 8008148:	f040 8261 	bne.w	800860e <_vfiprintf_r+0x8da>
 800814c:	9a00      	ldr	r2, [sp, #0]
 800814e:	2a00      	cmp	r2, #0
 8008150:	f000 8199 	beq.w	8008486 <_vfiprintf_r+0x752>
 8008154:	2b01      	cmp	r3, #1
 8008156:	f040 825d 	bne.w	8008614 <_vfiprintf_r+0x8e0>
 800815a:	e139      	b.n	80083d0 <_vfiprintf_r+0x69c>
 800815c:	46a3      	mov	fp, r4
 800815e:	f01a 0510 	ands.w	r5, sl, #16
 8008162:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008166:	d001      	beq.n	800816c <_vfiprintf_r+0x438>
 8008168:	461d      	mov	r5, r3
 800816a:	e7de      	b.n	800812a <_vfiprintf_r+0x3f6>
 800816c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8008170:	d001      	beq.n	8008176 <_vfiprintf_r+0x442>
 8008172:	b2a4      	uxth	r4, r4
 8008174:	e7d9      	b.n	800812a <_vfiprintf_r+0x3f6>
 8008176:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800817a:	d0d6      	beq.n	800812a <_vfiprintf_r+0x3f6>
 800817c:	b2e4      	uxtb	r4, r4
 800817e:	e7f3      	b.n	8008168 <_vfiprintf_r+0x434>
 8008180:	2330      	movs	r3, #48	; 0x30
 8008182:	46a3      	mov	fp, r4
 8008184:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8008188:	2378      	movs	r3, #120	; 0x78
 800818a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 800818e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008192:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <_vfiprintf_r+0x46c>)
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	2500      	movs	r5, #0
 8008198:	f04a 0a02 	orr.w	sl, sl, #2
 800819c:	2302      	movs	r3, #2
 800819e:	e7c7      	b.n	8008130 <_vfiprintf_r+0x3fc>
 80081a0:	08009d7c 	.word	0x08009d7c
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	46a3      	mov	fp, r4
 80081a8:	2500      	movs	r5, #0
 80081aa:	1c5c      	adds	r4, r3, #1
 80081ac:	f85b 8b04 	ldr.w	r8, [fp], #4
 80081b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80081b4:	f000 80ce 	beq.w	8008354 <_vfiprintf_r+0x620>
 80081b8:	461a      	mov	r2, r3
 80081ba:	4629      	mov	r1, r5
 80081bc:	4640      	mov	r0, r8
 80081be:	f7f8 f80f 	bl	80001e0 <memchr>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f000 8174 	beq.w	80084b0 <_vfiprintf_r+0x77c>
 80081c8:	eba0 0308 	sub.w	r3, r0, r8
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	9b00      	ldr	r3, [sp, #0]
 80081d0:	42ab      	cmp	r3, r5
 80081d2:	bfb8      	it	lt
 80081d4:	462b      	movlt	r3, r5
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80081dc:	b113      	cbz	r3, 80081e4 <_vfiprintf_r+0x4b0>
 80081de:	9b04      	ldr	r3, [sp, #16]
 80081e0:	3301      	adds	r3, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	f01a 0302 	ands.w	r3, sl, #2
 80081e8:	9308      	str	r3, [sp, #32]
 80081ea:	bf1e      	ittt	ne
 80081ec:	9b04      	ldrne	r3, [sp, #16]
 80081ee:	3302      	addne	r3, #2
 80081f0:	9304      	strne	r3, [sp, #16]
 80081f2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80081f6:	9309      	str	r3, [sp, #36]	; 0x24
 80081f8:	d11f      	bne.n	800823a <_vfiprintf_r+0x506>
 80081fa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80081fe:	1a9c      	subs	r4, r3, r2
 8008200:	2c00      	cmp	r4, #0
 8008202:	dd1a      	ble.n	800823a <_vfiprintf_r+0x506>
 8008204:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008208:	48aa      	ldr	r0, [pc, #680]	; (80084b4 <_vfiprintf_r+0x780>)
 800820a:	6030      	str	r0, [r6, #0]
 800820c:	2c10      	cmp	r4, #16
 800820e:	f103 0301 	add.w	r3, r3, #1
 8008212:	f106 0108 	add.w	r1, r6, #8
 8008216:	f300 8153 	bgt.w	80084c0 <_vfiprintf_r+0x78c>
 800821a:	6074      	str	r4, [r6, #4]
 800821c:	2b07      	cmp	r3, #7
 800821e:	4414      	add	r4, r2
 8008220:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8008224:	f340 815e 	ble.w	80084e4 <_vfiprintf_r+0x7b0>
 8008228:	aa0c      	add	r2, sp, #48	; 0x30
 800822a:	4639      	mov	r1, r7
 800822c:	4648      	mov	r0, r9
 800822e:	f7ff fd4f 	bl	8007cd0 <__sprint_r>
 8008232:	2800      	cmp	r0, #0
 8008234:	f040 81b7 	bne.w	80085a6 <_vfiprintf_r+0x872>
 8008238:	ae0f      	add	r6, sp, #60	; 0x3c
 800823a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800823e:	b173      	cbz	r3, 800825e <_vfiprintf_r+0x52a>
 8008240:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8008244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008246:	6032      	str	r2, [r6, #0]
 8008248:	2201      	movs	r2, #1
 800824a:	6072      	str	r2, [r6, #4]
 800824c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800824e:	3301      	adds	r3, #1
 8008250:	3201      	adds	r2, #1
 8008252:	2b07      	cmp	r3, #7
 8008254:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8008258:	f300 8146 	bgt.w	80084e8 <_vfiprintf_r+0x7b4>
 800825c:	3608      	adds	r6, #8
 800825e:	9b08      	ldr	r3, [sp, #32]
 8008260:	b16b      	cbz	r3, 800827e <_vfiprintf_r+0x54a>
 8008262:	aa0b      	add	r2, sp, #44	; 0x2c
 8008264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008266:	6032      	str	r2, [r6, #0]
 8008268:	2202      	movs	r2, #2
 800826a:	6072      	str	r2, [r6, #4]
 800826c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800826e:	3301      	adds	r3, #1
 8008270:	3202      	adds	r2, #2
 8008272:	2b07      	cmp	r3, #7
 8008274:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8008278:	f300 813f 	bgt.w	80084fa <_vfiprintf_r+0x7c6>
 800827c:	3608      	adds	r6, #8
 800827e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d11f      	bne.n	80082c4 <_vfiprintf_r+0x590>
 8008284:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008288:	1a9c      	subs	r4, r3, r2
 800828a:	2c00      	cmp	r4, #0
 800828c:	dd1a      	ble.n	80082c4 <_vfiprintf_r+0x590>
 800828e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008292:	4889      	ldr	r0, [pc, #548]	; (80084b8 <_vfiprintf_r+0x784>)
 8008294:	6030      	str	r0, [r6, #0]
 8008296:	2c10      	cmp	r4, #16
 8008298:	f103 0301 	add.w	r3, r3, #1
 800829c:	f106 0108 	add.w	r1, r6, #8
 80082a0:	f300 8134 	bgt.w	800850c <_vfiprintf_r+0x7d8>
 80082a4:	6074      	str	r4, [r6, #4]
 80082a6:	2b07      	cmp	r3, #7
 80082a8:	4414      	add	r4, r2
 80082aa:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80082ae:	f340 813f 	ble.w	8008530 <_vfiprintf_r+0x7fc>
 80082b2:	aa0c      	add	r2, sp, #48	; 0x30
 80082b4:	4639      	mov	r1, r7
 80082b6:	4648      	mov	r0, r9
 80082b8:	f7ff fd0a 	bl	8007cd0 <__sprint_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	f040 8172 	bne.w	80085a6 <_vfiprintf_r+0x872>
 80082c2:	ae0f      	add	r6, sp, #60	; 0x3c
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	1aec      	subs	r4, r5, r3
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	dd1a      	ble.n	8008302 <_vfiprintf_r+0x5ce>
 80082cc:	4d7a      	ldr	r5, [pc, #488]	; (80084b8 <_vfiprintf_r+0x784>)
 80082ce:	6035      	str	r5, [r6, #0]
 80082d0:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80082d4:	2c10      	cmp	r4, #16
 80082d6:	f103 0301 	add.w	r3, r3, #1
 80082da:	f106 0208 	add.w	r2, r6, #8
 80082de:	f300 8129 	bgt.w	8008534 <_vfiprintf_r+0x800>
 80082e2:	6074      	str	r4, [r6, #4]
 80082e4:	2b07      	cmp	r3, #7
 80082e6:	440c      	add	r4, r1
 80082e8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80082ec:	f340 8133 	ble.w	8008556 <_vfiprintf_r+0x822>
 80082f0:	aa0c      	add	r2, sp, #48	; 0x30
 80082f2:	4639      	mov	r1, r7
 80082f4:	4648      	mov	r0, r9
 80082f6:	f7ff fceb 	bl	8007cd0 <__sprint_r>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f040 8153 	bne.w	80085a6 <_vfiprintf_r+0x872>
 8008300:	ae0f      	add	r6, sp, #60	; 0x3c
 8008302:	9b00      	ldr	r3, [sp, #0]
 8008304:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008306:	6073      	str	r3, [r6, #4]
 8008308:	4418      	add	r0, r3
 800830a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800830c:	f8c6 8000 	str.w	r8, [r6]
 8008310:	3301      	adds	r3, #1
 8008312:	2b07      	cmp	r3, #7
 8008314:	900e      	str	r0, [sp, #56]	; 0x38
 8008316:	930d      	str	r3, [sp, #52]	; 0x34
 8008318:	f300 811f 	bgt.w	800855a <_vfiprintf_r+0x826>
 800831c:	f106 0308 	add.w	r3, r6, #8
 8008320:	f01a 0f04 	tst.w	sl, #4
 8008324:	f040 8121 	bne.w	800856a <_vfiprintf_r+0x836>
 8008328:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800832c:	9904      	ldr	r1, [sp, #16]
 800832e:	428a      	cmp	r2, r1
 8008330:	bfac      	ite	ge
 8008332:	189b      	addge	r3, r3, r2
 8008334:	185b      	addlt	r3, r3, r1
 8008336:	9302      	str	r3, [sp, #8]
 8008338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800833a:	b13b      	cbz	r3, 800834c <_vfiprintf_r+0x618>
 800833c:	aa0c      	add	r2, sp, #48	; 0x30
 800833e:	4639      	mov	r1, r7
 8008340:	4648      	mov	r0, r9
 8008342:	f7ff fcc5 	bl	8007cd0 <__sprint_r>
 8008346:	2800      	cmp	r0, #0
 8008348:	f040 812d 	bne.w	80085a6 <_vfiprintf_r+0x872>
 800834c:	2300      	movs	r3, #0
 800834e:	930d      	str	r3, [sp, #52]	; 0x34
 8008350:	ae0f      	add	r6, sp, #60	; 0x3c
 8008352:	e6c7      	b.n	80080e4 <_vfiprintf_r+0x3b0>
 8008354:	4640      	mov	r0, r8
 8008356:	f7f7 ff3b 	bl	80001d0 <strlen>
 800835a:	9000      	str	r0, [sp, #0]
 800835c:	e737      	b.n	80081ce <_vfiprintf_r+0x49a>
 800835e:	f04a 0a10 	orr.w	sl, sl, #16
 8008362:	f01a 0320 	ands.w	r3, sl, #32
 8008366:	d008      	beq.n	800837a <_vfiprintf_r+0x646>
 8008368:	3407      	adds	r4, #7
 800836a:	f024 0307 	bic.w	r3, r4, #7
 800836e:	469b      	mov	fp, r3
 8008370:	685d      	ldr	r5, [r3, #4]
 8008372:	f85b 4b08 	ldr.w	r4, [fp], #8
 8008376:	2301      	movs	r3, #1
 8008378:	e6da      	b.n	8008130 <_vfiprintf_r+0x3fc>
 800837a:	46a3      	mov	fp, r4
 800837c:	f01a 0510 	ands.w	r5, sl, #16
 8008380:	f85b 4b04 	ldr.w	r4, [fp], #4
 8008384:	d001      	beq.n	800838a <_vfiprintf_r+0x656>
 8008386:	461d      	mov	r5, r3
 8008388:	e7f5      	b.n	8008376 <_vfiprintf_r+0x642>
 800838a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800838e:	d001      	beq.n	8008394 <_vfiprintf_r+0x660>
 8008390:	b2a4      	uxth	r4, r4
 8008392:	e7f0      	b.n	8008376 <_vfiprintf_r+0x642>
 8008394:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008398:	d0ed      	beq.n	8008376 <_vfiprintf_r+0x642>
 800839a:	b2e4      	uxtb	r4, r4
 800839c:	e7f3      	b.n	8008386 <_vfiprintf_r+0x652>
 800839e:	4a47      	ldr	r2, [pc, #284]	; (80084bc <_vfiprintf_r+0x788>)
 80083a0:	e5c5      	b.n	8007f2e <_vfiprintf_r+0x1fa>
 80083a2:	46a3      	mov	fp, r4
 80083a4:	f01a 0510 	ands.w	r5, sl, #16
 80083a8:	f85b 4b04 	ldr.w	r4, [fp], #4
 80083ac:	d001      	beq.n	80083b2 <_vfiprintf_r+0x67e>
 80083ae:	4615      	mov	r5, r2
 80083b0:	e5c9      	b.n	8007f46 <_vfiprintf_r+0x212>
 80083b2:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 80083b6:	d001      	beq.n	80083bc <_vfiprintf_r+0x688>
 80083b8:	b2a4      	uxth	r4, r4
 80083ba:	e5c4      	b.n	8007f46 <_vfiprintf_r+0x212>
 80083bc:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80083c0:	f43f adc1 	beq.w	8007f46 <_vfiprintf_r+0x212>
 80083c4:	b2e4      	uxtb	r4, r4
 80083c6:	e7f2      	b.n	80083ae <_vfiprintf_r+0x67a>
 80083c8:	2c0a      	cmp	r4, #10
 80083ca:	f175 0300 	sbcs.w	r3, r5, #0
 80083ce:	d205      	bcs.n	80083dc <_vfiprintf_r+0x6a8>
 80083d0:	3430      	adds	r4, #48	; 0x30
 80083d2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80083d6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80083da:	e137      	b.n	800864c <_vfiprintf_r+0x918>
 80083dc:	ab38      	add	r3, sp, #224	; 0xe0
 80083de:	9308      	str	r3, [sp, #32]
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e6:	f04f 0a00 	mov.w	sl, #0
 80083ea:	9309      	str	r3, [sp, #36]	; 0x24
 80083ec:	9b08      	ldr	r3, [sp, #32]
 80083ee:	220a      	movs	r2, #10
 80083f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80083f4:	4620      	mov	r0, r4
 80083f6:	2300      	movs	r3, #0
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f8 fc25 	bl	8000c48 <__aeabi_uldivmod>
 80083fe:	9b08      	ldr	r3, [sp, #32]
 8008400:	3230      	adds	r2, #48	; 0x30
 8008402:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	f10a 0a01 	add.w	sl, sl, #1
 800840c:	b1db      	cbz	r3, 8008446 <_vfiprintf_r+0x712>
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4553      	cmp	r3, sl
 8008414:	d117      	bne.n	8008446 <_vfiprintf_r+0x712>
 8008416:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800841a:	d014      	beq.n	8008446 <_vfiprintf_r+0x712>
 800841c:	2c0a      	cmp	r4, #10
 800841e:	f175 0300 	sbcs.w	r3, r5, #0
 8008422:	d310      	bcc.n	8008446 <_vfiprintf_r+0x712>
 8008424:	9b07      	ldr	r3, [sp, #28]
 8008426:	eba8 0803 	sub.w	r8, r8, r3
 800842a:	461a      	mov	r2, r3
 800842c:	ee18 1a10 	vmov	r1, s16
 8008430:	4640      	mov	r0, r8
 8008432:	f7ff f933 	bl	800769c <strncpy>
 8008436:	9b06      	ldr	r3, [sp, #24]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	b1a3      	cbz	r3, 8008466 <_vfiprintf_r+0x732>
 800843c:	9b06      	ldr	r3, [sp, #24]
 800843e:	3301      	adds	r3, #1
 8008440:	9306      	str	r3, [sp, #24]
 8008442:	f04f 0a00 	mov.w	sl, #0
 8008446:	2300      	movs	r3, #0
 8008448:	220a      	movs	r2, #10
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f7f8 fbfb 	bl	8000c48 <__aeabi_uldivmod>
 8008452:	2c0a      	cmp	r4, #10
 8008454:	f175 0300 	sbcs.w	r3, r5, #0
 8008458:	f0c0 80f8 	bcc.w	800864c <_vfiprintf_r+0x918>
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	f8cd 8020 	str.w	r8, [sp, #32]
 8008464:	e7c2      	b.n	80083ec <_vfiprintf_r+0x6b8>
 8008466:	469a      	mov	sl, r3
 8008468:	e7ed      	b.n	8008446 <_vfiprintf_r+0x712>
 800846a:	f004 030f 	and.w	r3, r4, #15
 800846e:	9a05      	ldr	r2, [sp, #20]
 8008470:	0924      	lsrs	r4, r4, #4
 8008472:	5cd3      	ldrb	r3, [r2, r3]
 8008474:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008478:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800847c:	092d      	lsrs	r5, r5, #4
 800847e:	ea54 0305 	orrs.w	r3, r4, r5
 8008482:	d1f2      	bne.n	800846a <_vfiprintf_r+0x736>
 8008484:	e0e2      	b.n	800864c <_vfiprintf_r+0x918>
 8008486:	b933      	cbnz	r3, 8008496 <_vfiprintf_r+0x762>
 8008488:	f01a 0f01 	tst.w	sl, #1
 800848c:	d003      	beq.n	8008496 <_vfiprintf_r+0x762>
 800848e:	2330      	movs	r3, #48	; 0x30
 8008490:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8008494:	e79f      	b.n	80083d6 <_vfiprintf_r+0x6a2>
 8008496:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800849a:	e0d7      	b.n	800864c <_vfiprintf_r+0x918>
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80a3 	beq.w	80085e8 <_vfiprintf_r+0x8b4>
 80084a2:	2100      	movs	r1, #0
 80084a4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80084a8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80084ac:	46a3      	mov	fp, r4
 80084ae:	e5da      	b.n	8008066 <_vfiprintf_r+0x332>
 80084b0:	4605      	mov	r5, r0
 80084b2:	e68c      	b.n	80081ce <_vfiprintf_r+0x49a>
 80084b4:	08009fda 	.word	0x08009fda
 80084b8:	08009fea 	.word	0x08009fea
 80084bc:	08009d8d 	.word	0x08009d8d
 80084c0:	2010      	movs	r0, #16
 80084c2:	4402      	add	r2, r0
 80084c4:	2b07      	cmp	r3, #7
 80084c6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80084ca:	6070      	str	r0, [r6, #4]
 80084cc:	dd07      	ble.n	80084de <_vfiprintf_r+0x7aa>
 80084ce:	aa0c      	add	r2, sp, #48	; 0x30
 80084d0:	4639      	mov	r1, r7
 80084d2:	4648      	mov	r0, r9
 80084d4:	f7ff fbfc 	bl	8007cd0 <__sprint_r>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d164      	bne.n	80085a6 <_vfiprintf_r+0x872>
 80084dc:	a90f      	add	r1, sp, #60	; 0x3c
 80084de:	3c10      	subs	r4, #16
 80084e0:	460e      	mov	r6, r1
 80084e2:	e68f      	b.n	8008204 <_vfiprintf_r+0x4d0>
 80084e4:	460e      	mov	r6, r1
 80084e6:	e6a8      	b.n	800823a <_vfiprintf_r+0x506>
 80084e8:	aa0c      	add	r2, sp, #48	; 0x30
 80084ea:	4639      	mov	r1, r7
 80084ec:	4648      	mov	r0, r9
 80084ee:	f7ff fbef 	bl	8007cd0 <__sprint_r>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d157      	bne.n	80085a6 <_vfiprintf_r+0x872>
 80084f6:	ae0f      	add	r6, sp, #60	; 0x3c
 80084f8:	e6b1      	b.n	800825e <_vfiprintf_r+0x52a>
 80084fa:	aa0c      	add	r2, sp, #48	; 0x30
 80084fc:	4639      	mov	r1, r7
 80084fe:	4648      	mov	r0, r9
 8008500:	f7ff fbe6 	bl	8007cd0 <__sprint_r>
 8008504:	2800      	cmp	r0, #0
 8008506:	d14e      	bne.n	80085a6 <_vfiprintf_r+0x872>
 8008508:	ae0f      	add	r6, sp, #60	; 0x3c
 800850a:	e6b8      	b.n	800827e <_vfiprintf_r+0x54a>
 800850c:	2010      	movs	r0, #16
 800850e:	4402      	add	r2, r0
 8008510:	2b07      	cmp	r3, #7
 8008512:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8008516:	6070      	str	r0, [r6, #4]
 8008518:	dd07      	ble.n	800852a <_vfiprintf_r+0x7f6>
 800851a:	aa0c      	add	r2, sp, #48	; 0x30
 800851c:	4639      	mov	r1, r7
 800851e:	4648      	mov	r0, r9
 8008520:	f7ff fbd6 	bl	8007cd0 <__sprint_r>
 8008524:	2800      	cmp	r0, #0
 8008526:	d13e      	bne.n	80085a6 <_vfiprintf_r+0x872>
 8008528:	a90f      	add	r1, sp, #60	; 0x3c
 800852a:	3c10      	subs	r4, #16
 800852c:	460e      	mov	r6, r1
 800852e:	e6ae      	b.n	800828e <_vfiprintf_r+0x55a>
 8008530:	460e      	mov	r6, r1
 8008532:	e6c7      	b.n	80082c4 <_vfiprintf_r+0x590>
 8008534:	2010      	movs	r0, #16
 8008536:	4401      	add	r1, r0
 8008538:	2b07      	cmp	r3, #7
 800853a:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800853e:	6070      	str	r0, [r6, #4]
 8008540:	dd06      	ble.n	8008550 <_vfiprintf_r+0x81c>
 8008542:	aa0c      	add	r2, sp, #48	; 0x30
 8008544:	4639      	mov	r1, r7
 8008546:	4648      	mov	r0, r9
 8008548:	f7ff fbc2 	bl	8007cd0 <__sprint_r>
 800854c:	bb58      	cbnz	r0, 80085a6 <_vfiprintf_r+0x872>
 800854e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008550:	3c10      	subs	r4, #16
 8008552:	4616      	mov	r6, r2
 8008554:	e6bb      	b.n	80082ce <_vfiprintf_r+0x59a>
 8008556:	4616      	mov	r6, r2
 8008558:	e6d3      	b.n	8008302 <_vfiprintf_r+0x5ce>
 800855a:	aa0c      	add	r2, sp, #48	; 0x30
 800855c:	4639      	mov	r1, r7
 800855e:	4648      	mov	r0, r9
 8008560:	f7ff fbb6 	bl	8007cd0 <__sprint_r>
 8008564:	b9f8      	cbnz	r0, 80085a6 <_vfiprintf_r+0x872>
 8008566:	ab0f      	add	r3, sp, #60	; 0x3c
 8008568:	e6da      	b.n	8008320 <_vfiprintf_r+0x5ec>
 800856a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800856e:	1a54      	subs	r4, r2, r1
 8008570:	2c00      	cmp	r4, #0
 8008572:	f77f aed9 	ble.w	8008328 <_vfiprintf_r+0x5f4>
 8008576:	4d39      	ldr	r5, [pc, #228]	; (800865c <_vfiprintf_r+0x928>)
 8008578:	2610      	movs	r6, #16
 800857a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800857e:	2c10      	cmp	r4, #16
 8008580:	f102 0201 	add.w	r2, r2, #1
 8008584:	601d      	str	r5, [r3, #0]
 8008586:	dc1d      	bgt.n	80085c4 <_vfiprintf_r+0x890>
 8008588:	605c      	str	r4, [r3, #4]
 800858a:	2a07      	cmp	r2, #7
 800858c:	440c      	add	r4, r1
 800858e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8008592:	f77f aec9 	ble.w	8008328 <_vfiprintf_r+0x5f4>
 8008596:	aa0c      	add	r2, sp, #48	; 0x30
 8008598:	4639      	mov	r1, r7
 800859a:	4648      	mov	r0, r9
 800859c:	f7ff fb98 	bl	8007cd0 <__sprint_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f43f aec1 	beq.w	8008328 <_vfiprintf_r+0x5f4>
 80085a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085a8:	07d9      	lsls	r1, r3, #31
 80085aa:	d405      	bmi.n	80085b8 <_vfiprintf_r+0x884>
 80085ac:	89bb      	ldrh	r3, [r7, #12]
 80085ae:	059a      	lsls	r2, r3, #22
 80085b0:	d402      	bmi.n	80085b8 <_vfiprintf_r+0x884>
 80085b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80085b4:	f7fe fa9d 	bl	8006af2 <__retarget_lock_release_recursive>
 80085b8:	89bb      	ldrh	r3, [r7, #12]
 80085ba:	065b      	lsls	r3, r3, #25
 80085bc:	f57f abed 	bpl.w	8007d9a <_vfiprintf_r+0x66>
 80085c0:	f7ff bbe8 	b.w	8007d94 <_vfiprintf_r+0x60>
 80085c4:	3110      	adds	r1, #16
 80085c6:	2a07      	cmp	r2, #7
 80085c8:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80085cc:	605e      	str	r6, [r3, #4]
 80085ce:	dc02      	bgt.n	80085d6 <_vfiprintf_r+0x8a2>
 80085d0:	3308      	adds	r3, #8
 80085d2:	3c10      	subs	r4, #16
 80085d4:	e7d1      	b.n	800857a <_vfiprintf_r+0x846>
 80085d6:	aa0c      	add	r2, sp, #48	; 0x30
 80085d8:	4639      	mov	r1, r7
 80085da:	4648      	mov	r0, r9
 80085dc:	f7ff fb78 	bl	8007cd0 <__sprint_r>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1e0      	bne.n	80085a6 <_vfiprintf_r+0x872>
 80085e4:	ab0f      	add	r3, sp, #60	; 0x3c
 80085e6:	e7f4      	b.n	80085d2 <_vfiprintf_r+0x89e>
 80085e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ea:	b913      	cbnz	r3, 80085f2 <_vfiprintf_r+0x8be>
 80085ec:	2300      	movs	r3, #0
 80085ee:	930d      	str	r3, [sp, #52]	; 0x34
 80085f0:	e7d9      	b.n	80085a6 <_vfiprintf_r+0x872>
 80085f2:	aa0c      	add	r2, sp, #48	; 0x30
 80085f4:	4639      	mov	r1, r7
 80085f6:	4648      	mov	r0, r9
 80085f8:	f7ff fb6a 	bl	8007cd0 <__sprint_r>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d0f5      	beq.n	80085ec <_vfiprintf_r+0x8b8>
 8008600:	e7d1      	b.n	80085a6 <_vfiprintf_r+0x872>
 8008602:	ea54 0205 	orrs.w	r2, r4, r5
 8008606:	f8cd a010 	str.w	sl, [sp, #16]
 800860a:	f43f ada3 	beq.w	8008154 <_vfiprintf_r+0x420>
 800860e:	2b01      	cmp	r3, #1
 8008610:	f43f aeda 	beq.w	80083c8 <_vfiprintf_r+0x694>
 8008614:	2b02      	cmp	r3, #2
 8008616:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800861a:	f43f af26 	beq.w	800846a <_vfiprintf_r+0x736>
 800861e:	f004 0307 	and.w	r3, r4, #7
 8008622:	08e4      	lsrs	r4, r4, #3
 8008624:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8008628:	08ed      	lsrs	r5, r5, #3
 800862a:	3330      	adds	r3, #48	; 0x30
 800862c:	ea54 0105 	orrs.w	r1, r4, r5
 8008630:	4642      	mov	r2, r8
 8008632:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008636:	d1f2      	bne.n	800861e <_vfiprintf_r+0x8ea>
 8008638:	9904      	ldr	r1, [sp, #16]
 800863a:	07c8      	lsls	r0, r1, #31
 800863c:	d506      	bpl.n	800864c <_vfiprintf_r+0x918>
 800863e:	2b30      	cmp	r3, #48	; 0x30
 8008640:	d004      	beq.n	800864c <_vfiprintf_r+0x918>
 8008642:	2330      	movs	r3, #48	; 0x30
 8008644:	f808 3c01 	strb.w	r3, [r8, #-1]
 8008648:	f1a2 0802 	sub.w	r8, r2, #2
 800864c:	ab38      	add	r3, sp, #224	; 0xe0
 800864e:	eba3 0308 	sub.w	r3, r3, r8
 8008652:	9d00      	ldr	r5, [sp, #0]
 8008654:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	e5b8      	b.n	80081ce <_vfiprintf_r+0x49a>
 800865c:	08009fda 	.word	0x08009fda

08008660 <__sbprintf>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	8989      	ldrh	r1, [r1, #12]
 8008666:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800866a:	f021 0102 	bic.w	r1, r1, #2
 800866e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008672:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008674:	911b      	str	r1, [sp, #108]	; 0x6c
 8008676:	89e1      	ldrh	r1, [r4, #14]
 8008678:	f8ad 1016 	strh.w	r1, [sp, #22]
 800867c:	69e1      	ldr	r1, [r4, #28]
 800867e:	9109      	str	r1, [sp, #36]	; 0x24
 8008680:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008682:	910b      	str	r1, [sp, #44]	; 0x2c
 8008684:	a91c      	add	r1, sp, #112	; 0x70
 8008686:	9102      	str	r1, [sp, #8]
 8008688:	9106      	str	r1, [sp, #24]
 800868a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800868e:	4606      	mov	r6, r0
 8008690:	9104      	str	r1, [sp, #16]
 8008692:	9107      	str	r1, [sp, #28]
 8008694:	a818      	add	r0, sp, #96	; 0x60
 8008696:	2100      	movs	r1, #0
 8008698:	e9cd 3200 	strd	r3, r2, [sp]
 800869c:	9108      	str	r1, [sp, #32]
 800869e:	f7fe fa25 	bl	8006aec <__retarget_lock_init_recursive>
 80086a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086a6:	a902      	add	r1, sp, #8
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff fb43 	bl	8007d34 <_vfiprintf_r>
 80086ae:	1e05      	subs	r5, r0, #0
 80086b0:	db07      	blt.n	80086c2 <__sbprintf+0x62>
 80086b2:	a902      	add	r1, sp, #8
 80086b4:	4630      	mov	r0, r6
 80086b6:	f000 f90f 	bl	80088d8 <_fflush_r>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	bf18      	it	ne
 80086be:	f04f 35ff 	movne.w	r5, #4294967295
 80086c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80086c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80086c8:	065b      	lsls	r3, r3, #25
 80086ca:	bf42      	ittt	mi
 80086cc:	89a3      	ldrhmi	r3, [r4, #12]
 80086ce:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80086d2:	81a3      	strhmi	r3, [r4, #12]
 80086d4:	f7fe fa0b 	bl	8006aee <__retarget_lock_close_recursive>
 80086d8:	4628      	mov	r0, r5
 80086da:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80086de:	bd70      	pop	{r4, r5, r6, pc}

080086e0 <__ascii_wctomb>:
 80086e0:	b149      	cbz	r1, 80086f6 <__ascii_wctomb+0x16>
 80086e2:	2aff      	cmp	r2, #255	; 0xff
 80086e4:	bf85      	ittet	hi
 80086e6:	238a      	movhi	r3, #138	; 0x8a
 80086e8:	6003      	strhi	r3, [r0, #0]
 80086ea:	700a      	strbls	r2, [r1, #0]
 80086ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80086f0:	bf98      	it	ls
 80086f2:	2001      	movls	r0, #1
 80086f4:	4770      	bx	lr
 80086f6:	4608      	mov	r0, r1
 80086f8:	4770      	bx	lr
	...

080086fc <__swsetup_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4b2a      	ldr	r3, [pc, #168]	; (80087a8 <__swsetup_r+0xac>)
 8008700:	4605      	mov	r5, r0
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	460c      	mov	r4, r1
 8008706:	b118      	cbz	r0, 8008710 <__swsetup_r+0x14>
 8008708:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800870a:	b90b      	cbnz	r3, 8008710 <__swsetup_r+0x14>
 800870c:	f000 f950 	bl	80089b0 <__sinit>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008716:	0718      	lsls	r0, r3, #28
 8008718:	d422      	bmi.n	8008760 <__swsetup_r+0x64>
 800871a:	06d9      	lsls	r1, r3, #27
 800871c:	d407      	bmi.n	800872e <__swsetup_r+0x32>
 800871e:	2309      	movs	r3, #9
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	e034      	b.n	8008798 <__swsetup_r+0x9c>
 800872e:	0758      	lsls	r0, r3, #29
 8008730:	d512      	bpl.n	8008758 <__swsetup_r+0x5c>
 8008732:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008734:	b141      	cbz	r1, 8008748 <__swsetup_r+0x4c>
 8008736:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800873a:	4299      	cmp	r1, r3
 800873c:	d002      	beq.n	8008744 <__swsetup_r+0x48>
 800873e:	4628      	mov	r0, r5
 8008740:	f7fe f910 	bl	8006964 <_free_r>
 8008744:	2300      	movs	r3, #0
 8008746:	6323      	str	r3, [r4, #48]	; 0x30
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	2300      	movs	r3, #0
 8008752:	6063      	str	r3, [r4, #4]
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f043 0308 	orr.w	r3, r3, #8
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	b94b      	cbnz	r3, 8008778 <__swsetup_r+0x7c>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800876a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876e:	d003      	beq.n	8008778 <__swsetup_r+0x7c>
 8008770:	4621      	mov	r1, r4
 8008772:	4628      	mov	r0, r5
 8008774:	f000 fb46 	bl	8008e04 <__smakebuf_r>
 8008778:	89a0      	ldrh	r0, [r4, #12]
 800877a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800877e:	f010 0301 	ands.w	r3, r0, #1
 8008782:	d00a      	beq.n	800879a <__swsetup_r+0x9e>
 8008784:	2300      	movs	r3, #0
 8008786:	60a3      	str	r3, [r4, #8]
 8008788:	6963      	ldr	r3, [r4, #20]
 800878a:	425b      	negs	r3, r3
 800878c:	61a3      	str	r3, [r4, #24]
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	b943      	cbnz	r3, 80087a4 <__swsetup_r+0xa8>
 8008792:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008796:	d1c4      	bne.n	8008722 <__swsetup_r+0x26>
 8008798:	bd38      	pop	{r3, r4, r5, pc}
 800879a:	0781      	lsls	r1, r0, #30
 800879c:	bf58      	it	pl
 800879e:	6963      	ldrpl	r3, [r4, #20]
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	e7f4      	b.n	800878e <__swsetup_r+0x92>
 80087a4:	2000      	movs	r0, #0
 80087a6:	e7f7      	b.n	8008798 <__swsetup_r+0x9c>
 80087a8:	2000006c 	.word	0x2000006c

080087ac <abort>:
 80087ac:	b508      	push	{r3, lr}
 80087ae:	2006      	movs	r0, #6
 80087b0:	f000 fb92 	bl	8008ed8 <raise>
 80087b4:	2001      	movs	r0, #1
 80087b6:	f7f9 fa61 	bl	8001c7c <_exit>
	...

080087bc <__sflush_r>:
 80087bc:	898b      	ldrh	r3, [r1, #12]
 80087be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	4605      	mov	r5, r0
 80087c8:	0718      	lsls	r0, r3, #28
 80087ca:	460c      	mov	r4, r1
 80087cc:	d45f      	bmi.n	800888e <__sflush_r+0xd2>
 80087ce:	684b      	ldr	r3, [r1, #4]
 80087d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	818a      	strh	r2, [r1, #12]
 80087d8:	dc05      	bgt.n	80087e6 <__sflush_r+0x2a>
 80087da:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dc02      	bgt.n	80087e6 <__sflush_r+0x2a>
 80087e0:	2000      	movs	r0, #0
 80087e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	d0f9      	beq.n	80087e0 <__sflush_r+0x24>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087f2:	682f      	ldr	r7, [r5, #0]
 80087f4:	602b      	str	r3, [r5, #0]
 80087f6:	d036      	beq.n	8008866 <__sflush_r+0xaa>
 80087f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	075a      	lsls	r2, r3, #29
 80087fe:	d505      	bpl.n	800880c <__sflush_r+0x50>
 8008800:	6863      	ldr	r3, [r4, #4]
 8008802:	1ac0      	subs	r0, r0, r3
 8008804:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008806:	b10b      	cbz	r3, 800880c <__sflush_r+0x50>
 8008808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800880a:	1ac0      	subs	r0, r0, r3
 800880c:	2300      	movs	r3, #0
 800880e:	4602      	mov	r2, r0
 8008810:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008812:	69e1      	ldr	r1, [r4, #28]
 8008814:	4628      	mov	r0, r5
 8008816:	47b0      	blx	r6
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	d106      	bne.n	800882c <__sflush_r+0x70>
 800881e:	6829      	ldr	r1, [r5, #0]
 8008820:	291d      	cmp	r1, #29
 8008822:	d830      	bhi.n	8008886 <__sflush_r+0xca>
 8008824:	4a2b      	ldr	r2, [pc, #172]	; (80088d4 <__sflush_r+0x118>)
 8008826:	40ca      	lsrs	r2, r1
 8008828:	07d6      	lsls	r6, r2, #31
 800882a:	d52c      	bpl.n	8008886 <__sflush_r+0xca>
 800882c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008830:	b21b      	sxth	r3, r3
 8008832:	2200      	movs	r2, #0
 8008834:	6062      	str	r2, [r4, #4]
 8008836:	04d9      	lsls	r1, r3, #19
 8008838:	6922      	ldr	r2, [r4, #16]
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	6022      	str	r2, [r4, #0]
 800883e:	d504      	bpl.n	800884a <__sflush_r+0x8e>
 8008840:	1c42      	adds	r2, r0, #1
 8008842:	d101      	bne.n	8008848 <__sflush_r+0x8c>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b903      	cbnz	r3, 800884a <__sflush_r+0x8e>
 8008848:	6520      	str	r0, [r4, #80]	; 0x50
 800884a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800884c:	602f      	str	r7, [r5, #0]
 800884e:	2900      	cmp	r1, #0
 8008850:	d0c6      	beq.n	80087e0 <__sflush_r+0x24>
 8008852:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008856:	4299      	cmp	r1, r3
 8008858:	d002      	beq.n	8008860 <__sflush_r+0xa4>
 800885a:	4628      	mov	r0, r5
 800885c:	f7fe f882 	bl	8006964 <_free_r>
 8008860:	2000      	movs	r0, #0
 8008862:	6320      	str	r0, [r4, #48]	; 0x30
 8008864:	e7bd      	b.n	80087e2 <__sflush_r+0x26>
 8008866:	69e1      	ldr	r1, [r4, #28]
 8008868:	2301      	movs	r3, #1
 800886a:	4628      	mov	r0, r5
 800886c:	47b0      	blx	r6
 800886e:	1c41      	adds	r1, r0, #1
 8008870:	d1c3      	bne.n	80087fa <__sflush_r+0x3e>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0c0      	beq.n	80087fa <__sflush_r+0x3e>
 8008878:	2b1d      	cmp	r3, #29
 800887a:	d001      	beq.n	8008880 <__sflush_r+0xc4>
 800887c:	2b16      	cmp	r3, #22
 800887e:	d101      	bne.n	8008884 <__sflush_r+0xc8>
 8008880:	602f      	str	r7, [r5, #0]
 8008882:	e7ad      	b.n	80087e0 <__sflush_r+0x24>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	e7a9      	b.n	80087e2 <__sflush_r+0x26>
 800888e:	690f      	ldr	r7, [r1, #16]
 8008890:	2f00      	cmp	r7, #0
 8008892:	d0a5      	beq.n	80087e0 <__sflush_r+0x24>
 8008894:	079b      	lsls	r3, r3, #30
 8008896:	680e      	ldr	r6, [r1, #0]
 8008898:	bf08      	it	eq
 800889a:	694b      	ldreq	r3, [r1, #20]
 800889c:	600f      	str	r7, [r1, #0]
 800889e:	bf18      	it	ne
 80088a0:	2300      	movne	r3, #0
 80088a2:	eba6 0807 	sub.w	r8, r6, r7
 80088a6:	608b      	str	r3, [r1, #8]
 80088a8:	f1b8 0f00 	cmp.w	r8, #0
 80088ac:	dd98      	ble.n	80087e0 <__sflush_r+0x24>
 80088ae:	69e1      	ldr	r1, [r4, #28]
 80088b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088b2:	4643      	mov	r3, r8
 80088b4:	463a      	mov	r2, r7
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b0      	blx	r6
 80088ba:	2800      	cmp	r0, #0
 80088bc:	dc06      	bgt.n	80088cc <__sflush_r+0x110>
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ca:	e78a      	b.n	80087e2 <__sflush_r+0x26>
 80088cc:	4407      	add	r7, r0
 80088ce:	eba8 0800 	sub.w	r8, r8, r0
 80088d2:	e7e9      	b.n	80088a8 <__sflush_r+0xec>
 80088d4:	20400001 	.word	0x20400001

080088d8 <_fflush_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	460c      	mov	r4, r1
 80088dc:	4605      	mov	r5, r0
 80088de:	b118      	cbz	r0, 80088e8 <_fflush_r+0x10>
 80088e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80088e2:	b90b      	cbnz	r3, 80088e8 <_fflush_r+0x10>
 80088e4:	f000 f864 	bl	80089b0 <__sinit>
 80088e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ec:	b1bb      	cbz	r3, 800891e <_fflush_r+0x46>
 80088ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f0:	07d0      	lsls	r0, r2, #31
 80088f2:	d404      	bmi.n	80088fe <_fflush_r+0x26>
 80088f4:	0599      	lsls	r1, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_fflush_r+0x26>
 80088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fa:	f7fe f8f9 	bl	8006af0 <__retarget_lock_acquire_recursive>
 80088fe:	4628      	mov	r0, r5
 8008900:	4621      	mov	r1, r4
 8008902:	f7ff ff5b 	bl	80087bc <__sflush_r>
 8008906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008908:	07da      	lsls	r2, r3, #31
 800890a:	4605      	mov	r5, r0
 800890c:	d405      	bmi.n	800891a <_fflush_r+0x42>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	059b      	lsls	r3, r3, #22
 8008912:	d402      	bmi.n	800891a <_fflush_r+0x42>
 8008914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008916:	f7fe f8ec 	bl	8006af2 <__retarget_lock_release_recursive>
 800891a:	4628      	mov	r0, r5
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	461d      	mov	r5, r3
 8008920:	e7fb      	b.n	800891a <_fflush_r+0x42>
	...

08008924 <std>:
 8008924:	2300      	movs	r3, #0
 8008926:	b510      	push	{r4, lr}
 8008928:	4604      	mov	r4, r0
 800892a:	e9c0 3300 	strd	r3, r3, [r0]
 800892e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008932:	6083      	str	r3, [r0, #8]
 8008934:	8181      	strh	r1, [r0, #12]
 8008936:	6643      	str	r3, [r0, #100]	; 0x64
 8008938:	81c2      	strh	r2, [r0, #14]
 800893a:	6183      	str	r3, [r0, #24]
 800893c:	4619      	mov	r1, r3
 800893e:	2208      	movs	r2, #8
 8008940:	305c      	adds	r0, #92	; 0x5c
 8008942:	f7fb ff29 	bl	8004798 <memset>
 8008946:	4b07      	ldr	r3, [pc, #28]	; (8008964 <std+0x40>)
 8008948:	6223      	str	r3, [r4, #32]
 800894a:	4b07      	ldr	r3, [pc, #28]	; (8008968 <std+0x44>)
 800894c:	6263      	str	r3, [r4, #36]	; 0x24
 800894e:	4b07      	ldr	r3, [pc, #28]	; (800896c <std+0x48>)
 8008950:	62a3      	str	r3, [r4, #40]	; 0x28
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <std+0x4c>)
 8008954:	61e4      	str	r4, [r4, #28]
 8008956:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008958:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800895c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008960:	f7fe b8c4 	b.w	8006aec <__retarget_lock_init_recursive>
 8008964:	08008f11 	.word	0x08008f11
 8008968:	08008f33 	.word	0x08008f33
 800896c:	08008f6b 	.word	0x08008f6b
 8008970:	08008f8f 	.word	0x08008f8f

08008974 <_cleanup_r>:
 8008974:	4901      	ldr	r1, [pc, #4]	; (800897c <_cleanup_r+0x8>)
 8008976:	f000 b9f9 	b.w	8008d6c <_fwalk_reent>
 800897a:	bf00      	nop
 800897c:	08009099 	.word	0x08009099

08008980 <__sfp_lock_acquire>:
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <__sfp_lock_acquire+0x8>)
 8008982:	f7fe b8b5 	b.w	8006af0 <__retarget_lock_acquire_recursive>
 8008986:	bf00      	nop
 8008988:	20000ec6 	.word	0x20000ec6

0800898c <__sfp_lock_release>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__sfp_lock_release+0x8>)
 800898e:	f7fe b8b0 	b.w	8006af2 <__retarget_lock_release_recursive>
 8008992:	bf00      	nop
 8008994:	20000ec6 	.word	0x20000ec6

08008998 <__sinit_lock_acquire>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__sinit_lock_acquire+0x8>)
 800899a:	f7fe b8a9 	b.w	8006af0 <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	20000ec7 	.word	0x20000ec7

080089a4 <__sinit_lock_release>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__sinit_lock_release+0x8>)
 80089a6:	f7fe b8a4 	b.w	8006af2 <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	20000ec7 	.word	0x20000ec7

080089b0 <__sinit>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	4604      	mov	r4, r0
 80089b4:	f7ff fff0 	bl	8008998 <__sinit_lock_acquire>
 80089b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089ba:	b11a      	cbz	r2, 80089c4 <__sinit+0x14>
 80089bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c0:	f7ff bff0 	b.w	80089a4 <__sinit_lock_release>
 80089c4:	4b0d      	ldr	r3, [pc, #52]	; (80089fc <__sinit+0x4c>)
 80089c6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80089c8:	2303      	movs	r3, #3
 80089ca:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80089ce:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80089d2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80089d6:	6860      	ldr	r0, [r4, #4]
 80089d8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80089dc:	2104      	movs	r1, #4
 80089de:	f7ff ffa1 	bl	8008924 <std>
 80089e2:	68a0      	ldr	r0, [r4, #8]
 80089e4:	2201      	movs	r2, #1
 80089e6:	2109      	movs	r1, #9
 80089e8:	f7ff ff9c 	bl	8008924 <std>
 80089ec:	68e0      	ldr	r0, [r4, #12]
 80089ee:	2202      	movs	r2, #2
 80089f0:	2112      	movs	r1, #18
 80089f2:	f7ff ff97 	bl	8008924 <std>
 80089f6:	2301      	movs	r3, #1
 80089f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80089fa:	e7df      	b.n	80089bc <__sinit+0xc>
 80089fc:	08008975 	.word	0x08008975

08008a00 <__fputwc>:
 8008a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	4680      	mov	r8, r0
 8008a06:	460e      	mov	r6, r1
 8008a08:	4615      	mov	r5, r2
 8008a0a:	f7fe ff8b 	bl	8007924 <__locale_mb_cur_max>
 8008a0e:	2801      	cmp	r0, #1
 8008a10:	d11c      	bne.n	8008a4c <__fputwc+0x4c>
 8008a12:	1e73      	subs	r3, r6, #1
 8008a14:	2bfe      	cmp	r3, #254	; 0xfe
 8008a16:	d819      	bhi.n	8008a4c <__fputwc+0x4c>
 8008a18:	f88d 6004 	strb.w	r6, [sp, #4]
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	2700      	movs	r7, #0
 8008a20:	f10d 0904 	add.w	r9, sp, #4
 8008a24:	42a7      	cmp	r7, r4
 8008a26:	d020      	beq.n	8008a6a <__fputwc+0x6a>
 8008a28:	68ab      	ldr	r3, [r5, #8]
 8008a2a:	f817 1009 	ldrb.w	r1, [r7, r9]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	60ab      	str	r3, [r5, #8]
 8008a34:	da04      	bge.n	8008a40 <__fputwc+0x40>
 8008a36:	69aa      	ldr	r2, [r5, #24]
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	db1a      	blt.n	8008a72 <__fputwc+0x72>
 8008a3c:	290a      	cmp	r1, #10
 8008a3e:	d018      	beq.n	8008a72 <__fputwc+0x72>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	602a      	str	r2, [r5, #0]
 8008a46:	7019      	strb	r1, [r3, #0]
 8008a48:	3701      	adds	r7, #1
 8008a4a:	e7eb      	b.n	8008a24 <__fputwc+0x24>
 8008a4c:	a901      	add	r1, sp, #4
 8008a4e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8008a52:	4632      	mov	r2, r6
 8008a54:	4640      	mov	r0, r8
 8008a56:	f000 fae7 	bl	8009028 <_wcrtomb_r>
 8008a5a:	1c41      	adds	r1, r0, #1
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	d1de      	bne.n	8008a1e <__fputwc+0x1e>
 8008a60:	89ab      	ldrh	r3, [r5, #12]
 8008a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a66:	81ab      	strh	r3, [r5, #12]
 8008a68:	4606      	mov	r6, r0
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	b003      	add	sp, #12
 8008a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a72:	462a      	mov	r2, r5
 8008a74:	4640      	mov	r0, r8
 8008a76:	f000 fa8e 	bl	8008f96 <__swbuf_r>
 8008a7a:	1c42      	adds	r2, r0, #1
 8008a7c:	d1e4      	bne.n	8008a48 <__fputwc+0x48>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	e7f3      	b.n	8008a6a <__fputwc+0x6a>

08008a82 <_fputwc_r>:
 8008a82:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a86:	4614      	mov	r4, r2
 8008a88:	07da      	lsls	r2, r3, #31
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	d407      	bmi.n	8008a9e <_fputwc_r+0x1c>
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	059b      	lsls	r3, r3, #22
 8008a92:	d404      	bmi.n	8008a9e <_fputwc_r+0x1c>
 8008a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a96:	9101      	str	r1, [sp, #4]
 8008a98:	f7fe f82a 	bl	8006af0 <__retarget_lock_acquire_recursive>
 8008a9c:	9901      	ldr	r1, [sp, #4]
 8008a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa2:	0498      	lsls	r0, r3, #18
 8008aa4:	d406      	bmi.n	8008ab4 <_fputwc_r+0x32>
 8008aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ab2:	6663      	str	r3, [r4, #100]	; 0x64
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f7ff ffa2 	bl	8008a00 <__fputwc>
 8008abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008abe:	07da      	lsls	r2, r3, #31
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	d405      	bmi.n	8008ad0 <_fputwc_r+0x4e>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	059b      	lsls	r3, r3, #22
 8008ac8:	d402      	bmi.n	8008ad0 <_fputwc_r+0x4e>
 8008aca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008acc:	f7fe f811 	bl	8006af2 <__retarget_lock_release_recursive>
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	b003      	add	sp, #12
 8008ad4:	bd30      	pop	{r4, r5, pc}
	...

08008ad8 <__sfvwrite_r>:
 8008ad8:	6893      	ldr	r3, [r2, #8]
 8008ada:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	4690      	mov	r8, r2
 8008ae4:	b91b      	cbnz	r3, 8008aee <__sfvwrite_r+0x16>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	b003      	add	sp, #12
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aee:	898b      	ldrh	r3, [r1, #12]
 8008af0:	0718      	lsls	r0, r3, #28
 8008af2:	d550      	bpl.n	8008b96 <__sfvwrite_r+0xbe>
 8008af4:	690b      	ldr	r3, [r1, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d04d      	beq.n	8008b96 <__sfvwrite_r+0xbe>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	f8d8 7000 	ldr.w	r7, [r8]
 8008b00:	f013 0902 	ands.w	r9, r3, #2
 8008b04:	d16c      	bne.n	8008be0 <__sfvwrite_r+0x108>
 8008b06:	f013 0301 	ands.w	r3, r3, #1
 8008b0a:	f000 809c 	beq.w	8008c46 <__sfvwrite_r+0x16e>
 8008b0e:	4648      	mov	r0, r9
 8008b10:	46ca      	mov	sl, r9
 8008b12:	46cb      	mov	fp, r9
 8008b14:	f1bb 0f00 	cmp.w	fp, #0
 8008b18:	f000 8103 	beq.w	8008d22 <__sfvwrite_r+0x24a>
 8008b1c:	b950      	cbnz	r0, 8008b34 <__sfvwrite_r+0x5c>
 8008b1e:	465a      	mov	r2, fp
 8008b20:	210a      	movs	r1, #10
 8008b22:	4650      	mov	r0, sl
 8008b24:	f7f7 fb5c 	bl	80001e0 <memchr>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f000 80ff 	beq.w	8008d2c <__sfvwrite_r+0x254>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	eba0 090a 	sub.w	r9, r0, sl
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	6921      	ldr	r1, [r4, #16]
 8008b38:	6963      	ldr	r3, [r4, #20]
 8008b3a:	45d9      	cmp	r9, fp
 8008b3c:	464a      	mov	r2, r9
 8008b3e:	bf28      	it	cs
 8008b40:	465a      	movcs	r2, fp
 8008b42:	4288      	cmp	r0, r1
 8008b44:	f240 80f5 	bls.w	8008d32 <__sfvwrite_r+0x25a>
 8008b48:	68a5      	ldr	r5, [r4, #8]
 8008b4a:	441d      	add	r5, r3
 8008b4c:	42aa      	cmp	r2, r5
 8008b4e:	f340 80f0 	ble.w	8008d32 <__sfvwrite_r+0x25a>
 8008b52:	4651      	mov	r1, sl
 8008b54:	462a      	mov	r2, r5
 8008b56:	f7fe fefd 	bl	8007954 <memmove>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	442b      	add	r3, r5
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	4621      	mov	r1, r4
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff feb8 	bl	80088d8 <_fflush_r>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d167      	bne.n	8008c3c <__sfvwrite_r+0x164>
 8008b6c:	ebb9 0905 	subs.w	r9, r9, r5
 8008b70:	f040 80f7 	bne.w	8008d62 <__sfvwrite_r+0x28a>
 8008b74:	4621      	mov	r1, r4
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7ff feae 	bl	80088d8 <_fflush_r>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d15d      	bne.n	8008c3c <__sfvwrite_r+0x164>
 8008b80:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8008b84:	44aa      	add	sl, r5
 8008b86:	ebab 0b05 	sub.w	fp, fp, r5
 8008b8a:	1b55      	subs	r5, r2, r5
 8008b8c:	f8c8 5008 	str.w	r5, [r8, #8]
 8008b90:	2d00      	cmp	r5, #0
 8008b92:	d1bf      	bne.n	8008b14 <__sfvwrite_r+0x3c>
 8008b94:	e7a7      	b.n	8008ae6 <__sfvwrite_r+0xe>
 8008b96:	4621      	mov	r1, r4
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f7ff fdaf 	bl	80086fc <__swsetup_r>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d0ab      	beq.n	8008afa <__sfvwrite_r+0x22>
 8008ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba6:	e79f      	b.n	8008ae8 <__sfvwrite_r+0x10>
 8008ba8:	e9d7 b900 	ldrd	fp, r9, [r7]
 8008bac:	3708      	adds	r7, #8
 8008bae:	f1b9 0f00 	cmp.w	r9, #0
 8008bb2:	d0f9      	beq.n	8008ba8 <__sfvwrite_r+0xd0>
 8008bb4:	45d1      	cmp	r9, sl
 8008bb6:	464b      	mov	r3, r9
 8008bb8:	69e1      	ldr	r1, [r4, #28]
 8008bba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008bbc:	bf28      	it	cs
 8008bbe:	4653      	movcs	r3, sl
 8008bc0:	465a      	mov	r2, fp
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	47a8      	blx	r5
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	dd38      	ble.n	8008c3c <__sfvwrite_r+0x164>
 8008bca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bce:	4483      	add	fp, r0
 8008bd0:	eba9 0900 	sub.w	r9, r9, r0
 8008bd4:	1a18      	subs	r0, r3, r0
 8008bd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d1e7      	bne.n	8008bae <__sfvwrite_r+0xd6>
 8008bde:	e782      	b.n	8008ae6 <__sfvwrite_r+0xe>
 8008be0:	f04f 0b00 	mov.w	fp, #0
 8008be4:	f8df a180 	ldr.w	sl, [pc, #384]	; 8008d68 <__sfvwrite_r+0x290>
 8008be8:	46d9      	mov	r9, fp
 8008bea:	e7e0      	b.n	8008bae <__sfvwrite_r+0xd6>
 8008bec:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	f1ba 0f00 	cmp.w	sl, #0
 8008bf6:	d0f9      	beq.n	8008bec <__sfvwrite_r+0x114>
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	6820      	ldr	r0, [r4, #0]
 8008bfc:	68a2      	ldr	r2, [r4, #8]
 8008bfe:	0599      	lsls	r1, r3, #22
 8008c00:	d563      	bpl.n	8008cca <__sfvwrite_r+0x1f2>
 8008c02:	4552      	cmp	r2, sl
 8008c04:	d836      	bhi.n	8008c74 <__sfvwrite_r+0x19c>
 8008c06:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008c0a:	d033      	beq.n	8008c74 <__sfvwrite_r+0x19c>
 8008c0c:	6921      	ldr	r1, [r4, #16]
 8008c0e:	6965      	ldr	r5, [r4, #20]
 8008c10:	eba0 0b01 	sub.w	fp, r0, r1
 8008c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c1c:	f10b 0201 	add.w	r2, fp, #1
 8008c20:	106d      	asrs	r5, r5, #1
 8008c22:	4452      	add	r2, sl
 8008c24:	4295      	cmp	r5, r2
 8008c26:	bf38      	it	cc
 8008c28:	4615      	movcc	r5, r2
 8008c2a:	055b      	lsls	r3, r3, #21
 8008c2c:	d53d      	bpl.n	8008caa <__sfvwrite_r+0x1d2>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7fd ff5f 	bl	8006af4 <_malloc_r>
 8008c36:	b948      	cbnz	r0, 8008c4c <__sfvwrite_r+0x174>
 8008c38:	230c      	movs	r3, #12
 8008c3a:	6033      	str	r3, [r6, #0]
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	e7ad      	b.n	8008ba2 <__sfvwrite_r+0xca>
 8008c46:	4699      	mov	r9, r3
 8008c48:	469a      	mov	sl, r3
 8008c4a:	e7d2      	b.n	8008bf2 <__sfvwrite_r+0x11a>
 8008c4c:	465a      	mov	r2, fp
 8008c4e:	6921      	ldr	r1, [r4, #16]
 8008c50:	9001      	str	r0, [sp, #4]
 8008c52:	f7fe f98b 	bl	8006f6c <memcpy>
 8008c56:	89a2      	ldrh	r2, [r4, #12]
 8008c58:	9b01      	ldr	r3, [sp, #4]
 8008c5a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c62:	81a2      	strh	r2, [r4, #12]
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	6165      	str	r5, [r4, #20]
 8008c68:	445b      	add	r3, fp
 8008c6a:	eba5 050b 	sub.w	r5, r5, fp
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	4652      	mov	r2, sl
 8008c72:	60a5      	str	r5, [r4, #8]
 8008c74:	4552      	cmp	r2, sl
 8008c76:	bf28      	it	cs
 8008c78:	4652      	movcs	r2, sl
 8008c7a:	6820      	ldr	r0, [r4, #0]
 8008c7c:	9201      	str	r2, [sp, #4]
 8008c7e:	4649      	mov	r1, r9
 8008c80:	f7fe fe68 	bl	8007954 <memmove>
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	9a01      	ldr	r2, [sp, #4]
 8008c88:	1a9b      	subs	r3, r3, r2
 8008c8a:	60a3      	str	r3, [r4, #8]
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	441a      	add	r2, r3
 8008c90:	4655      	mov	r5, sl
 8008c92:	6022      	str	r2, [r4, #0]
 8008c94:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8008c98:	44a9      	add	r9, r5
 8008c9a:	ebaa 0a05 	sub.w	sl, sl, r5
 8008c9e:	1b45      	subs	r5, r0, r5
 8008ca0:	f8c8 5008 	str.w	r5, [r8, #8]
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	d1a4      	bne.n	8008bf2 <__sfvwrite_r+0x11a>
 8008ca8:	e71d      	b.n	8008ae6 <__sfvwrite_r+0xe>
 8008caa:	462a      	mov	r2, r5
 8008cac:	4630      	mov	r0, r6
 8008cae:	f7fe fe6b 	bl	8007988 <_realloc_r>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d1d5      	bne.n	8008c64 <__sfvwrite_r+0x18c>
 8008cb8:	6921      	ldr	r1, [r4, #16]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7fd fe52 	bl	8006964 <_free_r>
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	e7b6      	b.n	8008c38 <__sfvwrite_r+0x160>
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	d302      	bcc.n	8008cd6 <__sfvwrite_r+0x1fe>
 8008cd0:	6961      	ldr	r1, [r4, #20]
 8008cd2:	4551      	cmp	r1, sl
 8008cd4:	d915      	bls.n	8008d02 <__sfvwrite_r+0x22a>
 8008cd6:	4552      	cmp	r2, sl
 8008cd8:	bf28      	it	cs
 8008cda:	4652      	movcs	r2, sl
 8008cdc:	4649      	mov	r1, r9
 8008cde:	4615      	mov	r5, r2
 8008ce0:	f7fe fe38 	bl	8007954 <memmove>
 8008ce4:	68a3      	ldr	r3, [r4, #8]
 8008ce6:	6822      	ldr	r2, [r4, #0]
 8008ce8:	1b5b      	subs	r3, r3, r5
 8008cea:	442a      	add	r2, r5
 8008cec:	60a3      	str	r3, [r4, #8]
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1cf      	bne.n	8008c94 <__sfvwrite_r+0x1bc>
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff fdee 	bl	80088d8 <_fflush_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d0c9      	beq.n	8008c94 <__sfvwrite_r+0x1bc>
 8008d00:	e79c      	b.n	8008c3c <__sfvwrite_r+0x164>
 8008d02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008d06:	459a      	cmp	sl, r3
 8008d08:	bf38      	it	cc
 8008d0a:	4653      	movcc	r3, sl
 8008d0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d0e:	fb93 f3f1 	sdiv	r3, r3, r1
 8008d12:	464a      	mov	r2, r9
 8008d14:	434b      	muls	r3, r1
 8008d16:	4630      	mov	r0, r6
 8008d18:	69e1      	ldr	r1, [r4, #28]
 8008d1a:	47a8      	blx	r5
 8008d1c:	1e05      	subs	r5, r0, #0
 8008d1e:	dcb9      	bgt.n	8008c94 <__sfvwrite_r+0x1bc>
 8008d20:	e78c      	b.n	8008c3c <__sfvwrite_r+0x164>
 8008d22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d26:	2000      	movs	r0, #0
 8008d28:	3708      	adds	r7, #8
 8008d2a:	e6f3      	b.n	8008b14 <__sfvwrite_r+0x3c>
 8008d2c:	f10b 0901 	add.w	r9, fp, #1
 8008d30:	e700      	b.n	8008b34 <__sfvwrite_r+0x5c>
 8008d32:	4293      	cmp	r3, r2
 8008d34:	dc08      	bgt.n	8008d48 <__sfvwrite_r+0x270>
 8008d36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d38:	69e1      	ldr	r1, [r4, #28]
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	47a8      	blx	r5
 8008d40:	1e05      	subs	r5, r0, #0
 8008d42:	f73f af13 	bgt.w	8008b6c <__sfvwrite_r+0x94>
 8008d46:	e779      	b.n	8008c3c <__sfvwrite_r+0x164>
 8008d48:	4651      	mov	r1, sl
 8008d4a:	9201      	str	r2, [sp, #4]
 8008d4c:	f7fe fe02 	bl	8007954 <memmove>
 8008d50:	9a01      	ldr	r2, [sp, #4]
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	60a3      	str	r3, [r4, #8]
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	4615      	mov	r5, r2
 8008d60:	e704      	b.n	8008b6c <__sfvwrite_r+0x94>
 8008d62:	2001      	movs	r0, #1
 8008d64:	e70c      	b.n	8008b80 <__sfvwrite_r+0xa8>
 8008d66:	bf00      	nop
 8008d68:	7ffffc00 	.word	0x7ffffc00

08008d6c <_fwalk_reent>:
 8008d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d70:	4606      	mov	r6, r0
 8008d72:	4688      	mov	r8, r1
 8008d74:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8008d78:	2700      	movs	r7, #0
 8008d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8008d82:	d505      	bpl.n	8008d90 <_fwalk_reent+0x24>
 8008d84:	6824      	ldr	r4, [r4, #0]
 8008d86:	2c00      	cmp	r4, #0
 8008d88:	d1f7      	bne.n	8008d7a <_fwalk_reent+0xe>
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d90:	89ab      	ldrh	r3, [r5, #12]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d907      	bls.n	8008da6 <_fwalk_reent+0x3a>
 8008d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	d003      	beq.n	8008da6 <_fwalk_reent+0x3a>
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4630      	mov	r0, r6
 8008da2:	47c0      	blx	r8
 8008da4:	4307      	orrs	r7, r0
 8008da6:	3568      	adds	r5, #104	; 0x68
 8008da8:	e7e9      	b.n	8008d7e <_fwalk_reent+0x12>

08008daa <__swhatbuf_r>:
 8008daa:	b570      	push	{r4, r5, r6, lr}
 8008dac:	460e      	mov	r6, r1
 8008dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db2:	2900      	cmp	r1, #0
 8008db4:	b096      	sub	sp, #88	; 0x58
 8008db6:	4614      	mov	r4, r2
 8008db8:	461d      	mov	r5, r3
 8008dba:	da0a      	bge.n	8008dd2 <__swhatbuf_r+0x28>
 8008dbc:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8008dc6:	602b      	str	r3, [r5, #0]
 8008dc8:	d116      	bne.n	8008df8 <__swhatbuf_r+0x4e>
 8008dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	e015      	b.n	8008dfe <__swhatbuf_r+0x54>
 8008dd2:	466a      	mov	r2, sp
 8008dd4:	f000 f9b8 	bl	8009148 <_fstat_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	dbef      	blt.n	8008dbc <__swhatbuf_r+0x12>
 8008ddc:	9a01      	ldr	r2, [sp, #4]
 8008dde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008de2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008de6:	425a      	negs	r2, r3
 8008de8:	415a      	adcs	r2, r3
 8008dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dee:	602a      	str	r2, [r5, #0]
 8008df0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	e002      	b.n	8008dfe <__swhatbuf_r+0x54>
 8008df8:	2240      	movs	r2, #64	; 0x40
 8008dfa:	6022      	str	r2, [r4, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	b016      	add	sp, #88	; 0x58
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e04 <__smakebuf_r>:
 8008e04:	898b      	ldrh	r3, [r1, #12]
 8008e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e08:	079d      	lsls	r5, r3, #30
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	d507      	bpl.n	8008e20 <__smakebuf_r+0x1c>
 8008e10:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	2301      	movs	r3, #1
 8008e1a:	6163      	str	r3, [r4, #20]
 8008e1c:	b002      	add	sp, #8
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	ab01      	add	r3, sp, #4
 8008e22:	466a      	mov	r2, sp
 8008e24:	f7ff ffc1 	bl	8008daa <__swhatbuf_r>
 8008e28:	9900      	ldr	r1, [sp, #0]
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7fd fe61 	bl	8006af4 <_malloc_r>
 8008e32:	b948      	cbnz	r0, 8008e48 <__smakebuf_r+0x44>
 8008e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e38:	059a      	lsls	r2, r3, #22
 8008e3a:	d4ef      	bmi.n	8008e1c <__smakebuf_r+0x18>
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	f043 0302 	orr.w	r3, r3, #2
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	e7e3      	b.n	8008e10 <__smakebuf_r+0xc>
 8008e48:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <__smakebuf_r+0x7c>)
 8008e4a:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	6020      	str	r0, [r4, #0]
 8008e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	9b00      	ldr	r3, [sp, #0]
 8008e58:	6163      	str	r3, [r4, #20]
 8008e5a:	9b01      	ldr	r3, [sp, #4]
 8008e5c:	6120      	str	r0, [r4, #16]
 8008e5e:	b15b      	cbz	r3, 8008e78 <__smakebuf_r+0x74>
 8008e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e64:	4630      	mov	r0, r6
 8008e66:	f000 f981 	bl	800916c <_isatty_r>
 8008e6a:	b128      	cbz	r0, 8008e78 <__smakebuf_r+0x74>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f023 0303 	bic.w	r3, r3, #3
 8008e72:	f043 0301 	orr.w	r3, r3, #1
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	89a0      	ldrh	r0, [r4, #12]
 8008e7a:	4305      	orrs	r5, r0
 8008e7c:	81a5      	strh	r5, [r4, #12]
 8008e7e:	e7cd      	b.n	8008e1c <__smakebuf_r+0x18>
 8008e80:	08008975 	.word	0x08008975

08008e84 <_raise_r>:
 8008e84:	291f      	cmp	r1, #31
 8008e86:	b538      	push	{r3, r4, r5, lr}
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	d904      	bls.n	8008e98 <_raise_r+0x14>
 8008e8e:	2316      	movs	r3, #22
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8008e9c:	b112      	cbz	r2, 8008ea4 <_raise_r+0x20>
 8008e9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ea2:	b94b      	cbnz	r3, 8008eb8 <_raise_r+0x34>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 f831 	bl	8008f0c <_getpid_r>
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4601      	mov	r1, r0
 8008eae:	4620      	mov	r0, r4
 8008eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb4:	f000 b818 	b.w	8008ee8 <_kill_r>
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d00a      	beq.n	8008ed2 <_raise_r+0x4e>
 8008ebc:	1c59      	adds	r1, r3, #1
 8008ebe:	d103      	bne.n	8008ec8 <_raise_r+0x44>
 8008ec0:	2316      	movs	r3, #22
 8008ec2:	6003      	str	r3, [r0, #0]
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e7e6      	b.n	8008e96 <_raise_r+0x12>
 8008ec8:	2400      	movs	r4, #0
 8008eca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ece:	4628      	mov	r0, r5
 8008ed0:	4798      	blx	r3
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e7df      	b.n	8008e96 <_raise_r+0x12>
	...

08008ed8 <raise>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <raise+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f7ff bfd1 	b.w	8008e84 <_raise_r>
 8008ee2:	bf00      	nop
 8008ee4:	2000006c 	.word	0x2000006c

08008ee8 <_kill_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	; (8008f08 <_kill_r+0x20>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f7f8 feb9 	bl	8001c6c <_kill>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d102      	bne.n	8008f04 <_kill_r+0x1c>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b103      	cbz	r3, 8008f04 <_kill_r+0x1c>
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	20000efc 	.word	0x20000efc

08008f0c <_getpid_r>:
 8008f0c:	f7f8 beac 	b.w	8001c68 <_getpid>

08008f10 <__sread>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	460c      	mov	r4, r1
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	f000 f94a 	bl	80091b0 <_read_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	bfab      	itete	ge
 8008f20:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8008f22:	89a3      	ldrhlt	r3, [r4, #12]
 8008f24:	181b      	addge	r3, r3, r0
 8008f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f2a:	bfac      	ite	ge
 8008f2c:	6523      	strge	r3, [r4, #80]	; 0x50
 8008f2e:	81a3      	strhlt	r3, [r4, #12]
 8008f30:	bd10      	pop	{r4, pc}

08008f32 <__swrite>:
 8008f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	461f      	mov	r7, r3
 8008f38:	898b      	ldrh	r3, [r1, #12]
 8008f3a:	05db      	lsls	r3, r3, #23
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	4616      	mov	r6, r2
 8008f42:	d505      	bpl.n	8008f50 <__swrite+0x1e>
 8008f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f48:	2302      	movs	r3, #2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f000 f91e 	bl	800918c <_lseek_r>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4628      	mov	r0, r5
 8008f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f66:	f000 b875 	b.w	8009054 <_write_r>

08008f6a <__sseek>:
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f72:	f000 f90b 	bl	800918c <_lseek_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	bf15      	itete	ne
 8008f7c:	6520      	strne	r0, [r4, #80]	; 0x50
 8008f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f86:	81a3      	strheq	r3, [r4, #12]
 8008f88:	bf18      	it	ne
 8008f8a:	81a3      	strhne	r3, [r4, #12]
 8008f8c:	bd10      	pop	{r4, pc}

08008f8e <__sclose>:
 8008f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f92:	f000 b871 	b.w	8009078 <_close_r>

08008f96 <__swbuf_r>:
 8008f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f98:	460e      	mov	r6, r1
 8008f9a:	4614      	mov	r4, r2
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	b118      	cbz	r0, 8008fa8 <__swbuf_r+0x12>
 8008fa0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008fa2:	b90b      	cbnz	r3, 8008fa8 <__swbuf_r+0x12>
 8008fa4:	f7ff fd04 	bl	80089b0 <__sinit>
 8008fa8:	69a3      	ldr	r3, [r4, #24]
 8008faa:	60a3      	str	r3, [r4, #8]
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	0719      	lsls	r1, r3, #28
 8008fb0:	d529      	bpl.n	8009006 <__swbuf_r+0x70>
 8008fb2:	6923      	ldr	r3, [r4, #16]
 8008fb4:	b33b      	cbz	r3, 8009006 <__swbuf_r+0x70>
 8008fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fba:	b2f6      	uxtb	r6, r6
 8008fbc:	049a      	lsls	r2, r3, #18
 8008fbe:	4637      	mov	r7, r6
 8008fc0:	d52a      	bpl.n	8009018 <__swbuf_r+0x82>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6920      	ldr	r0, [r4, #16]
 8008fc6:	1a18      	subs	r0, r3, r0
 8008fc8:	6963      	ldr	r3, [r4, #20]
 8008fca:	4283      	cmp	r3, r0
 8008fcc:	dc04      	bgt.n	8008fd8 <__swbuf_r+0x42>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7ff fc81 	bl	80088d8 <_fflush_r>
 8008fd6:	b9e0      	cbnz	r0, 8009012 <__swbuf_r+0x7c>
 8008fd8:	68a3      	ldr	r3, [r4, #8]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	6022      	str	r2, [r4, #0]
 8008fe4:	701e      	strb	r6, [r3, #0]
 8008fe6:	6962      	ldr	r2, [r4, #20]
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d004      	beq.n	8008ff8 <__swbuf_r+0x62>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	07db      	lsls	r3, r3, #31
 8008ff2:	d506      	bpl.n	8009002 <__swbuf_r+0x6c>
 8008ff4:	2e0a      	cmp	r6, #10
 8008ff6:	d104      	bne.n	8009002 <__swbuf_r+0x6c>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f7ff fc6c 	bl	80088d8 <_fflush_r>
 8009000:	b938      	cbnz	r0, 8009012 <__swbuf_r+0x7c>
 8009002:	4638      	mov	r0, r7
 8009004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f7ff fb77 	bl	80086fc <__swsetup_r>
 800900e:	2800      	cmp	r0, #0
 8009010:	d0d1      	beq.n	8008fb6 <__swbuf_r+0x20>
 8009012:	f04f 37ff 	mov.w	r7, #4294967295
 8009016:	e7f4      	b.n	8009002 <__swbuf_r+0x6c>
 8009018:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009024:	6663      	str	r3, [r4, #100]	; 0x64
 8009026:	e7cc      	b.n	8008fc2 <__swbuf_r+0x2c>

08009028 <_wcrtomb_r>:
 8009028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902a:	4c09      	ldr	r4, [pc, #36]	; (8009050 <_wcrtomb_r+0x28>)
 800902c:	b085      	sub	sp, #20
 800902e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8009032:	4605      	mov	r5, r0
 8009034:	461e      	mov	r6, r3
 8009036:	b909      	cbnz	r1, 800903c <_wcrtomb_r+0x14>
 8009038:	460a      	mov	r2, r1
 800903a:	a901      	add	r1, sp, #4
 800903c:	47b8      	blx	r7
 800903e:	1c43      	adds	r3, r0, #1
 8009040:	bf01      	itttt	eq
 8009042:	2300      	moveq	r3, #0
 8009044:	6033      	streq	r3, [r6, #0]
 8009046:	238a      	moveq	r3, #138	; 0x8a
 8009048:	602b      	streq	r3, [r5, #0]
 800904a:	b005      	add	sp, #20
 800904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800904e:	bf00      	nop
 8009050:	200008ac 	.word	0x200008ac

08009054 <_write_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	; (8009074 <_write_r+0x20>)
 8009058:	4604      	mov	r4, r0
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	2200      	movs	r2, #0
 8009060:	602a      	str	r2, [r5, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f7f8 fe1d 	bl	8001ca2 <_write>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_write_r+0x1e>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_write_r+0x1e>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20000efc 	.word	0x20000efc

08009078 <_close_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d06      	ldr	r5, [pc, #24]	; (8009094 <_close_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	f7f8 fe1a 	bl	8001cbc <_close>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_close_r+0x1a>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_close_r+0x1a>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	20000efc 	.word	0x20000efc

08009098 <_fclose_r>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	4606      	mov	r6, r0
 800909c:	460c      	mov	r4, r1
 800909e:	b911      	cbnz	r1, 80090a6 <_fclose_r+0xe>
 80090a0:	2500      	movs	r5, #0
 80090a2:	4628      	mov	r0, r5
 80090a4:	bd70      	pop	{r4, r5, r6, pc}
 80090a6:	b118      	cbz	r0, 80090b0 <_fclose_r+0x18>
 80090a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80090aa:	b90b      	cbnz	r3, 80090b0 <_fclose_r+0x18>
 80090ac:	f7ff fc80 	bl	80089b0 <__sinit>
 80090b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b2:	07d8      	lsls	r0, r3, #31
 80090b4:	d405      	bmi.n	80090c2 <_fclose_r+0x2a>
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	0599      	lsls	r1, r3, #22
 80090ba:	d402      	bmi.n	80090c2 <_fclose_r+0x2a>
 80090bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090be:	f7fd fd17 	bl	8006af0 <__retarget_lock_acquire_recursive>
 80090c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c6:	b93b      	cbnz	r3, 80090d8 <_fclose_r+0x40>
 80090c8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80090ca:	f015 0501 	ands.w	r5, r5, #1
 80090ce:	d1e7      	bne.n	80090a0 <_fclose_r+0x8>
 80090d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090d2:	f7fd fd0e 	bl	8006af2 <__retarget_lock_release_recursive>
 80090d6:	e7e4      	b.n	80090a2 <_fclose_r+0xa>
 80090d8:	4621      	mov	r1, r4
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff fb6e 	bl	80087bc <__sflush_r>
 80090e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090e2:	4605      	mov	r5, r0
 80090e4:	b133      	cbz	r3, 80090f4 <_fclose_r+0x5c>
 80090e6:	69e1      	ldr	r1, [r4, #28]
 80090e8:	4630      	mov	r0, r6
 80090ea:	4798      	blx	r3
 80090ec:	2800      	cmp	r0, #0
 80090ee:	bfb8      	it	lt
 80090f0:	f04f 35ff 	movlt.w	r5, #4294967295
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	061a      	lsls	r2, r3, #24
 80090f8:	d503      	bpl.n	8009102 <_fclose_r+0x6a>
 80090fa:	6921      	ldr	r1, [r4, #16]
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7fd fc31 	bl	8006964 <_free_r>
 8009102:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009104:	b141      	cbz	r1, 8009118 <_fclose_r+0x80>
 8009106:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800910a:	4299      	cmp	r1, r3
 800910c:	d002      	beq.n	8009114 <_fclose_r+0x7c>
 800910e:	4630      	mov	r0, r6
 8009110:	f7fd fc28 	bl	8006964 <_free_r>
 8009114:	2300      	movs	r3, #0
 8009116:	6323      	str	r3, [r4, #48]	; 0x30
 8009118:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800911a:	b121      	cbz	r1, 8009126 <_fclose_r+0x8e>
 800911c:	4630      	mov	r0, r6
 800911e:	f7fd fc21 	bl	8006964 <_free_r>
 8009122:	2300      	movs	r3, #0
 8009124:	6463      	str	r3, [r4, #68]	; 0x44
 8009126:	f7ff fc2b 	bl	8008980 <__sfp_lock_acquire>
 800912a:	2300      	movs	r3, #0
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009130:	07db      	lsls	r3, r3, #31
 8009132:	d402      	bmi.n	800913a <_fclose_r+0xa2>
 8009134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009136:	f7fd fcdc 	bl	8006af2 <__retarget_lock_release_recursive>
 800913a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800913c:	f7fd fcd7 	bl	8006aee <__retarget_lock_close_recursive>
 8009140:	f7ff fc24 	bl	800898c <__sfp_lock_release>
 8009144:	e7ad      	b.n	80090a2 <_fclose_r+0xa>
	...

08009148 <_fstat_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4d07      	ldr	r5, [pc, #28]	; (8009168 <_fstat_r+0x20>)
 800914c:	2300      	movs	r3, #0
 800914e:	4604      	mov	r4, r0
 8009150:	4608      	mov	r0, r1
 8009152:	4611      	mov	r1, r2
 8009154:	602b      	str	r3, [r5, #0]
 8009156:	f7f8 fdb4 	bl	8001cc2 <_fstat>
 800915a:	1c43      	adds	r3, r0, #1
 800915c:	d102      	bne.n	8009164 <_fstat_r+0x1c>
 800915e:	682b      	ldr	r3, [r5, #0]
 8009160:	b103      	cbz	r3, 8009164 <_fstat_r+0x1c>
 8009162:	6023      	str	r3, [r4, #0]
 8009164:	bd38      	pop	{r3, r4, r5, pc}
 8009166:	bf00      	nop
 8009168:	20000efc 	.word	0x20000efc

0800916c <_isatty_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d06      	ldr	r5, [pc, #24]	; (8009188 <_isatty_r+0x1c>)
 8009170:	2300      	movs	r3, #0
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	602b      	str	r3, [r5, #0]
 8009178:	f7f8 fda8 	bl	8001ccc <_isatty>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_isatty_r+0x1a>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_isatty_r+0x1a>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	20000efc 	.word	0x20000efc

0800918c <_lseek_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d07      	ldr	r5, [pc, #28]	; (80091ac <_lseek_r+0x20>)
 8009190:	4604      	mov	r4, r0
 8009192:	4608      	mov	r0, r1
 8009194:	4611      	mov	r1, r2
 8009196:	2200      	movs	r2, #0
 8009198:	602a      	str	r2, [r5, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	f7f8 fd98 	bl	8001cd0 <_lseek>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_lseek_r+0x1e>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_lseek_r+0x1e>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20000efc 	.word	0x20000efc

080091b0 <_read_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	; (80091d0 <_read_r+0x20>)
 80091b4:	4604      	mov	r4, r0
 80091b6:	4608      	mov	r0, r1
 80091b8:	4611      	mov	r1, r2
 80091ba:	2200      	movs	r2, #0
 80091bc:	602a      	str	r2, [r5, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f7f8 fd62 	bl	8001c88 <_read>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_read_r+0x1e>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_read_r+0x1e>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20000efc 	.word	0x20000efc

080091d4 <cosf>:
 80091d4:	ee10 3a10 	vmov	r3, s0
 80091d8:	b507      	push	{r0, r1, r2, lr}
 80091da:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <cosf+0x80>)
 80091dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e0:	4293      	cmp	r3, r2
 80091e2:	dc06      	bgt.n	80091f2 <cosf+0x1e>
 80091e4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009258 <cosf+0x84>
 80091e8:	b003      	add	sp, #12
 80091ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ee:	f000 b9b7 	b.w	8009560 <__kernel_cosf>
 80091f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80091f6:	db04      	blt.n	8009202 <cosf+0x2e>
 80091f8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80091fc:	b003      	add	sp, #12
 80091fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009202:	4668      	mov	r0, sp
 8009204:	f000 f870 	bl	80092e8 <__ieee754_rem_pio2f>
 8009208:	f000 0003 	and.w	r0, r0, #3
 800920c:	2801      	cmp	r0, #1
 800920e:	d009      	beq.n	8009224 <cosf+0x50>
 8009210:	2802      	cmp	r0, #2
 8009212:	d010      	beq.n	8009236 <cosf+0x62>
 8009214:	b9b0      	cbnz	r0, 8009244 <cosf+0x70>
 8009216:	eddd 0a01 	vldr	s1, [sp, #4]
 800921a:	ed9d 0a00 	vldr	s0, [sp]
 800921e:	f000 f99f 	bl	8009560 <__kernel_cosf>
 8009222:	e7eb      	b.n	80091fc <cosf+0x28>
 8009224:	eddd 0a01 	vldr	s1, [sp, #4]
 8009228:	ed9d 0a00 	vldr	s0, [sp]
 800922c:	f000 fc6e 	bl	8009b0c <__kernel_sinf>
 8009230:	eeb1 0a40 	vneg.f32	s0, s0
 8009234:	e7e2      	b.n	80091fc <cosf+0x28>
 8009236:	eddd 0a01 	vldr	s1, [sp, #4]
 800923a:	ed9d 0a00 	vldr	s0, [sp]
 800923e:	f000 f98f 	bl	8009560 <__kernel_cosf>
 8009242:	e7f5      	b.n	8009230 <cosf+0x5c>
 8009244:	eddd 0a01 	vldr	s1, [sp, #4]
 8009248:	ed9d 0a00 	vldr	s0, [sp]
 800924c:	2001      	movs	r0, #1
 800924e:	f000 fc5d 	bl	8009b0c <__kernel_sinf>
 8009252:	e7d3      	b.n	80091fc <cosf+0x28>
 8009254:	3f490fd8 	.word	0x3f490fd8
 8009258:	00000000 	.word	0x00000000

0800925c <sinf>:
 800925c:	ee10 3a10 	vmov	r3, s0
 8009260:	b507      	push	{r0, r1, r2, lr}
 8009262:	4a1f      	ldr	r2, [pc, #124]	; (80092e0 <sinf+0x84>)
 8009264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009268:	4293      	cmp	r3, r2
 800926a:	dc07      	bgt.n	800927c <sinf+0x20>
 800926c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80092e4 <sinf+0x88>
 8009270:	2000      	movs	r0, #0
 8009272:	b003      	add	sp, #12
 8009274:	f85d eb04 	ldr.w	lr, [sp], #4
 8009278:	f000 bc48 	b.w	8009b0c <__kernel_sinf>
 800927c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009280:	db04      	blt.n	800928c <sinf+0x30>
 8009282:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009286:	b003      	add	sp, #12
 8009288:	f85d fb04 	ldr.w	pc, [sp], #4
 800928c:	4668      	mov	r0, sp
 800928e:	f000 f82b 	bl	80092e8 <__ieee754_rem_pio2f>
 8009292:	f000 0003 	and.w	r0, r0, #3
 8009296:	2801      	cmp	r0, #1
 8009298:	d00a      	beq.n	80092b0 <sinf+0x54>
 800929a:	2802      	cmp	r0, #2
 800929c:	d00f      	beq.n	80092be <sinf+0x62>
 800929e:	b9c0      	cbnz	r0, 80092d2 <sinf+0x76>
 80092a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80092a4:	ed9d 0a00 	vldr	s0, [sp]
 80092a8:	2001      	movs	r0, #1
 80092aa:	f000 fc2f 	bl	8009b0c <__kernel_sinf>
 80092ae:	e7ea      	b.n	8009286 <sinf+0x2a>
 80092b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80092b4:	ed9d 0a00 	vldr	s0, [sp]
 80092b8:	f000 f952 	bl	8009560 <__kernel_cosf>
 80092bc:	e7e3      	b.n	8009286 <sinf+0x2a>
 80092be:	eddd 0a01 	vldr	s1, [sp, #4]
 80092c2:	ed9d 0a00 	vldr	s0, [sp]
 80092c6:	2001      	movs	r0, #1
 80092c8:	f000 fc20 	bl	8009b0c <__kernel_sinf>
 80092cc:	eeb1 0a40 	vneg.f32	s0, s0
 80092d0:	e7d9      	b.n	8009286 <sinf+0x2a>
 80092d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80092d6:	ed9d 0a00 	vldr	s0, [sp]
 80092da:	f000 f941 	bl	8009560 <__kernel_cosf>
 80092de:	e7f5      	b.n	80092cc <sinf+0x70>
 80092e0:	3f490fd8 	.word	0x3f490fd8
 80092e4:	00000000 	.word	0x00000000

080092e8 <__ieee754_rem_pio2f>:
 80092e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ea:	ee10 6a10 	vmov	r6, s0
 80092ee:	4b8e      	ldr	r3, [pc, #568]	; (8009528 <__ieee754_rem_pio2f+0x240>)
 80092f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80092f4:	429d      	cmp	r5, r3
 80092f6:	b087      	sub	sp, #28
 80092f8:	eef0 7a40 	vmov.f32	s15, s0
 80092fc:	4604      	mov	r4, r0
 80092fe:	dc05      	bgt.n	800930c <__ieee754_rem_pio2f+0x24>
 8009300:	2300      	movs	r3, #0
 8009302:	ed80 0a00 	vstr	s0, [r0]
 8009306:	6043      	str	r3, [r0, #4]
 8009308:	2000      	movs	r0, #0
 800930a:	e01a      	b.n	8009342 <__ieee754_rem_pio2f+0x5a>
 800930c:	4b87      	ldr	r3, [pc, #540]	; (800952c <__ieee754_rem_pio2f+0x244>)
 800930e:	429d      	cmp	r5, r3
 8009310:	dc46      	bgt.n	80093a0 <__ieee754_rem_pio2f+0xb8>
 8009312:	2e00      	cmp	r6, #0
 8009314:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8009530 <__ieee754_rem_pio2f+0x248>
 8009318:	4b86      	ldr	r3, [pc, #536]	; (8009534 <__ieee754_rem_pio2f+0x24c>)
 800931a:	f025 050f 	bic.w	r5, r5, #15
 800931e:	dd1f      	ble.n	8009360 <__ieee754_rem_pio2f+0x78>
 8009320:	429d      	cmp	r5, r3
 8009322:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009326:	d00e      	beq.n	8009346 <__ieee754_rem_pio2f+0x5e>
 8009328:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009538 <__ieee754_rem_pio2f+0x250>
 800932c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009330:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009334:	ed80 0a00 	vstr	s0, [r0]
 8009338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800933c:	2001      	movs	r0, #1
 800933e:	edc4 7a01 	vstr	s15, [r4, #4]
 8009342:	b007      	add	sp, #28
 8009344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009346:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800953c <__ieee754_rem_pio2f+0x254>
 800934a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009540 <__ieee754_rem_pio2f+0x258>
 800934e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009352:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009356:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800935a:	edc0 6a00 	vstr	s13, [r0]
 800935e:	e7eb      	b.n	8009338 <__ieee754_rem_pio2f+0x50>
 8009360:	429d      	cmp	r5, r3
 8009362:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009366:	d00e      	beq.n	8009386 <__ieee754_rem_pio2f+0x9e>
 8009368:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009538 <__ieee754_rem_pio2f+0x250>
 800936c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009370:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009374:	ed80 0a00 	vstr	s0, [r0]
 8009378:	ee77 7a87 	vadd.f32	s15, s15, s14
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	edc4 7a01 	vstr	s15, [r4, #4]
 8009384:	e7dd      	b.n	8009342 <__ieee754_rem_pio2f+0x5a>
 8009386:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800953c <__ieee754_rem_pio2f+0x254>
 800938a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8009540 <__ieee754_rem_pio2f+0x258>
 800938e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009392:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009396:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800939a:	edc0 6a00 	vstr	s13, [r0]
 800939e:	e7eb      	b.n	8009378 <__ieee754_rem_pio2f+0x90>
 80093a0:	4b68      	ldr	r3, [pc, #416]	; (8009544 <__ieee754_rem_pio2f+0x25c>)
 80093a2:	429d      	cmp	r5, r3
 80093a4:	dc72      	bgt.n	800948c <__ieee754_rem_pio2f+0x1a4>
 80093a6:	f000 fbf9 	bl	8009b9c <fabsf>
 80093aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009548 <__ieee754_rem_pio2f+0x260>
 80093ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80093b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80093b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093be:	ee17 0a90 	vmov	r0, s15
 80093c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8009530 <__ieee754_rem_pio2f+0x248>
 80093c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80093ca:	281f      	cmp	r0, #31
 80093cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009538 <__ieee754_rem_pio2f+0x250>
 80093d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d4:	eeb1 6a47 	vneg.f32	s12, s14
 80093d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80093dc:	ee16 2a90 	vmov	r2, s13
 80093e0:	dc1c      	bgt.n	800941c <__ieee754_rem_pio2f+0x134>
 80093e2:	495a      	ldr	r1, [pc, #360]	; (800954c <__ieee754_rem_pio2f+0x264>)
 80093e4:	1e47      	subs	r7, r0, #1
 80093e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80093ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80093ee:	428b      	cmp	r3, r1
 80093f0:	d014      	beq.n	800941c <__ieee754_rem_pio2f+0x134>
 80093f2:	6022      	str	r2, [r4, #0]
 80093f4:	ed94 7a00 	vldr	s14, [r4]
 80093f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80093fc:	2e00      	cmp	r6, #0
 80093fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009402:	ed84 0a01 	vstr	s0, [r4, #4]
 8009406:	da9c      	bge.n	8009342 <__ieee754_rem_pio2f+0x5a>
 8009408:	eeb1 7a47 	vneg.f32	s14, s14
 800940c:	eeb1 0a40 	vneg.f32	s0, s0
 8009410:	ed84 7a00 	vstr	s14, [r4]
 8009414:	ed84 0a01 	vstr	s0, [r4, #4]
 8009418:	4240      	negs	r0, r0
 800941a:	e792      	b.n	8009342 <__ieee754_rem_pio2f+0x5a>
 800941c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009420:	15eb      	asrs	r3, r5, #23
 8009422:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009426:	2d08      	cmp	r5, #8
 8009428:	dde3      	ble.n	80093f2 <__ieee754_rem_pio2f+0x10a>
 800942a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800953c <__ieee754_rem_pio2f+0x254>
 800942e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009540 <__ieee754_rem_pio2f+0x258>
 8009432:	eef0 6a40 	vmov.f32	s13, s0
 8009436:	eee6 6a27 	vfma.f32	s13, s12, s15
 800943a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800943e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8009442:	eef0 7a40 	vmov.f32	s15, s0
 8009446:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800944a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800944e:	ee15 2a90 	vmov	r2, s11
 8009452:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009456:	1a5b      	subs	r3, r3, r1
 8009458:	2b19      	cmp	r3, #25
 800945a:	dc04      	bgt.n	8009466 <__ieee754_rem_pio2f+0x17e>
 800945c:	edc4 5a00 	vstr	s11, [r4]
 8009460:	eeb0 0a66 	vmov.f32	s0, s13
 8009464:	e7c6      	b.n	80093f4 <__ieee754_rem_pio2f+0x10c>
 8009466:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009550 <__ieee754_rem_pio2f+0x268>
 800946a:	eeb0 0a66 	vmov.f32	s0, s13
 800946e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009472:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009476:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009554 <__ieee754_rem_pio2f+0x26c>
 800947a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800947e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009482:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009486:	ed84 7a00 	vstr	s14, [r4]
 800948a:	e7b3      	b.n	80093f4 <__ieee754_rem_pio2f+0x10c>
 800948c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009490:	db06      	blt.n	80094a0 <__ieee754_rem_pio2f+0x1b8>
 8009492:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009496:	edc0 7a01 	vstr	s15, [r0, #4]
 800949a:	edc0 7a00 	vstr	s15, [r0]
 800949e:	e733      	b.n	8009308 <__ieee754_rem_pio2f+0x20>
 80094a0:	15ea      	asrs	r2, r5, #23
 80094a2:	3a86      	subs	r2, #134	; 0x86
 80094a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80094a8:	ee07 3a90 	vmov	s15, r3
 80094ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009558 <__ieee754_rem_pio2f+0x270>
 80094b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 80094c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80094d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80094dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e0:	edcd 7a05 	vstr	s15, [sp, #20]
 80094e4:	d11e      	bne.n	8009524 <__ieee754_rem_pio2f+0x23c>
 80094e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80094ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ee:	bf14      	ite	ne
 80094f0:	2302      	movne	r3, #2
 80094f2:	2301      	moveq	r3, #1
 80094f4:	4919      	ldr	r1, [pc, #100]	; (800955c <__ieee754_rem_pio2f+0x274>)
 80094f6:	9101      	str	r1, [sp, #4]
 80094f8:	2102      	movs	r1, #2
 80094fa:	9100      	str	r1, [sp, #0]
 80094fc:	a803      	add	r0, sp, #12
 80094fe:	4621      	mov	r1, r4
 8009500:	f000 f88e 	bl	8009620 <__kernel_rem_pio2f>
 8009504:	2e00      	cmp	r6, #0
 8009506:	f6bf af1c 	bge.w	8009342 <__ieee754_rem_pio2f+0x5a>
 800950a:	edd4 7a00 	vldr	s15, [r4]
 800950e:	eef1 7a67 	vneg.f32	s15, s15
 8009512:	edc4 7a00 	vstr	s15, [r4]
 8009516:	edd4 7a01 	vldr	s15, [r4, #4]
 800951a:	eef1 7a67 	vneg.f32	s15, s15
 800951e:	edc4 7a01 	vstr	s15, [r4, #4]
 8009522:	e779      	b.n	8009418 <__ieee754_rem_pio2f+0x130>
 8009524:	2303      	movs	r3, #3
 8009526:	e7e5      	b.n	80094f4 <__ieee754_rem_pio2f+0x20c>
 8009528:	3f490fd8 	.word	0x3f490fd8
 800952c:	4016cbe3 	.word	0x4016cbe3
 8009530:	3fc90f80 	.word	0x3fc90f80
 8009534:	3fc90fd0 	.word	0x3fc90fd0
 8009538:	37354443 	.word	0x37354443
 800953c:	37354400 	.word	0x37354400
 8009540:	2e85a308 	.word	0x2e85a308
 8009544:	43490f80 	.word	0x43490f80
 8009548:	3f22f984 	.word	0x3f22f984
 800954c:	0800a0fc 	.word	0x0800a0fc
 8009550:	2e85a300 	.word	0x2e85a300
 8009554:	248d3132 	.word	0x248d3132
 8009558:	43800000 	.word	0x43800000
 800955c:	0800a17c 	.word	0x0800a17c

08009560 <__kernel_cosf>:
 8009560:	ee10 3a10 	vmov	r3, s0
 8009564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009568:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800956c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009570:	da05      	bge.n	800957e <__kernel_cosf+0x1e>
 8009572:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009576:	ee17 2a90 	vmov	r2, s15
 800957a:	2a00      	cmp	r2, #0
 800957c:	d03d      	beq.n	80095fa <__kernel_cosf+0x9a>
 800957e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8009582:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009600 <__kernel_cosf+0xa0>
 8009586:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8009604 <__kernel_cosf+0xa4>
 800958a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8009608 <__kernel_cosf+0xa8>
 800958e:	4a1f      	ldr	r2, [pc, #124]	; (800960c <__kernel_cosf+0xac>)
 8009590:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009594:	4293      	cmp	r3, r2
 8009596:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009610 <__kernel_cosf+0xb0>
 800959a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800959e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009614 <__kernel_cosf+0xb4>
 80095a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80095a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009618 <__kernel_cosf+0xb8>
 80095aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80095ae:	eeb0 7a66 	vmov.f32	s14, s13
 80095b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80095b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80095ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80095be:	ee67 6a25 	vmul.f32	s13, s14, s11
 80095c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80095c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80095ca:	dc04      	bgt.n	80095d6 <__kernel_cosf+0x76>
 80095cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80095d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80095d4:	4770      	bx	lr
 80095d6:	4a11      	ldr	r2, [pc, #68]	; (800961c <__kernel_cosf+0xbc>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	bfda      	itte	le
 80095dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80095e0:	ee06 3a90 	vmovle	s13, r3
 80095e4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80095e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 80095f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095f8:	4770      	bx	lr
 80095fa:	eeb0 0a46 	vmov.f32	s0, s12
 80095fe:	4770      	bx	lr
 8009600:	ad47d74e 	.word	0xad47d74e
 8009604:	310f74f6 	.word	0x310f74f6
 8009608:	3d2aaaab 	.word	0x3d2aaaab
 800960c:	3e999999 	.word	0x3e999999
 8009610:	b493f27c 	.word	0xb493f27c
 8009614:	37d00d01 	.word	0x37d00d01
 8009618:	bab60b61 	.word	0xbab60b61
 800961c:	3f480000 	.word	0x3f480000

08009620 <__kernel_rem_pio2f>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	ed2d 8b04 	vpush	{d8-d9}
 8009628:	b0d9      	sub	sp, #356	; 0x164
 800962a:	4688      	mov	r8, r1
 800962c:	9002      	str	r0, [sp, #8]
 800962e:	49bb      	ldr	r1, [pc, #748]	; (800991c <__kernel_rem_pio2f+0x2fc>)
 8009630:	9866      	ldr	r0, [sp, #408]	; 0x198
 8009632:	9301      	str	r3, [sp, #4]
 8009634:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009638:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800963c:	1e59      	subs	r1, r3, #1
 800963e:	1d13      	adds	r3, r2, #4
 8009640:	db27      	blt.n	8009692 <__kernel_rem_pio2f+0x72>
 8009642:	f1b2 0b03 	subs.w	fp, r2, #3
 8009646:	bf48      	it	mi
 8009648:	f102 0b04 	addmi.w	fp, r2, #4
 800964c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8009650:	1c45      	adds	r5, r0, #1
 8009652:	00ec      	lsls	r4, r5, #3
 8009654:	1a47      	subs	r7, r0, r1
 8009656:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800992c <__kernel_rem_pio2f+0x30c>
 800965a:	9403      	str	r4, [sp, #12]
 800965c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8009660:	eb0a 0c01 	add.w	ip, sl, r1
 8009664:	ae1c      	add	r6, sp, #112	; 0x70
 8009666:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800966a:	2400      	movs	r4, #0
 800966c:	4564      	cmp	r4, ip
 800966e:	dd12      	ble.n	8009696 <__kernel_rem_pio2f+0x76>
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	ac1c      	add	r4, sp, #112	; 0x70
 8009674:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009678:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800967c:	f04f 0c00 	mov.w	ip, #0
 8009680:	45d4      	cmp	ip, sl
 8009682:	dc27      	bgt.n	80096d4 <__kernel_rem_pio2f+0xb4>
 8009684:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009688:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800992c <__kernel_rem_pio2f+0x30c>
 800968c:	4627      	mov	r7, r4
 800968e:	2600      	movs	r6, #0
 8009690:	e016      	b.n	80096c0 <__kernel_rem_pio2f+0xa0>
 8009692:	2000      	movs	r0, #0
 8009694:	e7dc      	b.n	8009650 <__kernel_rem_pio2f+0x30>
 8009696:	42e7      	cmn	r7, r4
 8009698:	bf5d      	ittte	pl
 800969a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800969e:	ee07 3a90 	vmovpl	s15, r3
 80096a2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80096a6:	eef0 7a47 	vmovmi.f32	s15, s14
 80096aa:	ece6 7a01 	vstmia	r6!, {s15}
 80096ae:	3401      	adds	r4, #1
 80096b0:	e7dc      	b.n	800966c <__kernel_rem_pio2f+0x4c>
 80096b2:	ecf9 6a01 	vldmia	r9!, {s13}
 80096b6:	ed97 7a00 	vldr	s14, [r7]
 80096ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80096be:	3601      	adds	r6, #1
 80096c0:	428e      	cmp	r6, r1
 80096c2:	f1a7 0704 	sub.w	r7, r7, #4
 80096c6:	ddf4      	ble.n	80096b2 <__kernel_rem_pio2f+0x92>
 80096c8:	eceb 7a01 	vstmia	fp!, {s15}
 80096cc:	f10c 0c01 	add.w	ip, ip, #1
 80096d0:	3404      	adds	r4, #4
 80096d2:	e7d5      	b.n	8009680 <__kernel_rem_pio2f+0x60>
 80096d4:	ab08      	add	r3, sp, #32
 80096d6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80096da:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009928 <__kernel_rem_pio2f+0x308>
 80096de:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009924 <__kernel_rem_pio2f+0x304>
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80096e8:	4656      	mov	r6, sl
 80096ea:	00b3      	lsls	r3, r6, #2
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	ab58      	add	r3, sp, #352	; 0x160
 80096f0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80096f4:	ac08      	add	r4, sp, #32
 80096f6:	ab44      	add	r3, sp, #272	; 0x110
 80096f8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80096fc:	46a4      	mov	ip, r4
 80096fe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009702:	4637      	mov	r7, r6
 8009704:	2f00      	cmp	r7, #0
 8009706:	f1a0 0004 	sub.w	r0, r0, #4
 800970a:	dc4f      	bgt.n	80097ac <__kernel_rem_pio2f+0x18c>
 800970c:	4628      	mov	r0, r5
 800970e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009712:	f000 fa8d 	bl	8009c30 <scalbnf>
 8009716:	eeb0 8a40 	vmov.f32	s16, s0
 800971a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800971e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009722:	f000 fa43 	bl	8009bac <floorf>
 8009726:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800972a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800972e:	2d00      	cmp	r5, #0
 8009730:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009734:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009738:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800973c:	ee17 9a90 	vmov	r9, s15
 8009740:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009744:	dd44      	ble.n	80097d0 <__kernel_rem_pio2f+0x1b0>
 8009746:	f106 3cff 	add.w	ip, r6, #4294967295
 800974a:	ab08      	add	r3, sp, #32
 800974c:	f1c5 0e08 	rsb	lr, r5, #8
 8009750:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009754:	fa47 f00e 	asr.w	r0, r7, lr
 8009758:	4481      	add	r9, r0
 800975a:	fa00 f00e 	lsl.w	r0, r0, lr
 800975e:	1a3f      	subs	r7, r7, r0
 8009760:	f1c5 0007 	rsb	r0, r5, #7
 8009764:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009768:	4107      	asrs	r7, r0
 800976a:	2f00      	cmp	r7, #0
 800976c:	dd3f      	ble.n	80097ee <__kernel_rem_pio2f+0x1ce>
 800976e:	f04f 0e00 	mov.w	lr, #0
 8009772:	f109 0901 	add.w	r9, r9, #1
 8009776:	4673      	mov	r3, lr
 8009778:	4576      	cmp	r6, lr
 800977a:	dc6b      	bgt.n	8009854 <__kernel_rem_pio2f+0x234>
 800977c:	2d00      	cmp	r5, #0
 800977e:	dd04      	ble.n	800978a <__kernel_rem_pio2f+0x16a>
 8009780:	2d01      	cmp	r5, #1
 8009782:	d078      	beq.n	8009876 <__kernel_rem_pio2f+0x256>
 8009784:	2d02      	cmp	r5, #2
 8009786:	f000 8081 	beq.w	800988c <__kernel_rem_pio2f+0x26c>
 800978a:	2f02      	cmp	r7, #2
 800978c:	d12f      	bne.n	80097ee <__kernel_rem_pio2f+0x1ce>
 800978e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009792:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009796:	b353      	cbz	r3, 80097ee <__kernel_rem_pio2f+0x1ce>
 8009798:	4628      	mov	r0, r5
 800979a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800979e:	f000 fa47 	bl	8009c30 <scalbnf>
 80097a2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80097a6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80097aa:	e020      	b.n	80097ee <__kernel_rem_pio2f+0x1ce>
 80097ac:	ee60 7a28 	vmul.f32	s15, s0, s17
 80097b0:	3f01      	subs	r7, #1
 80097b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097ba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80097be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80097c2:	ecac 0a01 	vstmia	ip!, {s0}
 80097c6:	ed90 0a00 	vldr	s0, [r0]
 80097ca:	ee37 0a80 	vadd.f32	s0, s15, s0
 80097ce:	e799      	b.n	8009704 <__kernel_rem_pio2f+0xe4>
 80097d0:	d105      	bne.n	80097de <__kernel_rem_pio2f+0x1be>
 80097d2:	1e70      	subs	r0, r6, #1
 80097d4:	ab08      	add	r3, sp, #32
 80097d6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80097da:	11ff      	asrs	r7, r7, #7
 80097dc:	e7c5      	b.n	800976a <__kernel_rem_pio2f+0x14a>
 80097de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80097e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	da31      	bge.n	8009850 <__kernel_rem_pio2f+0x230>
 80097ec:	2700      	movs	r7, #0
 80097ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80097f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f6:	f040 809b 	bne.w	8009930 <__kernel_rem_pio2f+0x310>
 80097fa:	1e74      	subs	r4, r6, #1
 80097fc:	46a4      	mov	ip, r4
 80097fe:	2000      	movs	r0, #0
 8009800:	45d4      	cmp	ip, sl
 8009802:	da4a      	bge.n	800989a <__kernel_rem_pio2f+0x27a>
 8009804:	2800      	cmp	r0, #0
 8009806:	d07a      	beq.n	80098fe <__kernel_rem_pio2f+0x2de>
 8009808:	ab08      	add	r3, sp, #32
 800980a:	3d08      	subs	r5, #8
 800980c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 8081 	beq.w	8009918 <__kernel_rem_pio2f+0x2f8>
 8009816:	4628      	mov	r0, r5
 8009818:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800981c:	00a5      	lsls	r5, r4, #2
 800981e:	f000 fa07 	bl	8009c30 <scalbnf>
 8009822:	aa44      	add	r2, sp, #272	; 0x110
 8009824:	1d2b      	adds	r3, r5, #4
 8009826:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009928 <__kernel_rem_pio2f+0x308>
 800982a:	18d1      	adds	r1, r2, r3
 800982c:	4622      	mov	r2, r4
 800982e:	2a00      	cmp	r2, #0
 8009830:	f280 80ae 	bge.w	8009990 <__kernel_rem_pio2f+0x370>
 8009834:	4622      	mov	r2, r4
 8009836:	2a00      	cmp	r2, #0
 8009838:	f2c0 80cc 	blt.w	80099d4 <__kernel_rem_pio2f+0x3b4>
 800983c:	a944      	add	r1, sp, #272	; 0x110
 800983e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8009842:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009920 <__kernel_rem_pio2f+0x300>
 8009846:	eddf 7a39 	vldr	s15, [pc, #228]	; 800992c <__kernel_rem_pio2f+0x30c>
 800984a:	2000      	movs	r0, #0
 800984c:	1aa1      	subs	r1, r4, r2
 800984e:	e0b6      	b.n	80099be <__kernel_rem_pio2f+0x39e>
 8009850:	2702      	movs	r7, #2
 8009852:	e78c      	b.n	800976e <__kernel_rem_pio2f+0x14e>
 8009854:	6820      	ldr	r0, [r4, #0]
 8009856:	b94b      	cbnz	r3, 800986c <__kernel_rem_pio2f+0x24c>
 8009858:	b118      	cbz	r0, 8009862 <__kernel_rem_pio2f+0x242>
 800985a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800985e:	6020      	str	r0, [r4, #0]
 8009860:	2001      	movs	r0, #1
 8009862:	f10e 0e01 	add.w	lr, lr, #1
 8009866:	3404      	adds	r4, #4
 8009868:	4603      	mov	r3, r0
 800986a:	e785      	b.n	8009778 <__kernel_rem_pio2f+0x158>
 800986c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8009870:	6020      	str	r0, [r4, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	e7f5      	b.n	8009862 <__kernel_rem_pio2f+0x242>
 8009876:	1e74      	subs	r4, r6, #1
 8009878:	a808      	add	r0, sp, #32
 800987a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800987e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009882:	f10d 0c20 	add.w	ip, sp, #32
 8009886:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800988a:	e77e      	b.n	800978a <__kernel_rem_pio2f+0x16a>
 800988c:	1e74      	subs	r4, r6, #1
 800988e:	a808      	add	r0, sp, #32
 8009890:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009894:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009898:	e7f3      	b.n	8009882 <__kernel_rem_pio2f+0x262>
 800989a:	ab08      	add	r3, sp, #32
 800989c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80098a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80098a4:	4318      	orrs	r0, r3
 80098a6:	e7ab      	b.n	8009800 <__kernel_rem_pio2f+0x1e0>
 80098a8:	f10c 0c01 	add.w	ip, ip, #1
 80098ac:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80098b0:	2c00      	cmp	r4, #0
 80098b2:	d0f9      	beq.n	80098a8 <__kernel_rem_pio2f+0x288>
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80098ba:	eb0d 0003 	add.w	r0, sp, r3
 80098be:	9b01      	ldr	r3, [sp, #4]
 80098c0:	18f4      	adds	r4, r6, r3
 80098c2:	ab1c      	add	r3, sp, #112	; 0x70
 80098c4:	1c77      	adds	r7, r6, #1
 80098c6:	384c      	subs	r0, #76	; 0x4c
 80098c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098cc:	4466      	add	r6, ip
 80098ce:	42be      	cmp	r6, r7
 80098d0:	f6ff af0b 	blt.w	80096ea <__kernel_rem_pio2f+0xca>
 80098d4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80098d8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098e4:	f04f 0c00 	mov.w	ip, #0
 80098e8:	ece4 7a01 	vstmia	r4!, {s15}
 80098ec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800992c <__kernel_rem_pio2f+0x30c>
 80098f0:	46a1      	mov	r9, r4
 80098f2:	458c      	cmp	ip, r1
 80098f4:	dd07      	ble.n	8009906 <__kernel_rem_pio2f+0x2e6>
 80098f6:	ece0 7a01 	vstmia	r0!, {s15}
 80098fa:	3701      	adds	r7, #1
 80098fc:	e7e7      	b.n	80098ce <__kernel_rem_pio2f+0x2ae>
 80098fe:	9804      	ldr	r0, [sp, #16]
 8009900:	f04f 0c01 	mov.w	ip, #1
 8009904:	e7d2      	b.n	80098ac <__kernel_rem_pio2f+0x28c>
 8009906:	ecfe 6a01 	vldmia	lr!, {s13}
 800990a:	ed39 7a01 	vldmdb	r9!, {s14}
 800990e:	f10c 0c01 	add.w	ip, ip, #1
 8009912:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009916:	e7ec      	b.n	80098f2 <__kernel_rem_pio2f+0x2d2>
 8009918:	3c01      	subs	r4, #1
 800991a:	e775      	b.n	8009808 <__kernel_rem_pio2f+0x1e8>
 800991c:	0800a4c0 	.word	0x0800a4c0
 8009920:	0800a494 	.word	0x0800a494
 8009924:	43800000 	.word	0x43800000
 8009928:	3b800000 	.word	0x3b800000
 800992c:	00000000 	.word	0x00000000
 8009930:	9b03      	ldr	r3, [sp, #12]
 8009932:	eeb0 0a48 	vmov.f32	s0, s16
 8009936:	1a98      	subs	r0, r3, r2
 8009938:	f000 f97a 	bl	8009c30 <scalbnf>
 800993c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009924 <__kernel_rem_pio2f+0x304>
 8009940:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009948:	db19      	blt.n	800997e <__kernel_rem_pio2f+0x35e>
 800994a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009928 <__kernel_rem_pio2f+0x308>
 800994e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009952:	aa08      	add	r2, sp, #32
 8009954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009958:	1c74      	adds	r4, r6, #1
 800995a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800995e:	3508      	adds	r5, #8
 8009960:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009968:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800996c:	ee10 3a10 	vmov	r3, s0
 8009970:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009974:	ee17 3a90 	vmov	r3, s15
 8009978:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800997c:	e74b      	b.n	8009816 <__kernel_rem_pio2f+0x1f6>
 800997e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009982:	aa08      	add	r2, sp, #32
 8009984:	ee10 3a10 	vmov	r3, s0
 8009988:	4634      	mov	r4, r6
 800998a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800998e:	e742      	b.n	8009816 <__kernel_rem_pio2f+0x1f6>
 8009990:	a808      	add	r0, sp, #32
 8009992:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009996:	9001      	str	r0, [sp, #4]
 8009998:	ee07 0a90 	vmov	s15, r0
 800999c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099a0:	3a01      	subs	r2, #1
 80099a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80099a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80099aa:	ed61 7a01 	vstmdb	r1!, {s15}
 80099ae:	e73e      	b.n	800982e <__kernel_rem_pio2f+0x20e>
 80099b0:	ecfc 6a01 	vldmia	ip!, {s13}
 80099b4:	ecb6 7a01 	vldmia	r6!, {s14}
 80099b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80099bc:	3001      	adds	r0, #1
 80099be:	4550      	cmp	r0, sl
 80099c0:	dc01      	bgt.n	80099c6 <__kernel_rem_pio2f+0x3a6>
 80099c2:	4288      	cmp	r0, r1
 80099c4:	ddf4      	ble.n	80099b0 <__kernel_rem_pio2f+0x390>
 80099c6:	a858      	add	r0, sp, #352	; 0x160
 80099c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099cc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80099d0:	3a01      	subs	r2, #1
 80099d2:	e730      	b.n	8009836 <__kernel_rem_pio2f+0x216>
 80099d4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80099d6:	2a02      	cmp	r2, #2
 80099d8:	dc09      	bgt.n	80099ee <__kernel_rem_pio2f+0x3ce>
 80099da:	2a00      	cmp	r2, #0
 80099dc:	dc2a      	bgt.n	8009a34 <__kernel_rem_pio2f+0x414>
 80099de:	d043      	beq.n	8009a68 <__kernel_rem_pio2f+0x448>
 80099e0:	f009 0007 	and.w	r0, r9, #7
 80099e4:	b059      	add	sp, #356	; 0x164
 80099e6:	ecbd 8b04 	vpop	{d8-d9}
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d1f5      	bne.n	80099e0 <__kernel_rem_pio2f+0x3c0>
 80099f4:	ab30      	add	r3, sp, #192	; 0xc0
 80099f6:	442b      	add	r3, r5
 80099f8:	461a      	mov	r2, r3
 80099fa:	4619      	mov	r1, r3
 80099fc:	4620      	mov	r0, r4
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f1a1 0104 	sub.w	r1, r1, #4
 8009a04:	dc51      	bgt.n	8009aaa <__kernel_rem_pio2f+0x48a>
 8009a06:	4621      	mov	r1, r4
 8009a08:	2901      	cmp	r1, #1
 8009a0a:	f1a2 0204 	sub.w	r2, r2, #4
 8009a0e:	dc5c      	bgt.n	8009aca <__kernel_rem_pio2f+0x4aa>
 8009a10:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800992c <__kernel_rem_pio2f+0x30c>
 8009a14:	3304      	adds	r3, #4
 8009a16:	2c01      	cmp	r4, #1
 8009a18:	dc67      	bgt.n	8009aea <__kernel_rem_pio2f+0x4ca>
 8009a1a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009a1e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	d167      	bne.n	8009af6 <__kernel_rem_pio2f+0x4d6>
 8009a26:	edc8 6a00 	vstr	s13, [r8]
 8009a2a:	ed88 7a01 	vstr	s14, [r8, #4]
 8009a2e:	edc8 7a02 	vstr	s15, [r8, #8]
 8009a32:	e7d5      	b.n	80099e0 <__kernel_rem_pio2f+0x3c0>
 8009a34:	aa30      	add	r2, sp, #192	; 0xc0
 8009a36:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800992c <__kernel_rem_pio2f+0x30c>
 8009a3a:	4413      	add	r3, r2
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	da24      	bge.n	8009a8c <__kernel_rem_pio2f+0x46c>
 8009a42:	b34f      	cbz	r7, 8009a98 <__kernel_rem_pio2f+0x478>
 8009a44:	eef1 7a47 	vneg.f32	s15, s14
 8009a48:	edc8 7a00 	vstr	s15, [r8]
 8009a4c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a54:	aa31      	add	r2, sp, #196	; 0xc4
 8009a56:	2301      	movs	r3, #1
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	da20      	bge.n	8009a9e <__kernel_rem_pio2f+0x47e>
 8009a5c:	b10f      	cbz	r7, 8009a62 <__kernel_rem_pio2f+0x442>
 8009a5e:	eef1 7a67 	vneg.f32	s15, s15
 8009a62:	edc8 7a01 	vstr	s15, [r8, #4]
 8009a66:	e7bb      	b.n	80099e0 <__kernel_rem_pio2f+0x3c0>
 8009a68:	aa30      	add	r2, sp, #192	; 0xc0
 8009a6a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800992c <__kernel_rem_pio2f+0x30c>
 8009a6e:	4413      	add	r3, r2
 8009a70:	2c00      	cmp	r4, #0
 8009a72:	da05      	bge.n	8009a80 <__kernel_rem_pio2f+0x460>
 8009a74:	b10f      	cbz	r7, 8009a7a <__kernel_rem_pio2f+0x45a>
 8009a76:	eef1 7a67 	vneg.f32	s15, s15
 8009a7a:	edc8 7a00 	vstr	s15, [r8]
 8009a7e:	e7af      	b.n	80099e0 <__kernel_rem_pio2f+0x3c0>
 8009a80:	ed33 7a01 	vldmdb	r3!, {s14}
 8009a84:	3c01      	subs	r4, #1
 8009a86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a8a:	e7f1      	b.n	8009a70 <__kernel_rem_pio2f+0x450>
 8009a8c:	ed73 7a01 	vldmdb	r3!, {s15}
 8009a90:	3a01      	subs	r2, #1
 8009a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a96:	e7d2      	b.n	8009a3e <__kernel_rem_pio2f+0x41e>
 8009a98:	eef0 7a47 	vmov.f32	s15, s14
 8009a9c:	e7d4      	b.n	8009a48 <__kernel_rem_pio2f+0x428>
 8009a9e:	ecb2 7a01 	vldmia	r2!, {s14}
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009aa8:	e7d6      	b.n	8009a58 <__kernel_rem_pio2f+0x438>
 8009aaa:	edd1 7a00 	vldr	s15, [r1]
 8009aae:	edd1 6a01 	vldr	s13, [r1, #4]
 8009ab2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009ab6:	3801      	subs	r0, #1
 8009ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009abc:	ed81 7a00 	vstr	s14, [r1]
 8009ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac4:	edc1 7a01 	vstr	s15, [r1, #4]
 8009ac8:	e799      	b.n	80099fe <__kernel_rem_pio2f+0x3de>
 8009aca:	edd2 7a00 	vldr	s15, [r2]
 8009ace:	edd2 6a01 	vldr	s13, [r2, #4]
 8009ad2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009ad6:	3901      	subs	r1, #1
 8009ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009adc:	ed82 7a00 	vstr	s14, [r2]
 8009ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae4:	edc2 7a01 	vstr	s15, [r2, #4]
 8009ae8:	e78e      	b.n	8009a08 <__kernel_rem_pio2f+0x3e8>
 8009aea:	ed33 7a01 	vldmdb	r3!, {s14}
 8009aee:	3c01      	subs	r4, #1
 8009af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009af4:	e78f      	b.n	8009a16 <__kernel_rem_pio2f+0x3f6>
 8009af6:	eef1 6a66 	vneg.f32	s13, s13
 8009afa:	eeb1 7a47 	vneg.f32	s14, s14
 8009afe:	edc8 6a00 	vstr	s13, [r8]
 8009b02:	ed88 7a01 	vstr	s14, [r8, #4]
 8009b06:	eef1 7a67 	vneg.f32	s15, s15
 8009b0a:	e790      	b.n	8009a2e <__kernel_rem_pio2f+0x40e>

08009b0c <__kernel_sinf>:
 8009b0c:	ee10 3a10 	vmov	r3, s0
 8009b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009b18:	da04      	bge.n	8009b24 <__kernel_sinf+0x18>
 8009b1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009b1e:	ee17 3a90 	vmov	r3, s15
 8009b22:	b35b      	cbz	r3, 8009b7c <__kernel_sinf+0x70>
 8009b24:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009b28:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009b80 <__kernel_sinf+0x74>
 8009b2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009b84 <__kernel_sinf+0x78>
 8009b30:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009b34:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009b88 <__kernel_sinf+0x7c>
 8009b38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009b3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009b8c <__kernel_sinf+0x80>
 8009b40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009b44:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009b90 <__kernel_sinf+0x84>
 8009b48:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009b4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009b50:	b930      	cbnz	r0, 8009b60 <__kernel_sinf+0x54>
 8009b52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009b94 <__kernel_sinf+0x88>
 8009b56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009b5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009b5e:	4770      	bx	lr
 8009b60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009b64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009b68:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009b6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009b70:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009b98 <__kernel_sinf+0x8c>
 8009b74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009b78:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	2f2ec9d3 	.word	0x2f2ec9d3
 8009b84:	b2d72f34 	.word	0xb2d72f34
 8009b88:	3638ef1b 	.word	0x3638ef1b
 8009b8c:	b9500d01 	.word	0xb9500d01
 8009b90:	3c088889 	.word	0x3c088889
 8009b94:	be2aaaab 	.word	0xbe2aaaab
 8009b98:	3e2aaaab 	.word	0x3e2aaaab

08009b9c <fabsf>:
 8009b9c:	ee10 3a10 	vmov	r3, s0
 8009ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ba4:	ee00 3a10 	vmov	s0, r3
 8009ba8:	4770      	bx	lr
	...

08009bac <floorf>:
 8009bac:	ee10 3a10 	vmov	r3, s0
 8009bb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009bb4:	3a7f      	subs	r2, #127	; 0x7f
 8009bb6:	2a16      	cmp	r2, #22
 8009bb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bbc:	dc2a      	bgt.n	8009c14 <floorf+0x68>
 8009bbe:	2a00      	cmp	r2, #0
 8009bc0:	da11      	bge.n	8009be6 <floorf+0x3a>
 8009bc2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009c24 <floorf+0x78>
 8009bc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd2:	dd05      	ble.n	8009be0 <floorf+0x34>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da23      	bge.n	8009c20 <floorf+0x74>
 8009bd8:	4a13      	ldr	r2, [pc, #76]	; (8009c28 <floorf+0x7c>)
 8009bda:	2900      	cmp	r1, #0
 8009bdc:	bf18      	it	ne
 8009bde:	4613      	movne	r3, r2
 8009be0:	ee00 3a10 	vmov	s0, r3
 8009be4:	4770      	bx	lr
 8009be6:	4911      	ldr	r1, [pc, #68]	; (8009c2c <floorf+0x80>)
 8009be8:	4111      	asrs	r1, r2
 8009bea:	420b      	tst	r3, r1
 8009bec:	d0fa      	beq.n	8009be4 <floorf+0x38>
 8009bee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009c24 <floorf+0x78>
 8009bf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009bf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfe:	ddef      	ble.n	8009be0 <floorf+0x34>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfbe      	ittt	lt
 8009c04:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009c08:	fa40 f202 	asrlt.w	r2, r0, r2
 8009c0c:	189b      	addlt	r3, r3, r2
 8009c0e:	ea23 0301 	bic.w	r3, r3, r1
 8009c12:	e7e5      	b.n	8009be0 <floorf+0x34>
 8009c14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009c18:	d3e4      	bcc.n	8009be4 <floorf+0x38>
 8009c1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c1e:	4770      	bx	lr
 8009c20:	2300      	movs	r3, #0
 8009c22:	e7dd      	b.n	8009be0 <floorf+0x34>
 8009c24:	7149f2ca 	.word	0x7149f2ca
 8009c28:	bf800000 	.word	0xbf800000
 8009c2c:	007fffff 	.word	0x007fffff

08009c30 <scalbnf>:
 8009c30:	ee10 3a10 	vmov	r3, s0
 8009c34:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009c38:	d025      	beq.n	8009c86 <scalbnf+0x56>
 8009c3a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009c3e:	d302      	bcc.n	8009c46 <scalbnf+0x16>
 8009c40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c44:	4770      	bx	lr
 8009c46:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009c4a:	d122      	bne.n	8009c92 <scalbnf+0x62>
 8009c4c:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <scalbnf+0xc8>)
 8009c4e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009cfc <scalbnf+0xcc>
 8009c52:	4298      	cmp	r0, r3
 8009c54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c58:	db16      	blt.n	8009c88 <scalbnf+0x58>
 8009c5a:	ee10 3a10 	vmov	r3, s0
 8009c5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c62:	3a19      	subs	r2, #25
 8009c64:	4402      	add	r2, r0
 8009c66:	2afe      	cmp	r2, #254	; 0xfe
 8009c68:	dd15      	ble.n	8009c96 <scalbnf+0x66>
 8009c6a:	ee10 3a10 	vmov	r3, s0
 8009c6e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009d00 <scalbnf+0xd0>
 8009c72:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009d04 <scalbnf+0xd4>
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	eeb0 7a67 	vmov.f32	s14, s15
 8009c7c:	bfb8      	it	lt
 8009c7e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009c82:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009c86:	4770      	bx	lr
 8009c88:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009d08 <scalbnf+0xd8>
 8009c8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c90:	4770      	bx	lr
 8009c92:	0dd2      	lsrs	r2, r2, #23
 8009c94:	e7e6      	b.n	8009c64 <scalbnf+0x34>
 8009c96:	2a00      	cmp	r2, #0
 8009c98:	dd06      	ble.n	8009ca8 <scalbnf+0x78>
 8009c9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c9e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009ca2:	ee00 3a10 	vmov	s0, r3
 8009ca6:	4770      	bx	lr
 8009ca8:	f112 0f16 	cmn.w	r2, #22
 8009cac:	da1a      	bge.n	8009ce4 <scalbnf+0xb4>
 8009cae:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009cb2:	4298      	cmp	r0, r3
 8009cb4:	ee10 3a10 	vmov	r3, s0
 8009cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cbc:	dd0a      	ble.n	8009cd4 <scalbnf+0xa4>
 8009cbe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009d00 <scalbnf+0xd0>
 8009cc2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009d04 <scalbnf+0xd4>
 8009cc6:	eef0 7a40 	vmov.f32	s15, s0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bf18      	it	ne
 8009cce:	eeb0 0a47 	vmovne.f32	s0, s14
 8009cd2:	e7db      	b.n	8009c8c <scalbnf+0x5c>
 8009cd4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009d08 <scalbnf+0xd8>
 8009cd8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009d0c <scalbnf+0xdc>
 8009cdc:	eef0 7a40 	vmov.f32	s15, s0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	e7f3      	b.n	8009ccc <scalbnf+0x9c>
 8009ce4:	3219      	adds	r2, #25
 8009ce6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009cee:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009d10 <scalbnf+0xe0>
 8009cf2:	ee07 3a10 	vmov	s14, r3
 8009cf6:	e7c4      	b.n	8009c82 <scalbnf+0x52>
 8009cf8:	ffff3cb0 	.word	0xffff3cb0
 8009cfc:	4c000000 	.word	0x4c000000
 8009d00:	7149f2ca 	.word	0x7149f2ca
 8009d04:	f149f2ca 	.word	0xf149f2ca
 8009d08:	0da24260 	.word	0x0da24260
 8009d0c:	8da24260 	.word	0x8da24260
 8009d10:	33000000 	.word	0x33000000

08009d14 <_init>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	bf00      	nop
 8009d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1a:	bc08      	pop	{r3}
 8009d1c:	469e      	mov	lr, r3
 8009d1e:	4770      	bx	lr

08009d20 <_fini>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr
